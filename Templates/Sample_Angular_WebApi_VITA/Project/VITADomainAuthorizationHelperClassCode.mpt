<CONFIG>
	NAME VITADomainAuthorizationHelperClassCode
	CATEGORY VITA
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
//
// Use this template to create an authorization helper class to manage application access using
// the VITA Authorization module.
//
<%%=USETABS true%%>
<%%=TAB -100%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Vita.Entities;
using Vita.Entities.Model;
using Vita.Entities.Authorization;
using %%><%%=Project.Namespace%%><%%-.Models;

namespace %%><%%=Project.Namespace%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class is used to manage access to the application, using the
	/// VITA Authorization module, with defined roles, permissions, filters, and activities.</summary>
	///
	/// ROLES:
	/// Public  - can view all information
	/// Member  - can view all information and edit own information
	/// Admin  - can view all information and edit all information
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, change
	/// the Status value below to something other than Generated to
	/// prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	public static partial class %%><%%=VITADomainAuthorizationHelperClassName%%>
	<%%=Solution.OPEN_BRACE%%><%%-
		// A key for OperationContext.Values dictionary to store the ID of order under adjustment
		public const string AdjustedOrderIdKey = "AdjustedOrderId";
		
		public static Role PublicUser;
		public static Role MemberUser;
		public static Role AdminUser;
		
		public static DynamicActivityGrant AuthorEditGrant;
		public static DynamicActivityGrant ManagerAdjustOrderGrant;
		
		public static bool IsSet(this UserType flags, UserType flag)%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			return (flags & flag) != 0;%%>
		<%%=Solution.CLOSE_BRACE%%><%%-

		public static IList<Role> GetRoles(UserType userType)%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			if (!_initialized)%%><%%=Solution.INDENT%%><%%-
				EnsureInitialized();%%><%%=Solution.OUTDENT%%><%%-
			var roles = new List<Role>();
			if (userType.IsSet(UserType.Public))%%><%%=Solution.INDENT%%><%%-
				roles.Add(PublicUser);%%><%%=Solution.OUTDENT%%><%%-
			if (userType.IsSet(UserType.Member))%%><%%=Solution.INDENT%%><%%-
				roles.Add(MemberUser);%%><%%=Solution.OUTDENT%%><%%-
			if (userType.IsSet(UserType.Administrator))%%><%%=Solution.INDENT%%><%%-
				roles.Add(AdminUser);%%><%%=Solution.OUTDENT%%><%%-
			
			#region protected
			#endregion protected
			
			return roles;%%>
		<%%=Solution.CLOSE_BRACE%%><%%-
		
		private static bool _initialized;	
		
		public static void EnsureInitialized()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			if (_initialized) return;
			_initialized = true;
			
			// Data filters
			// 'userid' value will be automatically injected by runtime when evaluating lambdas
			var memberDataFilter = new AuthorizationFilter("MemberData");%%>
			foreach (Entity where VITAIsPrimaryUserEntity == true)
			{
				foreach (Entity in Solution where VITAIsDataModelEntity == true)
				{
					if (HasReferenceToEntity(entityID = ../EntityID) == true)
					{
						<%%=Solution.NEWLINE%%>
						<%%-memberDataFilter.Add<%%><%%=VITAInterfaceName%%><%%-, %%><%%=VITAPrimaryKeyDataType%%><%%->((i, userId) => i%%><%%=VITAPathToEntityKey(entityID = ../EntityID)%%><%%- == userId);%%>
					}
				}
			}
			<%%-
			
			// Entity resources
			var entities = new EntityGroupResource("Entities"%%><%%=Solution.INDENT%%>
				foreach (Entity where VITAIsPrimaryUserEntity == false)
				{
					<%%=Solution.NEWLINE%%>
					<%%-, typeof(%%><%%=VITAInterfaceName%%><%%-)%%>
				}
			<%%-);%%><%%=Solution.OUTDENT%%><%%-
			var members = new EntityGroupResource("Members"%%>
			foreach (Entity where VITAIsPrimaryUserEntity == true)
			{
				<%%-, typeof(%%><%%=VITAInterfaceName%%><%%-)%%>
			}
			<%%-);
			
			// Permissions
			var browseAll = new EntityGroupPermission("BrowseAll", AccessType.Read, entities, members);
			var register = new EntityGroupPermission("Register", AccessType.Create, members);
			var manageAccount = new EntityGroupPermission("ManageAccount", AccessType.CRUD, members);
			var manageEntities = new EntityGroupPermission("ManageEntities", AccessType.CRUD, entities);
			
			// Activities
			var browsing = new Activity("Browsing", browseAll);
			var registering = new Activity("Registering", register);
			var editing = new Activity("Editing", manageAccount, manageEntities);
			
			// Roles
			// Public role can browse through anything and register
			PublicUser = new Role("PublicUser", browsing, registering);
			// Member role can browse and edit own stuff
			MemberUser = new Role("MemberUser");
			MemberUser.ChildRoles.Add(PublicUser);
			MemberUser.Grant(memberDataFilter, editing);
			// Admin role can browse and edit anything
			AdminUser = new Role("AdminUser", editing);
			AdminUser.ChildRoles.Add(MemberUser);
			AdminUser.ChildRoles.Add(PublicUser);
			
			#region protected
			#endregion protected
		%%><%%=Solution.CLOSE_BRACE%%>
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(VITADomainAuthorizationHelperClassFilePath) == null || (File(VITADomainAuthorizationHelperClassFilePath).Contains("<Status>Generated</Status>") == true
     && File(VITADomainAuthorizationHelperClassFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(VITADomainAuthorizationHelperClassFilePath)
}
%%></OUTPUT>