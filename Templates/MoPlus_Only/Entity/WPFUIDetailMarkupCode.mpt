<CONFIG>
	NAME WPFUIDetailMarkupCode
	CATEGORY WPFUI
	NODE Entity
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
var rowIndex
var isFirstTextBox
<%%-<!--
 This  code was generated from a template.  Change the
 Status value below to something other than Generated if you have
 customized this file outside of protected areas to prevent changes
 from being overwritten.

 <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
 <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
 <Status>Generated</Status>
-->
<lib:EditControl x:Class="%%><%%=Project.Namespace%%><%%-.UserControls.%%><%%=FeatureName%%><%%-.%%><%%=WPFUIDetailClassName%%><%%-"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"%%>
                     
with (Project)
{
	if (ProjectReferenceCount > 1)
	{
		// get a project tagged as VM
		foreach (Project where Tags.Contains("VM") == true)
		{
                    <%%-
                     xmlns:VM="clr-namespace:%%><%%=Namespace%%><%%-;assembly=%%><%%=Namespace%%><%%-"
                     xmlns:%%><%%=../../FeatureName%%><%%-VM="clr-namespace:%%><%%=Namespace%%><%%-.%%><%%=../../FeatureName%%><%%-;assembly=%%><%%=Namespace%%><%%-"%%>
		}
	}
	else
	{
		foreach (Project)
		{
                    <%%-
                     xmlns:VM="clr-namespace:%%><%%=Namespace%%><%%-;assembly=%%><%%=Namespace%%><%%-"
                     xmlns:%%><%%=../../FeatureName%%><%%-VM="clr-namespace:%%><%%=Namespace%%><%%-.%%><%%=../../FeatureName%%><%%-;assembly=%%><%%=Namespace%%><%%-"%%>
		}
	}
}
                     <%%-
                     xmlns:lib="clr-namespace:%%><%%=Project.Namespace%%><%%-.Library"
                     xmlns:Settings="clr-namespace:%%><%%=Project.Namespace%%><%%-.Library;assembly=%%><%%=Project.Namespace%%><%%-"
                     mc:Ignorable="d" 
                     d:DesignHeight="300" d:DesignWidth="300">
 	<lib:EditControl.CommandBindings>%%>
 if (HasPathProperty == true && BLLClassName != "Project")
 {
  		<%%-
 		<CommandBinding Command="Open" Executed="OpenExecuted"></CommandBinding>%%>
}
if (HasCustomUIProperty == true)
{
		<%%-
		<!-- region protected -->
		<!-- endregion protected -->%%>
}
  	<%%-
	</lib:EditControl.CommandBindings>
	<lib:EditControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="../../Resources/Theme.xaml" />
			</ResourceDictionary.MergedDictionaries>%%>
foreach (Property where IsPrimaryKeyMember == true limit 1)
{
			<%%-
			<Style x:Key="%%><%%=BLLPropertyName%%><%%-Input" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-Customized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>%%>
}
foreach (Entity in EntityAndBaseEntities)
{
	foreach (Property where IsUIEditableProperty == true)
	{
		if (Tags.Contains("SelectParent") == true)
		{
			<%%-
			<Style x:Key="Select%%><%%=BLLPropertyName%%><%%-Input" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding Select%%><%%=BLLPropertyName%%><%%-Customized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding Select%%><%%=BLLPropertyName%%><%%-ValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>%%>
		}
		else if (DataTypeCode == 12 /* Boolean */)
		{
			<%%-
			<Style x:Key="%%><%%=BLLPropertyName%%><%%-Input" BasedOn="{StaticResource BasicCheckBox}" TargetType="{x:Type CheckBox}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-Customized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>%%>
		}
		else
		{
			<%%-
			<Style x:Key="%%><%%=BLLPropertyName%%><%%-Input" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-Customized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>%%>
		}
	}
}
if (HasCustomUIProperty == true)
{
	foreach (Entity in EntityAndBaseEntities)
	{
		foreach (Collection where Tags.Contains("CustomUI") == true)
		{
			<%%-
			<Style x:Key="%%><%%=BLLPropertyName%%><%%-Input" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-Customized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>%%>
		}
	}
}
		<%%-
			<Style x:Key="SourceNameInput" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding SourceNameCustomized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding SourceNameValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="SpecSourceNameInput" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding SpecSourceNameCustomized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding SpecSourceNameValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="TagsInput" BasedOn="{StaticResource LabelInput}" TargetType="{x:Type Label}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding TagsCustomized, Mode=OneWay}" Value="True">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Black" />
						</DataTrigger.Setters>
					</DataTrigger>
					<DataTrigger Binding="{Binding TagsValidationMessage, Converter={StaticResource IsNullOrEmptyConverter}, Mode=OneWay}" Value="False">
						<DataTrigger.Setters>
							<Setter Property="Foreground" Value="Red" />
						</DataTrigger.Setters>
					</DataTrigger>
				</Style.Triggers>
			</Style>
			<VM:LabelHelper x:Key="labels" />
		</ResourceDictionary>
	</lib:EditControl.Resources>
	<ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Background="{StaticResource ControlBackgroundBrush}">
		<Grid MinWidth="400" MinHeight="400" DataContextChanged="Grid_DataContextChanged"
			  MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=ScrollViewer}}"
			  RenderTransformOrigin="0.5,0.5">
			<Grid.LayoutTransform>
				<TransformGroup>
					<ScaleTransform ScaleX="{Binding Source={x:Static Settings:UserSettingsHelper.Instance}, Path=ControlSize, Mode=TwoWay}"
					                          ScaleY="{Binding Source={x:Static Settings:UserSettingsHelper.Instance}, Path=ControlSize, Mode=TwoWay}"/>
				</TransformGroup>
			</Grid.LayoutTransform>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"></RowDefinition>
				<RowDefinition Height="Auto"></RowDefinition>%%>
foreach (Entity in EntityAndBaseEntities)
{
	foreach (Property where IsUIEditableProperty == true && Tags.Contains("CondensedUI1") == false && Tags.Contains("CondensedUI2") == false && Tags.Contains("CondensedUI3") == false)
	{
		if (BLLPropertyName == "Description")
		{
			with (../../)
			{
				if (PropertyHasTag(tagName = "CondensedUI1") == true)
				{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
				}
				if (PropertyHasTag(tagName = "CondensedUI2") == true)
				{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
				}
				if (PropertyHasTag(tagName = "CondensedUI3") == true)
				{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
				}
				if (HasCustomUIProperty == true)
				{
					foreach (Entity in EntityAndBaseEntities)
					{
						foreach (Collection where Tags.Contains("CustomUI") == true)
						{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
						}
					}
				}
			}
		}
		if (IsForeignKeyMember == true)
		{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
		}
		else
		{
			switch (DataTypeCode)
			{
				case 2: // IntShort
				case 3: // Int
				case 4: // IntLong
				case 6: // UIntShort
				case 7: // UInt
				case 8: // UIntLong
				case 21: // IntTiny
				case 22: // UIntTiny
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
					break
				case 12: // Boolean
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
					break
				case 13: // Char
				case 14: // CharUnicode
				case 16: // String
				case 17: // StringUnicode
				case 19: // Text
				case 20: // TextUnicode
					if (BLLPropertyName.Contains("Name") == true || Tags.Contains("Name") == true || Tags.Contains("Password") == true || BLLPropertyName.EndsWith("Value") == true)
					{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
					}
					else if (BLLPropertyName.EndsWith("Path") == true)
					{
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
					}
					else
					{
				<%%-
				<RowDefinition Height="*"></RowDefinition>%%>
					}
					break
				default:
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>%%>
					break
			}
		}
	}
}
				<%%-
				<RowDefinition Height="Auto"></RowDefinition>
				<RowDefinition Height="Auto"></RowDefinition>
				<RowDefinition Height="Auto"></RowDefinition>
				<RowDefinition Height="Auto"></RowDefinition>
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="10"></ColumnDefinition>
				<ColumnDefinition Width="Auto"></ColumnDefinition>
				<ColumnDefinition Width="*"></ColumnDefinition>
				<ColumnDefinition Width="10"></ColumnDefinition>
			</Grid.ColumnDefinitions>
			<Label Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Style="{DynamicResource LabelHeader}" Content="{Binding Title, Mode=OneWay}" />%%>
foreach (Property where IsPrimaryKeyMember == true limit 1)
{
			<%%-
			<Label Grid.Row="1" Grid.Column="1" Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
}
rowIndex = 1
foreach (Entity in EntityAndBaseEntities)
{
	foreach (Property where IsUIEditableProperty == true && Tags.Contains("CondensedUI1") == false && Tags.Contains("CondensedUI2") == false && Tags.Contains("CondensedUI3") == false)
	{
		if (BLLPropertyName == "Description")
		{
			with (../../)
			{
				if (PropertyHasTag(tagName = "CondensedUI1") == true)
				{
					rowIndex = rowIndex + 1
				}
				if (PropertyHasTag(tagName = "CondensedUI2") == true)
				{
					rowIndex = rowIndex + 1
				}
				if (PropertyHasTag(tagName = "CondensedUI3") == true)
				{
					rowIndex = rowIndex + 1
				}
				if (HasCustomUIProperty == true)
				{
					foreach (Entity in EntityAndBaseEntities)
					{
						foreach (Collection where Tags.Contains("CustomUI") == true)
						{
							rowIndex = rowIndex + 1
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="1" Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
						}
					}
				}
			}
		}
		rowIndex = rowIndex + 1
		if (Tags.Contains("SelectParent") == true)
		{
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="1" Style="{DynamicResource Select%%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding Select%%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
		}
		else if (DataTypeCode != 12 /* Boolean */)
		{
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="1" Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
		}
	}
}
rowIndex = rowIndex + 1
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="1" Style="{DynamicResource TagsInput}" Content="{Binding TagsLabel, Mode=OneWay}" />%%>
rowIndex = rowIndex + 1
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="1" Style="{DynamicResource SourceNameInput}" Content="{Binding SourceNameLabel, Mode=OneWay}" Visibility="{Binding SourceNameVisibility}" />%%>
rowIndex = rowIndex + 1
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="1" Style="{DynamicResource SpecSourceNameInput}" Content="{Binding SpecSourceNameLabel, Mode=OneWay}" Visibility="{Binding SpecSourceNameVisibility}" />%%>
			<%%-
			<Border Name="PlaceHolderBorder" Grid.Column="2" Margin="7"/>%%>
foreach (Property where IsPrimaryKeyMember == true limit 1)
{
			<%%-
			<Label Grid.Row="1" Grid.Column="2" Style="{StaticResource LabelValue}" Content="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=OneWay}" />%%>
}
rowIndex = 1
isFirstTextBox = true
foreach (Entity in EntityAndBaseEntities)
{
	foreach (Property where IsUIEditableProperty == true && Tags.Contains("CondensedUI1") == false && Tags.Contains("CondensedUI2") == false && Tags.Contains("CondensedUI3") == false)
	{
		if (BLLPropertyName == "Description")
		{
			with (../../)
			{
				if (PropertyHasTag(tagName = "CondensedUI1") == true)
				{
					rowIndex = rowIndex + 1
			<%%-
			<WrapPanel Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2">
				<StackPanel Orientation="Horizontal">%%>
					foreach (Entity in EntityAndBaseEntities)
					{
						foreach (Property where Tags.Contains("CondensedUI1") == true)
						{
							switch (DataTypeCode)
							{
								case 2: // IntShort
								case 3: // Int
								case 4: // IntLong
								case 6: // UIntShort
								case 7: // UInt
								case 8: // UIntLong
								case 21: // IntTiny
								case 22: // UIntTiny
					<%%-
					<Label Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />
					<TextBox Width="80" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged%%>
				if (IsNullable == true)
				{
					<%%-, TargetNullValue=''%%>
				}
				<%%-}" MaxLength="6" Validation.ErrorTemplate="{x:Null}" PreviewTextInput="TextBox_PreviewNumericInput" DataObject.Pasting="TextBox_NumericPasting"%%>
									if (isFirstTextBox == true)
									{
										isFirstTextBox = false
										<%%- Loaded="TextBox_Loaded"%%>
									}
									<%%-/>%%>
									break
								case 12: // Boolean
					<%%-
					<CheckBox Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" IsChecked="{Binding %%><%%=BLLPropertyName%%><%%-}" />%%>
									break
								default:
					<%%-
					<Label Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
									if (Tags.Contains("Password") == true)
									{
					<%%-
					<PasswordBox Width="80" Height="25" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" lib:PasswordBoxHelper.BindPassword="true" lib:PasswordBoxHelper.BoundPassword="{Binding Path=%%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"/>%%>
									}
									else
									{
					<%%-
					<TextBox Width="80" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"%%>
										if (isFirstTextBox == true)
										{
											isFirstTextBox = false
										<%%- Loaded="TextBox_Loaded"%%>
										}
									<%%-/>%%>
									}
									break
							}
						}
					}
			<%%-
				</StackPanel>
			</WrapPanel>%%>
				}
				if (PropertyHasTag(tagName = "CondensedUI2") == true)
				{
					rowIndex = rowIndex + 1
			<%%-
			<WrapPanel Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2">
				<StackPanel Orientation="Horizontal">%%>
					foreach (Entity in EntityAndBaseEntities)
					{
						foreach (Property where Tags.Contains("CondensedUI2") == true)
						{
							switch (DataTypeCode)
							{
								case 2: // IntShort
								case 3: // Int
								case 4: // IntLong
								case 6: // UIntShort
								case 7: // UInt
								case 8: // UIntLong
								case 21: // IntTiny
								case 22: // UIntTiny
					<%%-
					<Label Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />
					<TextBox Width="80" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged%%>
				if (IsNullable == true)
				{
					<%%-, TargetNullValue=''%%>
				}
				<%%-}" MaxLength="6" Validation.ErrorTemplate="{x:Null}" PreviewTextInput="TextBox_PreviewNumericInput" DataObject.Pasting="TextBox_NumericPasting"%%>
									if (isFirstTextBox == true)
									{
										isFirstTextBox = false
										<%%- Loaded="TextBox_Loaded"%%>
									}
									<%%-/>%%>
									break
								case 12: // Boolean
					<%%-
					<CheckBox Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" IsChecked="{Binding %%><%%=BLLPropertyName%%><%%-}" />%%>
									break
								default:
					<%%-
					<Label Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
									if (Tags.Contains("Password") == true)
									{
					<%%-
					<PasswordBox Width="80" Height="25" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" lib:PasswordBoxHelper.BindPassword="true" lib:PasswordBoxHelper.BoundPassword="{Binding Path=%%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"/>%%>
									}
									else
									{
					<%%-
					<TextBox Width="80" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"%%>
										if (isFirstTextBox == true)
										{
											isFirstTextBox = false
										<%%- Loaded="TextBox_Loaded"%%>
										}
									<%%-/>%%>
									}
									break
							}
						}
					}
			<%%-
				</StackPanel>
			</WrapPanel>%%>
				}
				if (PropertyHasTag(tagName = "CondensedUI3") == true)
				{
					rowIndex = rowIndex + 1
			<%%-
			<WrapPanel Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2">
				<StackPanel Orientation="Horizontal">%%>
					foreach (Entity in EntityAndBaseEntities)
					{
						foreach (Property where Tags.Contains("CondensedUI3") == true)
						{
							switch (DataTypeCode)
							{
								case 2: // IntShort
								case 3: // Int
								case 4: // IntLong
								case 6: // UIntShort
								case 7: // UInt
								case 8: // UIntLong
								case 21: // IntTiny
								case 22: // UIntTiny
					<%%-
					<Label Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />
					<TextBox Width="80" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged%%>
				if (IsNullable == true)
				{
					<%%-, TargetNullValue=''%%>
				}
				<%%-}" MaxLength="6" Validation.ErrorTemplate="{x:Null}" PreviewTextInput="TextBox_PreviewNumericInput" DataObject.Pasting="TextBox_NumericPasting"%%>
									if (isFirstTextBox == true)
									{
										isFirstTextBox = false
										<%%- Loaded="TextBox_Loaded"%%>
									}
									<%%-/>%%>
									break
								case 12: // Boolean
					<%%-
					<CheckBox Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" IsChecked="{Binding %%><%%=BLLPropertyName%%><%%-}" />%%>
									break
								default:
					<%%-
					<Label Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" />%%>
									if (Tags.Contains("Password") == true)
									{
					<%%-
					<PasswordBox Width="80" Height="25" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" lib:PasswordBoxHelper.BindPassword="true" lib:PasswordBoxHelper.BoundPassword="{Binding Path=%%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"/>%%>
									}
									else
									{
					<%%-
					<TextBox Width="80" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"%%>
										if (isFirstTextBox == true)
										{
											isFirstTextBox = false
										<%%- Loaded="TextBox_Loaded"%%>
										}
									<%%-/>%%>
									}
									break
							}
						}
					}
			<%%-
				</StackPanel>
			</WrapPanel>%%>
				}
				if (HasCustomUIProperty == true)
				{
					foreach (Entity in EntityAndBaseEntities)
					{
						foreach (Collection where Tags.Contains("CustomUI") == true)
						{
							rowIndex = rowIndex + 1
			<%%-
			<!-- region protected -->
			<!-- endregion protected -->%%>
						}
					}
				}
			}
		}
		rowIndex = rowIndex + 1
		if (Tags.Contains("CustomUI") == true)
		{
			<%%-
			<!-- region protected -->
			<!-- endregion protected -->%%>
		}
		else if (IsForeignKeyMember == true)
		{
			if (Tags.Contains("SelectParent") == true)
			{
			<%%-
			<ComboBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding Select%%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" ItemsSource="{Binding Select%%><%%=BLLPropertyName%%><%%-Items}" DisplayMemberPath="DisplayName" SelectedValuePath="%%><%%=BLLForeignEntityPrimaryKeyPropertyName%%><%%-" SelectedValue="{Binding Select%%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Validation.ErrorTemplate="{x:Null}" />%%>
			}
			else
			{
			<%%-
			<ComboBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" ItemsSource="{Binding %%><%%=BLLPropertyName%%><%%-Items}" DisplayMemberPath="DisplayName" SelectedValuePath="%%><%%=BLLForeignEntityPrimaryKeyPropertyName%%><%%-" SelectedValue="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Validation.ErrorTemplate="{x:Null}" />%%>
			}
		}
		else
		{
			switch (DataTypeCode)
			{
				case 2: // IntShort
				case 3: // Int
				case 4: // IntLong
				case 6: // UIntShort
				case 7: // UInt
				case 8: // UIntLong
				case 21: // IntTiny
				case 22: // UIntTiny
			<%%-
			<TextBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged%%>
			if (IsNullable == true)
			{
				<%%-, TargetNullValue=''%%>
			}
			<%%-}" MaxLength="6" Validation.ErrorTemplate="{x:Null}" PreviewTextInput="TextBox_PreviewNumericInput" DataObject.Pasting="TextBox_NumericPasting"%%>
			if (isFirstTextBox == true)
			{
				isFirstTextBox = false
				<%%- Loaded="TextBox_Loaded"%%>
			}
			<%%-/>%%>
					break
				case 12: // Boolean
			<%%-
			<CheckBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" Style="{DynamicResource %%><%%=BLLPropertyName%%><%%-Input}" Content="{Binding %%><%%=BLLPropertyName%%><%%-Label, Mode=OneWay}" IsChecked="{Binding %%><%%=BLLPropertyName%%><%%-}" />%%>
					break
				case 13: // Char
				case 14: // CharUnicode
				case 16: // String
				case 17: // StringUnicode
				case 19: // Text
				case 20: // TextUnicode
					if (Tags.Contains("Password") == true)
					{
			<%%-
			<PasswordBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" lib:PasswordBoxHelper.BindPassword="true" lib:PasswordBoxHelper.BoundPassword="{Binding Path=%%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"/>%%>
					}
					else if (BLLPropertyName.Contains("Name") == true || Tags.Contains("Name") == true || BLLPropertyName.EndsWith("Value") == true)
					{
			<%%-
			<TextBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MaxLength="%%><%%=MaxLength%%><%%-" Validation.ErrorTemplate="{x:Null}"%%>
						if (isFirstTextBox == true)
						{
							isFirstTextBox = false
							<%%- Loaded="TextBox_Loaded"%%>
						}
						<%%-/>%%>
					}
					else if (BLLPropertyName.EndsWith("Path") == true)
					{
						if (Tags.Contains("ComboBox") == true)
						{
			<%%-
			<ComboBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" ItemsSource="{Binding %%><%%=BLLPropertyName%%><%%-Items}" DisplayMemberPath="DisplayName" SelectedValuePath="ItemValue" SelectedValue="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" Validation.ErrorTemplate="{x:Null}" />%%>
						}
						else
						{
			<%%-
			<Grid Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" Margin="0">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"></ColumnDefinition>
					<ColumnDefinition Width="Auto"></ColumnDefinition>
					<ColumnDefinition Width="3"></ColumnDefinition>
				</Grid.ColumnDefinitions>
				<TextBox Grid.Column="0" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MaxLength="512" Validation.ErrorTemplate="{x:Null}"%%>
							if (isFirstTextBox == true)
							{
								isFirstTextBox = false
								<%%- Loaded="TextBox_Loaded"%%>
							}
						<%%-/>
				<Button Grid.Column="1" Command="Open" Content="{Binding SelectButtonLabel}"></Button>
			</Grid>%%>
						}
					}
					else
					{
			<%%-
			<Border Name="%%><%%=BLLPropertyName%%><%%-PlaceHolderBorder" Grid.Row="%%><%%=rowIndex%%><%%-" Margin="7"/>
			<TextBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" TextAlignment="Left" TextWrapping="Wrap" Width="{Binding ElementName=PlaceHolderBorder, Path=ActualWidth}" Height="{Binding ElementName=%%><%%=BLLPropertyName%%><%%-PlaceHolderBorder, Path=ActualHeight}" MinHeight="60" MaxLength="2000" Validation.ErrorTemplate="{x:Null}"%%>
						if (isFirstTextBox == true)
						{
							isFirstTextBox = false
							<%%- Loaded="TextBox_Loaded"%%>
						}
						<%%-/>%%>
					}
					break
				default:
			<%%-
			<TextBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding %%><%%=BLLPropertyName%%><%%-ValidationMessage, Mode=OneWay}" Text="{Binding %%><%%=BLLPropertyName%%><%%-, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" TextAlignment="Left" TextWrapping="Wrap" Width="{Binding ElementName=PlaceHolderBorder, Path=ActualWidth}" MinHeight="60" MaxLength="2000" Validation.ErrorTemplate="{x:Null}"%%>
			if (isFirstTextBox == true)
			{
				isFirstTextBox = false
				<%%- Loaded="TextBox_Loaded"%%>
			}
			<%%-/>%%>
					break
			}
		}
	}
}
rowIndex = rowIndex + 1
			<%%-
			<TextBox Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" ToolTip="{Binding TagsValidationMessage, Mode=OneWay}" Text="{Binding Tags, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MaxLength="500" Validation.ErrorTemplate="{x:Null}"/>%%>
rowIndex = rowIndex + 1
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" Style="{StaticResource LabelValue}" Content="{Binding SourceName, Mode=OneWay}" Visibility="{Binding SourceNameVisibility}" />%%>
rowIndex = rowIndex + 1
			<%%-
			<Label Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" Style="{StaticResource LabelValue}" Content="{Binding SpecSourceName, Mode=OneWay}" Visibility="{Binding SpecSourceNameVisibility}" />%%>
rowIndex = rowIndex + 1
			<%%-
			<StackPanel Orientation="Horizontal" Grid.Row="%%><%%=rowIndex%%><%%-" Grid.Column="2" Margin="5">
				<Button Command="{Binding UpdateCommand}" Content="{Binding UpdateButtonLabel}"></Button>
				<Button Command="{Binding ResetCommand}" Content="{Binding ResetButtonLabel}"></Button>
				<Button Command="{Binding DefaultsCommand}" Content="{Binding DefaultsButtonLabel}"></Button>
				<Button Command="{Binding NewCommand}" Content="{Binding NewButtonLabel}"></Button>
				<Button Command="{Binding CloseConfirmCommand}" Content="{Binding CloseButtonLabel}"></Button>
			</StackPanel>
		</Grid>
	</ScrollViewer>
</lib:EditControl>%%>
%%></CONTENT><OUTPUT>
<%%=PROTECTEDAREASTART "<!-- region protected -->"%%>
<%%=PROTECTEDAREAEND "<!-- endregion protected -->"%%>
<%%:
if (File(WPFUIDetailMarkupFilePath) == null || (File(WPFUIDetailMarkupFilePath).Contains("<Status>Generated</Status>") == true && File(WPFUIDetailMarkupFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected()))
{
	update(WPFUIDetailMarkupFilePath)
}
%%>
<%%=PROTECTEDAREASTART "#region protected"%%>
<%%=PROTECTEDAREAEND "#endregion protected"%%></OUTPUT>