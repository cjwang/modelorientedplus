<CONFIG>
	NAME WPFUIPropertiesDiagramClassCode
	CATEGORY WPFUI
	NODE Entity
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using %%><%%=Project.Namespace%%><%%-.Library;
using %%><%%=Project.Namespace%%><%%-.Resources;
using %%><%%=Project.Namespace%%><%%-.UserControls.Diagrams;%%>
with (Project)
{
	foreach (Project)
	{
		if (Tags.Contains("VM") == true)
		{
<%%-
using %%><%%=Namespace%%><%%-;%%>
			foreach (Feature)
			{
				foreach (Entity where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreView") == false && FeatureName != "Specifications" limit 1)
				{
<%%-
using %%><%%=../../Namespace%%><%%-.%%><%%=FeatureName%%><%%-;%%>
				}
			}
		}
		else
		{
			foreach (Feature)
			{
<%%-
using %%><%%=../Namespace%%><%%-.BLL.%%><%%=FeatureName%%><%%-;%%>
			}
		}
	}
}
<%%-
using %%><%%=Project.Namespace%%><%%-.UserControls.%%><%%=FeatureName%%><%%-;

namespace %%><%%=Project.Namespace%%><%%-.UserControls.Diagrams
{
	///--------------------------------------------------------------------------------
	/// <summary>Interaction logic for %%><%%=WPFUIPropertiesDiagramMarkupFileName%%><%%-.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize, change the Status value below to something
	/// other than Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public partial class %%><%%=WPFUIPropertiesDiagramClassName%%><%%- : EditControl
	{
		#region "Properties"

		// the start point of the drag operation
		private Point? dragStartPoint = null;
		bool isDragging = false;
		private Window dialog;

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the parent entity diagram control.</summary>
		///--------------------------------------------------------------------------------
		private EntityDiagramControl ParentEntityDiagramControl
		{
			get
			{
				return VisualItemHelper.VisualUpwardSearch<EntityDiagramControl>(this) as EntityDiagramControl; ;
			}
		}
		#endregion "Properties"

		#region "Methods"
		///--------------------------------------------------------------------------------
		/// <summary>This method handles the preview mouse down event.</summary>
		///
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		protected override void OnPreviewMouseDown(MouseButtonEventArgs e)
		{
			base.OnPreviewMouseDown(e);
			if (e.LeftButton == MouseButtonState.Pressed)
			{
				dragStartPoint = new Point?(e.GetPosition(this));
			}
			else
			{
				dragStartPoint = null;
				isDragging = false;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the drag leave event.</summary>
		///
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		protected override void OnDragLeave(DragEventArgs e)
		{
			base.OnDragLeave(e);
			e.Handled = true;
		}%%>
		if (Tags.Contains("CustomMouseMove") == false)
		{
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the preview mouse move event.</summary>
		///
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		protected override void OnPreviewMouseMove(MouseEventArgs e)
		{
			if (e.LeftButton != MouseButtonState.Pressed)
			{
				dragStartPoint = null;
				isDragging = false;
			}
			else if (dragStartPoint.HasValue && isDragging == false)
			{
				Point? currentPosition = new Point?(e.GetPosition(this));
				if (currentPosition.HasValue && (Math.Abs(currentPosition.Value.X - dragStartPoint.Value.X) > 10 || Math.Abs(currentPosition.Value.Y - dragStartPoint.Value.Y) > 10))
				{
					isDragging = true;
					DragDrop.DoDragDrop(this, DataContext, DragDropEffects.Link);
					e.Handled = true;
				}
			}
		}%%>
		}
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the datagrid mouse down event.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void DataGrid_MouseDown(object sender, MouseButtonEventArgs e)
		{
			if (MainGrid.SelectedItem is IWorkspaceViewModel)
			{
				(MainGrid.SelectedItem as IWorkspaceViewModel).SetSelected();
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the request close event.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		void Item_RequestClose(object sender, EventArgs e)
		{
			dialog.Close();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method determines if the new command can execute.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void NewCanExecute(object sender, CanExecuteRoutedEventArgs e)
		{
			e.CanExecute = true;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the execution of the new command.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void NewExecuted(object sender, ExecutedRoutedEventArgs e)
		{
			Point currentPosition = MouseUtilities.GetMousePosition(this);
			%%><%%=VMBLLViewPluralModelClassName%%><%%- items = DataContext as %%><%%=VMBLLViewPluralModelClassName%%><%%-;
			EntityDiagramControl diagram = VisualItemHelper.VisualUpwardSearch<EntityDiagramControl>(this) as EntityDiagramControl;
			DiagramEntityViewModel diagramEntityView = diagram.DataContext as DiagramEntityViewModel;
			if (items != null && diagramEntityView != null)
			{
				dialog = new Window();
				dialog.Height = 450 * UserSettingsHelper.Instance.ControlSize;
				dialog.Width = 400 * UserSettingsHelper.Instance.ControlSize;
				dialog.Left = Math.Max(currentPosition.X, 20);
				dialog.Top = Math.Max(currentPosition.Y, 20);
				dialog.Content = new %%><%%=BLLClassName%%><%%-DialogControl();
				%%><%%=BLLClassName%%><%%- newItem = new %%><%%=BLLClassName%%><%%-();
				newItem.%%><%%=BLLPrimaryKeyPropertyName%%><%%- = Guid.NewGuid();
				newItem.Solution = items.Solution;
				newItem.%%><%%=BLLParentClassName%%><%%- = items.%%><%%=BLLParentClassName%%><%%-;
				//newItem.ReferenceEntity = diagramEntityView.DiagramEntity.Entity;
				%%><%%=VMBLLViewModelClassName%%><%%- newItemView = new %%><%%=VMBLLViewModelClassName%%><%%-(newItem, items.Solution);
				newItemView.IsFreeDialog = true;
				dialog.DataContext = newItemView;
				dialog.Title = newItemView.Title;
				newItemView.RequestClose += new EventHandler(Item_RequestClose);
				#region protected
				#endregion protected
				dialog.ShowDialog();
				if (newItemView.IsOK == true)
				{
					items.Add%%><%%=BLLClassName%%><%%-(newItemView);
				}
				dialog.Close();
				dialog = null;
				e.Handled = true;
				return;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method determines if the delete command can execute.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void PreviewDeleteCanExecute(object sender, CanExecuteRoutedEventArgs e)
		{
			%%><%%=VMBLLViewPluralModelClassName%%><%%- items = DataContext as %%><%%=VMBLLViewPluralModelClassName%%><%%-;
			if (items != null)
			{
				foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in items.%%><%%=BLLPluralEntityName%%><%%-)
				{
					if (item.IsSelected == true)
					{
						e.CanExecute = true;
						return;
					}
				}
			}
			e.CanExecute = false;
			e.Handled = true;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the execution of the delete command.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void DeleteExecuted(object sender, ExecutedRoutedEventArgs e)
		{
			%%><%%=VMBLLViewPluralModelClassName%%><%%- items = DataContext as %%><%%=VMBLLViewPluralModelClassName%%><%%-;
			if (items != null)
			{
				foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in items.%%><%%=BLLPluralEntityName%%><%%-)
				{
					if (item.IsSelected == true)
					{
						if (MessageBox.Show(DisplayValues.Message_DeleteItemConfirmation, DisplayValues.Message_DeleteItemConfirmationCaption, MessageBoxButton.OKCancel) == MessageBoxResult.OK)
						{
							items.Delete%%><%%=BLLClassName%%><%%-(item);
						}
						return;
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles preview right mouse button down.</summary>
		///
		/// <param name="sender">The event sender.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void Expander_PreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e)
		{
			MainExpander.Focus();
		}
		#endregion "Methods"

		#region "Constructors"
		
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor, calling InitializeComponent().</summary>
		///--------------------------------------------------------------------------------
		public %%><%%=WPFUIPropertiesDiagramClassName%%><%%-()
		{
			InitializeComponent();
		}
		#endregion "Constructors"
	}
}
%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(WPFUIPropertiesDiagramClassFilePath) == null || (File(WPFUIPropertiesDiagramClassFilePath).Contains("<Status>Generated</Status>") == true && File(WPFUIPropertiesDiagramClassFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected()))
{
	update(WPFUIPropertiesDiagramClassFilePath)
}
%%></OUTPUT>