<CONFIG>
	NAME BLLOnlyClassMethodsCode
	CATEGORY BLLOnly
	NODE Entity
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS true%%>
<%%:
var relationshipID
var collectionName
<%%-
#region "Methods"
///--------------------------------------------------------------------------------
/// <summary>This method adds a tag to TagList.</summary>
///--------------------------------------------------------------------------------
public override void AddTag(string tagName)
{%%><%%=TAB 1%%>
	if (HasPropertyNamed("IsAutoUpdated") == true)
	{
	<%%-
	if (ReverseInstance == null && IsAutoUpdated == true)
	{%%><%%=TAB 1%%><%%-
		ReverseInstance = new %%><%%=BLLClassName%%><%%-();
		ReverseInstance.TransformDataFromObject(this, null, false);
		IsAutoUpdated = false;%%><%%=TAB -1%%><%%-
	}%%>
	}
	else
	{
	<%%-
	if (ReverseInstance == null)
	{%%><%%=TAB 1%%><%%-
		ReverseInstance = new %%><%%=BLLClassName%%><%%-();
		ReverseInstance.TransformDataFromObject(this, null, false);%%><%%=TAB -1%%><%%-
	}%%>
	}
	<%%-
	base.AddTag(tagName);
	if (ForwardInstance == null)
	{%%><%%=TAB 1%%><%%-
		ForwardInstance = new %%><%%=BLLClassName%%><%%-();
		ForwardInstance.%%><%%=BLLPrimaryKeyPropertyName%%><%%- = %%><%%=BLLPrimaryKeyPropertyName%%><%%-;%%><%%=TAB -1%%><%%-
	}
	if (ForwardInstance.TagList.Find(t => t.TagName == tagName) == null)
	{%%><%%=TAB 1%%><%%-
		ForwardInstance.TagList.Add(new Tag(Guid.NewGuid(), tagName));%%><%%=TAB -1%%><%%-
	}%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method removes a tag from TagList.</summary>
///--------------------------------------------------------------------------------
public override void RemoveTag(string tagName)
{%%><%%=TAB 1%%><%%-
	base.RemoveTag(tagName);
	if (ForwardInstance != null)
	{%%><%%=TAB 1%%><%%-
		Tag tag = ForwardInstance.TagList.Find(t => t.TagName == tagName);
		if (tag != null)
		{%%><%%=TAB 1%%><%%-
			ForwardInstance.TagList.Remove(tag);%%><%%=TAB -1%%><%%-
		}%%><%%=TAB -1%%><%%-
	}%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method adds this item's tags into a named tag dictionary.</summary>
/// 
/// <param name="usedTags">Input named tag dictionary.</param>
///--------------------------------------------------------------------------------
public %%>
if (BaseEntity == null)
{
	<%%-virtual%%>
}
else
{
	<%%-override%%>
}
<%%- void AddItemToUsedTags(NameObjectCollection usedTags)
{%%><%%=TAB 1%%><%%-
	AddTagsToUsedTags(usedTags);%%>
	foreach (Entity in EntityAndBaseEntities)
	{
		foreach (Collection where (Tags.Contains("Secondary") == false || Tags.Contains("PrimaryModel") == true) && ReferencedEntity.FeatureName != "Interpreter")
		{
	<%%-
	foreach (%%><%%=ReferencedEntity.BLLClassName%%><%%- %%><%%=ReferencedEntity.BLLClassName.CamelCase()%%><%%- in %%><%%=BLLPropertyName%%><%%-)
	{%%><%%=TAB 1%%><%%-
		%%><%%=ReferencedEntity.BLLClassName.CamelCase()%%><%%-.AddItemToUsedTags(usedTags);%%><%%=TAB -1%%><%%-
	}%%>
		}
	}
	<%%-%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method determines whether or not any metadata is
/// different between the input instance and the current instance.</summary>
///
/// <param name="input%%><%%=BLLClassName%%><%%-">The %%><%%=BLLClassName.ToLower()%%><%%- to compare metadata.</param>
///--------------------------------------------------------------------------------
public bool IsIdenticalMetadata(%%><%%=BLLClassName%%><%%- input%%><%%=BLLClassName%%><%%-)
{%%><%%=TAB 1%%>
foreach (Property where IsPrimaryKeyMember == false)
{
<%%-
	if (%%><%%=BLLPropertyName%%><%%=GetDataHelperNonNullableGetMethod%%><%%- != input%%><%%=../BLLClassName%%><%%-.%%><%%=BLLPropertyName%%><%%=GetDataHelperNonNullableGetMethod%%><%%-) return false;%%>
}
		<%%-
		
	#region protected
	#endregion protected
		%%>
<%%-
	return true;%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method determines whether the input instance metadata is
/// effectively empty.</summary>
///
/// <param name="input%%><%%=BLLClassName%%><%%-">The %%><%%=BLLClassName.ToLower()%%><%%- to compare metadata.</param>
///--------------------------------------------------------------------------------
public bool IsEmptyMetadata(%%><%%=BLLClassName%%><%%- input%%><%%=BLLClassName%%><%%-)
{%%><%%=TAB 1%%><%%-
	if (input%%><%%=BLLClassName%%><%%- == null) return true;
	if (input%%><%%=BLLClassName%%><%%-.TagList.Count > 0) return false;%%>
foreach (Property where IsPrimaryKeyMember == false)
{
<%%-
	if (%%>
	switch (DataTypeCode)
	{
		case 1: // SByte
		case 2: // IntShort
		case 3: // Int
		case 4: // IntLong
		case 6: // UIntShort
		case 7: // UInt
		case 8: // UIntLong
		case 21: // IntTiny
		case 22: // UIntTiny
	<%%=BLLPropertyName%%><%%- != DefaultValue.Int%%>
			break
		case 16: // String
		case 17: // StringUnicode
		case 19: // Text
		case 20: // TextUnicode
	<%%-!String.IsNullOrEmpty(input%%><%%=../BLLClassName%%><%%-.%%><%%=BLLPropertyName%%><%%-)%%>
			break
		default:
	<%%=BLLPropertyName%%><%%- != input%%><%%=../BLLClassName%%><%%-.%%><%%=BLLPropertyName%%>
			break
	}
	<%%-) return false;%%>
}
		<%%-
		
	#region protected
	#endregion protected
		%%>
<%%-
	return true;%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method copies changed metadata between the input
/// instance and the current instance.</summary>
///
/// <param name="input%%><%%=BLLClassName%%><%%-">The %%><%%=BLLClassName.ToLower()%%><%%- to get metadata.</param>
///--------------------------------------------------------------------------------
public void CopyChangedMetadata(%%><%%=BLLClassName%%><%%- input%%><%%=BLLClassName%%><%%-)
{%%><%%=TAB 1%%>
foreach (Property where IsPrimaryKeyMember == false)
{
<%%-
	%%><%%=BLLPropertyName%%><%%- = input%%><%%=../BLLClassName%%><%%-.%%><%%=BLLPropertyName%%><%%-;%%>
}
		<%%-
		
	#region protected
	#endregion protected%%>
<%%=TAB -1%%><%%-
}%%>
if (EntityTypeCode == 3 /* Primary */ && BLLClassName != "Solution")
{
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method sets or resets the ID, based on a known source, or a new
/// source.</summary>
///--------------------------------------------------------------------------------
public%%>
if (BaseEntity == null)
{
	<%%- virtual%%>
}
else
{
	<%%- override%%>
}
<%%- void SetID()
{%%><%%=TAB 1%%><%%-
	_defaultSourceName = null;
	if (Solution.UsedModelIDs[DefaultSourceName].GetGuid() != Guid.Empty)
	{%%><%%=TAB 1%%><%%-
		%%><%%=BLLPrimaryKeyPropertyName%%><%%- = Solution.UsedModelIDs[DefaultSourceName].GetGuid();%%><%%=TAB -1%%><%%-
	}
	else
	{%%><%%=TAB 1%%><%%-
		if (%%><%%=BLLPrimaryKeyPropertyName%%><%%- == Guid.Empty)
		{%%><%%=TAB 1%%><%%-
			%%><%%=BLLPrimaryKeyPropertyName%%><%%- = Guid.NewGuid();%%><%%=TAB -1%%><%%-
		}
		Solution.UsedModelIDs[DefaultSourceName] = %%><%%=BLLPrimaryKeyPropertyName%%><%%-;%%><%%=TAB -1%%><%%-
	}%%><%%=TAB -1%%><%%-
}%%>
}
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method disposes of resources in the model.</summary>
///--------------------------------------------------------------------------------
protected override void OnDispose()
{%%><%%=TAB 1%%><%%-
	if (ReverseInstance != null)
	{%%><%%=TAB 1%%><%%-
		ReverseInstance.Dispose();
		ReverseInstance = null;%%><%%=TAB -1%%><%%-
	}
	if (ForwardInstance != null)
	{%%><%%=TAB 1%%><%%-
		ForwardInstance.Dispose();
		ForwardInstance = null;%%><%%=TAB -1%%><%%-
	}%%>
	foreach (EntityReference)
	{
	<%%-
	%%><%%=BLLPropertyName%%><%%- = null;%%>
	}
	if (BLLClassName != "Solution")
	{
	<%%-
	Solution = null;%%>
	}
	foreach (Collection)
	{
	<%%-
	if (%%><%%=BLLFieldName%%><%%- != null)
	{%%><%%=TAB 1%%><%%-
		foreach (%%>
		with (ReferencedEntity)
		{
		<%%-%%><%%=BLLClassName%%><%%-%%>
		}
		<%%- item in %%><%%=BLLPropertyName%%><%%-)
		{%%><%%=TAB 1%%><%%-
			item.Dispose();%%><%%=TAB -1%%><%%-
		}
		%%><%%=BLLPropertyName%%><%%-.Clear();
		%%><%%=BLLPropertyName%%><%%- = null;%%><%%=TAB -1%%><%%-
	}%%>
	}
	<%%-
	
	#region protected
	#endregion protected

	base.OnDispose();%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method assigns a value to a property, and updates corresponding
/// forward and reverse engineering data.</summary>
/// 
/// <param name="propertyName">The property name.</param>
/// <param name="propertyValue">The property value.</param>
///--------------------------------------------------------------------------------
public%%>
if (BaseEntity == null)
{
	<%%- virtual%%>
}
else
{
	<%%- override%%>
}
<%%- bool AssignProperty(string propertyName, object propertyValue)
{%%><%%=TAB 1%%><%%-
	if (this.SetPropertyValue(propertyName, propertyValue) == true)
	{%%><%%=TAB 1%%><%%-
		if (ReverseInstance == null)
		{%%><%%=TAB 1%%><%%-
			ReverseInstance = new %%><%%=BLLClassName%%><%%-();
			ReverseInstance.TransformDataFromObject(this, null, false);%%><%%=TAB -1%%><%%-
		}
		else
		{%%><%%=TAB 1%%><%%-
			ReverseInstance.SetPropertyValue(propertyName, propertyValue);%%><%%=TAB -1%%><%%-
		}
		if (ForwardInstance != null)
		{%%><%%=TAB 1%%><%%-
			this.TransformDataFromObject(ForwardInstance, null, false, true);%%><%%=TAB -1%%><%%-
		}%%><%%=TAB -1%%><%%-
	}
	else
	{%%><%%=TAB 1%%><%%-
		return false;%%><%%=TAB -1%%><%%-
	}
	
	#region protected
	#endregion protected
	
	return true;%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method creates a collection item to be used as an ID reference that
/// will be saved, so the ID of this instance is maintained.</summary>
///--------------------------------------------------------------------------------
public%%>
if (BaseEntity == null)
{
	<%%- virtual%%>
}
else
{
	<%%- override%%>
}
<%%- CollectionItem CreateIDReference()
{%%><%%=TAB 1%%><%%-
	CollectionItem newItem = new CollectionItem();%%>
	foreach (Property where IsPrimaryKeyMember == true limit 1)
	{
		switch (DataTypeCode)
		{
			case 26: // Guid
	<%%-
	newItem.ItemID = %%><%%=BLLPropertyName%%><%%-;%%>
			break
		}
	}
	<%%-
	newItem.ItemName = DefaultSourceName;
	return newItem;%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This property returns a copy of the forward engineering data for the solution.</summary>
///--------------------------------------------------------------------------------
public %%>
if (BaseEntity != null)
{
	<%%-new %%>
}
<%%=BLLClassName%%><%%- GetForwardInstance(Solution forwardSolution)
{%%><%%=TAB 1%%><%%-
	bool isCustomized = false;
	%%><%%=BLLClassName%%><%%- forwardItem = new %%><%%=BLLClassName%%><%%-();
	if (ForwardInstance != null)
	{%%><%%=TAB 1%%><%%-
		forwardItem.TransformDataFromObject(ForwardInstance, null, false);
		isCustomized = true;%%><%%=TAB -1%%><%%-
	}%%>
	foreach (Entity in EntityAndBaseEntities)
	{
		foreach (Property where PropertyName == "IsAutoUpdated")
		{
	<%%-
	else if (IsAutoUpdated == false)
	{%%><%%=TAB 1%%><%%-
		forwardItem.TransformDataFromObject(this, null, false);
		isCustomized = true;%%><%%=TAB -1%%><%%-
	}%%>
		}
	}
	<%%-
	else
	{%%><%%=TAB 1%%>
	foreach (Property where IsPrimaryKeyMember == true limit 1)
	{
		switch (DataTypeCode)
		{
			case 26: // Guid
	<%%-
		forwardItem.%%><%%=BLLPropertyName%%><%%- = %%><%%=BLLPropertyName%%><%%-;%%>
			break
		}
	}
	<%%=TAB -1%%><%%-
	}%%>
	foreach (Entity in EntityAndBaseEntities)
	{
		foreach (Collection where Tags.Contains("Secondary") == false || Tags.Contains("PrimaryModel") == true)
		{
			relationshipID = null
			foreach (PropertyRelationship limit 1)
			{
				relationshipID = RelationshipID
			}
	<%%-
	foreach (%%>
			with (ReferencedEntity)
			{
			<%%=BLLClassName%%>
			}<%%- item in %%><%%=BLLPropertyName%%><%%-)
	{%%><%%=TAB 1%%>
			if (relationshipID != null)
			{
				with (ReferencedEntity)
				{
					foreach (EntityReference)
					{
						foreach (PropertyRelationship)
						{
							if (RelationshipID == relationshipID)
							{
		<%%-
		item.%%><%%=../BLLPropertyName%%><%%- = this;%%>
							}
						}
					}
				}
			}
			with (ReferencedEntity)
			{
		<%%-
		%%><%%=BLLClassName%%><%%- forwardChildItem = item.GetForwardInstance(forwardSolution);%%>
			}
		<%%-
		if (forwardChildItem != null)
		{%%><%%=TAB 1%%><%%-
			forwardItem.%%><%%=BLLPropertyName%%><%%-.Add(forwardChildItem);
			isCustomized = true;%%><%%=TAB -1%%><%%-
		}%%><%%=TAB -1%%><%%-
	}%%>
		}
	}
	<%%-
	if (isCustomized == false)
	{%%><%%=TAB 1%%><%%-
		return null;%%><%%=TAB -1%%><%%-
	}
	forwardItem.SpecSourceName = DefaultSourceName;
	if (forwardSolution.ReferencedModelIDs.Find("ItemName", forwardItem.SpecSourceName) == null)
	{%%><%%=TAB 1%%><%%-
		forwardSolution.ReferencedModelIDs.Add(CreateIDReference());%%><%%=TAB -1%%><%%-
	}
	
	#region protected
	#endregion protected
	
	return forwardItem;%%><%%=TAB -1%%><%%-
}%%>
if (EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false)
{
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method gets the current model context for the item.</summary>
/// 
/// <param name="parentModelContext">The parent model context from which to get current model context.</param>
/// <param name="isValidContext">Output flag, signifying whether context returned is a valid one.</param>
///--------------------------------------------------------------------------------
public static IDomainEnterpriseObject GetModelContext(Solution solutionContext, IDomainEnterpriseObject parentModelContext, out bool isValidContext)
{%%><%%=TAB 1%%>
	<%%-
	isValidContext = true;%%>
	if (BLLClassName == "Solution")
	{
	<%%-
	isValidContext = true;
	return solutionContext;%%><%%=TAB -1%%>
	}
	else
	{
	<%%-
	IDomainEnterpriseObject modelContext = parentModelContext;
	while (modelContext != null)
	{%%><%%=TAB 1%%>
		<%%-
		if (modelContext is %%><%%=BLLClassName%%><%%-)
		{%%><%%=TAB 1%%><%%-
			return modelContext;%%><%%=TAB -1%%><%%-
		}%%>
		if (BLLParentClassName != null)
		{
		<%%-
		else if (solutionContext.IsSampleMode == true && solutionContext.NeedsSample == true && modelContext is %%><%%=BLLParentClassName%%><%%-)
		{%%><%%=TAB 1%%><%%-
			solutionContext.NeedsSample = false;
			%%><%%=BLLParentClassName%%><%%- parent = modelContext as %%><%%=BLLParentClassName%%><%%-;
			if (parent.%%><%%=BLLParentCollectionName%%><%%-.Count > 0)
			{%%><%%=TAB 1%%><%%-
				return parent.%%><%%=BLLParentCollectionName%%><%%-[DataHelper.GetRandomInt(0, parent.%%><%%=BLLParentCollectionName%%><%%-.Count - 1)];%%><%%=TAB -1%%><%%-
			}%%><%%=TAB -1%%><%%-
		}%%>
		}
		<%%-
		#region protected
		#endregion protected
		
		if (modelContext is Solution) break;
		modelContext = modelContext.GetParentItem();%%><%%=TAB -1%%><%%-
	}%%>
		if (FeatureName != "Specifications")
		{
	<%%-
	if (solutionContext.IsSampleMode == true && solutionContext.NeedsSample == true && solutionContext.%%><%%=BLLClassName%%><%%-List.Count > 0)
	{%%><%%=TAB 1%%><%%-
		solutionContext.NeedsSample = false;
		return solutionContext.%%><%%=BLLClassName%%><%%-List[DataHelper.GetRandomInt(0, solutionContext.%%><%%=BLLClassName%%><%%-List.Count - 1)];%%><%%=TAB -1%%><%%-
	}%%>
		}
		else
		{
	<%%-
	
	#region protected
	#endregion protected
	%%>
		}
	<%%-
	isValidContext = false;
	return null;%%><%%=TAB -1%%>
	}
<%%-
}%%>
	if (Tags.Contains("CustomCollectionContext") == false)
	{
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method gets the collection context associated with this item.</summary>
/// 
/// <param name="solutionContext">The associated solution.</param>
/// <param name="modelContext">The associated model context.</param>
///--------------------------------------------------------------------------------
public static IEnterpriseEnumerable GetCollectionContext(Solution solutionContext, IDomainEnterpriseObject modelContext)
{%%><%%=TAB 1%%>
		if (BLLClassName == "Solution")
		{
		<%%-
		EnterpriseDataObjectList<Solution> solutions = new EnterpriseDataObjectList<Solution>();
		solutions.Add(solutionContext);
		return solutions;%%><%%=TAB -1%%>
		}
		else
		{
	<%%-
	IDomainEnterpriseObject nodeContext = modelContext;
	while (nodeContext != null)
	{%%><%%=TAB 1%%>
		<%%-
		%%>
			if (BLLParentClassName != null && BLLParentClassName != "Solution")
			{
		<%%-if (nodeContext is %%><%%=BLLParentClassName%%><%%-)
		{%%><%%=TAB 1%%><%%-
			return (nodeContext as %%><%%=BLLParentClassName%%><%%-).%%><%%=BLLParentCollectionName%%><%%-;%%><%%=TAB -1%%><%%-
		}%%>
				if (FeatureName != "Specifications")
				{
		<%%-
		else %%>
				}
			}
			if (FeatureName != "Specifications")
			{
		<%%-if (nodeContext is Solution)
		{%%><%%=TAB 1%%><%%-
			return (nodeContext as Solution).%%><%%=BLLClassName%%><%%-List;%%><%%=TAB -1%%><%%-
		}%%>
			}
		<%%-

		#region protected
		#endregion protected
		
		nodeContext = nodeContext.GetParentItem();%%><%%=TAB -1%%><%%-
	}
	return null;%%><%%=TAB -1%%>
		}
<%%-
}%%>
	}
	if (BLLParentReferencePropertyName != null)
	{
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method gets the parent item of this item.</summary>
///--------------------------------------------------------------------------------
public override IDomainEnterpriseObject GetParentItem()
{%%><%%=TAB 1%%>
<%%-
	return %%><%%=BLLParentReferencePropertyName%%><%%-;%%>
<%%=TAB -1%%><%%-
}%%>
		if (FeatureName != "Specifications" && Tags.Contains("Template") == false)
		{
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method adds this item to the parent, if not found.</summary>
///--------------------------------------------------------------------------------
public void AddToParent()
{%%>
if (BLLParentClassName != "Solution")
{
	<%%=TAB 1%%><%%-
	%%><%%=BLLParentClassName%%><%%- %%><%%=BLLParentClassName.CamelCase()%%><%%- = Solution.%%><%%=BLLParentClassName%%><%%-List.Find(i => i.%%><%%=BLLParentPrimaryKeyPropertyName%%><%%- == %%><%%=BLLParentForeignKeyPropertyName%%><%%-);
	if (%%><%%=BLLParentClassName.CamelCase()%%><%%- != null)
	{%%><%%=TAB 1%%><%%-
		%%><%%=BLLParentReferencePropertyName%%><%%- = %%><%%=BLLParentClassName.CamelCase()%%><%%-;
		SetID();  // id (from saved ids) may change based on parent info
		%%><%%=BLLClassName%%><%%- %%><%%=BLLClassName.CamelCase()%%><%%- = %%><%%=BLLParentClassName.CamelCase()%%><%%-.%%><%%=BLLParentCollectionName%%><%%-.Find(i => i.%%><%%=BLLPrimaryKeyPropertyName%%><%%- == %%><%%=BLLPrimaryKeyPropertyName%%><%%-);
		if (%%><%%=BLLClassName.CamelCase()%%><%%- != null)
		{%%><%%=TAB 1%%><%%-
			if (%%><%%=BLLClassName.CamelCase()%%><%%- != this)
			{%%><%%=TAB 1%%><%%-
				%%><%%=BLLParentClassName.CamelCase()%%><%%-.%%><%%=BLLParentCollectionName%%><%%-.Remove(%%><%%=BLLClassName.CamelCase()%%><%%-);
				%%><%%=BLLParentClassName.CamelCase()%%><%%-.%%><%%=BLLParentCollectionName%%><%%-.Add(this);%%><%%=TAB -1%%><%%-
			}%%><%%=TAB -1%%><%%-
		}
		else
		{%%><%%=TAB 1%%><%%-
			%%><%%=BLLParentClassName.CamelCase()%%><%%-.%%><%%=BLLParentCollectionName%%><%%-.Add(this);%%><%%=TAB -1%%><%%-
		}%%><%%=TAB -1%%><%%-
	}%%><%%=TAB -1%%>
}
else
{
<%%=TAB 1%%><%%-
	SetID();%%><%%=TAB -1%%>
}
<%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method adds the current item to the solution, if it is valid
/// and not already present in the solution.</summary>
/// 
/// <param name="solutionContext">The associated solution.</param>
/// <param name="templateContext">The associated template.</param>
/// <param name="lineNumber">The line number of the associated statement.</param>
///--------------------------------------------------------------------------------
public static void AddCurrentItemToSolution(Solution solutionContext, ITemplate templateContext, int lineNumber)
{%%><%%=TAB 1%%><%%-
	if (solutionContext.Current%%><%%=BLLClassName%%><%%- != null)
	{%%><%%=TAB 1%%><%%-
		string validationErrors = solutionContext.Current%%><%%=BLLClassName%%><%%-.GetValidationErrors();
		if (!String.IsNullOrEmpty(validationErrors))
		{%%><%%=TAB 1%%><%%-
			templateContext.LogException(solutionContext, solutionContext.Current%%><%%=BLLClassName%%><%%-, validationErrors, lineNumber, InterpreterTypeCode.Output);%%><%%=TAB -1%%><%%-
		}%%>
			foreach (Property where Tags.Contains("SelectParent") limit 1)
			{
		<%%-
		#region protected
		#endregion protected
		%%>
			}
		<%%-
		// link item to known id, solution, and parent
		solutionContext.Current%%><%%=BLLClassName%%><%%-.Solution = solutionContext;
		solutionContext.Current%%><%%=BLLClassName%%><%%-.AddToParent();
		%%><%%=BLLClassName%%><%%- existingItem = solutionContext.%%><%%=BLLClassName%%><%%-List.Find(i => i.%%><%%=BLLPrimaryKeyPropertyName%%><%%- == solutionContext.Current%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%-);
		if (existingItem == null)
		{%%><%%=TAB 1%%><%%-
			// add new item to solution
			solutionContext.Current%%><%%=BLLClassName%%><%%-.AssignProperty("%%><%%=BLLPrimaryKeyPropertyName%%><%%-", solutionContext.Current%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%-);
			solutionContext.Current%%><%%=BLLClassName%%><%%-.ReverseInstance.ResetModified(false);
			solutionContext.%%><%%=BLLClassName%%><%%-List.Add(solutionContext.Current%%><%%=BLLClassName%%><%%-);%%><%%=TAB -1%%><%%-
		}
		else
		{%%><%%=TAB 1%%><%%-
			// update existing item in solution
			if (existingItem.Solution == null) existingItem.Solution = solutionContext;
			if (existingItem.ForwardInstance == null && existingItem.IsAutoUpdated == false)
			{%%><%%=TAB 1%%><%%-
				existingItem.ForwardInstance = new %%><%%=BLLClassName%%><%%-();
				existingItem.ForwardInstance.TransformDataFromObject(existingItem, null, false);%%><%%=TAB -1%%><%%-
			}
			existingItem.TransformDataFromObject(solutionContext.Current%%><%%=BLLClassName%%><%%-, null, false);
			existingItem.AddToParent();
			existingItem.AssignProperty("%%><%%=BLLPrimaryKeyPropertyName%%><%%-", existingItem.%%><%%=BLLPrimaryKeyPropertyName%%><%%-);
			existingItem.ReverseInstance.ResetModified(false);
			solutionContext.Current%%><%%=BLLClassName%%><%%- = existingItem;%%><%%=TAB -1%%><%%-
		}
		#region protected
		#endregion protected%%><%%=TAB -1%%><%%-
	}%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method deletes the current %%><%%=BLLClassName%%><%%- item from the solution.</summary>
/// 
/// <param name="solutionContext">The associated solution.</param>
///--------------------------------------------------------------------------------
public static void DeleteCurrentItemFromSolution(Solution solutionContext)
{%%><%%=TAB 1%%><%%-
	if (solutionContext.Current%%><%%=BLLClassName%%><%%- != null)
	{%%><%%=TAB 1%%><%%-
		%%><%%=BLLClassName%%><%%- existingItem = solutionContext.%%><%%=BLLClassName%%><%%-List.Find(i => i.%%><%%=BLLPrimaryKeyPropertyName%%><%%- == solutionContext.Current%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%-);
		if (existingItem != null)
		{%%><%%=TAB 1%%><%%-
			solutionContext.%%><%%=BLLClassName%%><%%-List.Remove(solutionContext.Current%%><%%=BLLClassName%%><%%-);%%><%%=TAB -1%%><%%-
		}%%><%%=TAB -1%%><%%-
	}%%><%%=TAB -1%%><%%-
}%%>
		}
	}
}
<%%-

///--------------------------------------------------------------------------------
/// <summary>This method gets the %%><%%=BLLClassName%%><%%- instance from an xml file.</summary>
///
/// <param name="inputFilePath">The path of the file to load from.</param>
///--------------------------------------------------------------------------------
public override void Load(string inputFilePath)
{%%><%%=TAB 1%%><%%-
	base.Load(inputFilePath);%%>
	if (BLLClassName == "Solution")
	{
	<%%-
	SolutionDirectory = System.IO.Directory.GetParent(inputFilePath).FullName;%%>
	}<%%-
	ResetLoaded(true);
	ResetModified(false);%%><%%=TAB -1%%><%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method saves the %%><%%=BLLClassName%%><%%- instance to an xml file.</summary>
///
/// <param name="inputFilePath">The path of the file to save to.</param>
///--------------------------------------------------------------------------------
public override void Save(string inputFilePath)
{%%>
<%%=TAB 1%%>
<%%-
	base.Save(inputFilePath);%%>
	if (BLLClassName == "Solution")
	{
	<%%-
	SolutionDirectory = System.IO.Directory.GetParent(inputFilePath).FullName;%%>
	}<%%-
	ResetLoaded(true);
	ResetModified(false);%%>
<%%=TAB -1%%>
<%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method resets the IsLoaded state for the instance.</summary>
///
/// <param name="isLoaded">The reset value for the IsLoaded property.</param>
///--------------------------------------------------------------------------------
public override void ResetLoaded(bool isLoaded)
{%%>
<%%=TAB 1%%>
	if (BaseEntity != null)
	{
		<%%-
		base.ResetLoaded(isLoaded);%%>
	}
	else
	{
		<%%-
		_isLoaded = isLoaded;%%>
	}
	foreach (Collection)
	{
		<%%-
		if (%%>
		<%%=BLLFieldName%%>
		<%%- != null) %%>
		<%%=BLLFieldName%%>
		<%%-.ResetLoaded(isLoaded);%%>
	}
%%>
<%%=TAB -1%%>
<%%-
}

///--------------------------------------------------------------------------------
/// <summary>This method resets the IsModified state for the instance.</summary>
///
/// <param name="isLoaded">The reset value for the IsModified property.</param>
///--------------------------------------------------------------------------------
public override void ResetModified(bool isModified)
{%%>
<%%=TAB 1%%><%%-
		base.ResetModified(isModified);
		_isModified = isModified;%%>
<%%:
	foreach (Collection)
	{
		<%%-
		if (%%>
		<%%=BLLFieldName%%>
		<%%- != null) %%>
		<%%=BLLFieldName%%>
		<%%-.ResetModified(isModified);%%>
	}
%%>
<%%=TAB -1%%>
<%%-
}

#region protected
#endregion protected

#endregion "Methods"%%></CONTENT>