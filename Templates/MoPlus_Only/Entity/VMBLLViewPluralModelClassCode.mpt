<CONFIG>
	NAME VMBLLViewPluralModelClassCode
	CATEGORY VMBLL
	NODE Entity
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
// setup variables
var parentClassName
var parentPrimaryKeyPropertyName
var parentCollectionOfThis
if (LIBParentEntityID != null)
{
	with (Entity from Solution.Find(LIBParentEntityID))
	{
		parentClassName = BLLClassName
		foreach (Property where IsPrimaryKeyMember == true limit 1)
		{
			switch (DataTypeCode)
			{
				case 26: // Guid
					parentPrimaryKeyPropertyName = BLLPropertyName
					break
			}
		}
	}
}
if (LIBParentCollectionOfThisPropertyID != null)
{
	with (Collection from Solution.Find(LIBParentCollectionOfThisPropertyID))
	{
		parentCollectionOfThis = BLLPropertyName
	}
}
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Input;
using System.ComponentModel;
using MoPlus.Data;%%>
with (Project)
{
	if (ProjectReferenceCount > 1)
	{
		// get a project tagged as BLL
		foreach (Project where Tags.Contains("BLL") == true)
		{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
			foreach (Feature in Solution)
			{
<%%-
using %%><%%=../Namespace%%><%%-.BLL.%%><%%=FeatureName%%><%%-;%%>
			}
		}
	}
	else
	{
		foreach (Project)
		{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
			foreach (Feature in Solution)
			{
				<%%-
using %%><%%=../Namespace%%><%%-.BLL.%%><%%=FeatureName%%><%%-;%%>
			}
		}
	}
}

// find best GetMany method to use for search, etc.
CurrentMethod = null
foreach (Method where MethodName.EndsWith("Criteria") == true && MethodTypeCode == 7 /* GetManyByCriteria */)
{
	CurrentMethod = Method
}
if (CurrentMethod == null)
{
	foreach (Method where ParameterCount == 0 && MethodTypeCode == 3 /* GetMany */)
	{
		CurrentMethod = Method
	}
}
if (CurrentMethod == null)
{
	trace ("Couldn't find good search method for: " + VMBLLViewPluralModelClassName)
}
<%%-
using %%><%%=Project.Namespace%%><%%-.Messaging;
using %%><%%=Project.Namespace%%><%%-.Resources;
using %%><%%=Project.Namespace%%><%%-.Events;%%>
foreach (Feature in Solution)
{
	foreach (Entity where EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && FeatureName != "Specifications" limit 1)
	{
<%%-
using %%><%%=../../Project.Namespace%%><%%-.Events.%%><%%=FeatureName%%><%%-;
using %%><%%=../../Project.Namespace%%><%%-.%%><%%=FeatureName%%><%%-;%%>
	}
}
<%%-

namespace %%><%%=Project.Namespace%%><%%-.%%><%%=FeatureName%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class provides views for collections of
	/// %%><%%=BLLClassName%%><%%- instances.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize this file outside of protected areas,
	/// change the Status value below to something other than
	/// Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public partial class %%><%%=VMBLLViewPluralModelClassName%%><%%- : EditWorkspaceViewModel
	{
		#region "Menus"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets MenuLabelNew%%><%%=BLLClassName%%><%%-.</summary>
		///--------------------------------------------------------------------------------
		public string MenuLabelNew%%><%%=BLLClassName%%><%%-
		{
			get
			{
				return DisplayValues.ContextMenu_New%%><%%=BLLClassName%%><%%-;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets MenuLabelNew%%><%%=BLLClassName%%><%%-ToolTip.</summary>
		///--------------------------------------------------------------------------------
		public string MenuLabelNew%%><%%=BLLClassName%%><%%-ToolTip
		{
			get
			{
				return DisplayValues.ContextMenu_New%%><%%=BLLClassName%%><%%-ToolTip;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets MenuLabelDelete.</summary>
		///--------------------------------------------------------------------------------
		public string MenuLabelDelete
		{
			get
			{
				return DisplayValues.ContextMenu_Delete;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets MenuLabelDeleteToolTip.</summary>
		///--------------------------------------------------------------------------------
		public string MenuLabelDeleteToolTip
		{
			get
			{
				return DisplayValues.ContextMenu_DeleteToolTip;
			}
		}

		#endregion "Menus"

		#region "Editing Support"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets IsEdited.</summary>
		///--------------------------------------------------------------------------------
		public override bool IsEdited
		{
			get
			{
				if (ItemsToAdd.Count > 0)
				{
					return true;
				}
				if (ItemsToDelete.Count > 0)
				{
					return true;
				}
				foreach (IEditWorkspaceViewModel item in Items)
				{
					if (item.IsEdited == true)
					{
						return true;
					}
				}
				return false;
			}
		}

		#endregion "Editing Support"

		#region "Command Processing"
		///--------------------------------------------------------------------------------
		/// <summary>This method resets the data.</summary>
		///--------------------------------------------------------------------------------
		protected override void OnReset()
		{
			ResetItems();%%>/*
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in Items.OfType<%%><%%=VMBLLViewModelClassName%%><%%->())
			{
				item.Reset();
			}
			if (ItemsToDelete.Count > 0)
			{
				foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in ItemsToDelete.OfType<%%><%%=VMBLLViewModelClassName%%><%%->())
				{
					item.Reset();
					Items.Add(item);
				}
				ItemsToDelete.Clear();
			}
			if (ItemsToAdd.Count > 0)
			{
				foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in ItemsToAdd.OfType<%%><%%=VMBLLViewModelClassName%%><%%->())
				{
					Items.Remove(item);
				}
				ItemsToAdd.Clear();
			}*/<%%-
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method resets the data.</summary>
		///--------------------------------------------------------------------------------
		public override void Reset()
		{
			OnReset();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method sets the default values.</summary>
		///--------------------------------------------------------------------------------
		protected override void OnSetDefaults()
		{
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in Items.OfType<%%><%%=VMBLLViewModelClassName%%><%%->())
			{
				item.Defaults();
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method sets the default values.</summary>
		///--------------------------------------------------------------------------------
		public void Defaults()
		{
			OnSetDefaults();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method updates the view model data and sends update command back
		/// to the solution builder.</summary>
		///--------------------------------------------------------------------------------
		protected override void OnUpdate()
		{
			// send update for any updated children
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in %%><%%=BLLPluralEntityName%%><%%-)
			{
				if (item.IsEdited == true)
				{
					item.Update();
				}
			}
			// send update for any new children
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in ItemsToAdd.OfType<%%><%%=VMBLLViewModelClassName%%><%%->())
			{
				item.Update();
				%%><%%=BLLPluralEntityName%%><%%-.Add(item);
			}
			ItemsToAdd.Clear();

			// send delete for any deleted children
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in ItemsToDelete.OfType<%%><%%=VMBLLViewModelClassName%%><%%->())
			{
				item.Delete();
				%%><%%=BLLPluralEntityName%%><%%-.Remove(item);
			}
			ItemsToDelete.Clear();

			// reset modified for children
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in %%><%%=BLLPluralEntityName%%><%%-)
			{
				item.ResetModified(false);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method updates the view model data and sends update command back
		/// to the solution builder.</summary>
		///--------------------------------------------------------------------------------
		public void Update()
		{
			OnUpdate();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes the new %%><%%=BLLClassName.ToLower()%%><%%- command.</summary>
		///--------------------------------------------------------------------------------
		public void ProcessNew%%><%%=BLLClassName%%><%%-Command()
		{
			%%><%%=BLLClassName%%><%%-EventArgs message = new %%><%%=BLLClassName%%><%%-EventArgs();
			message.%%><%%=BLLClassName%%><%%- = new %%><%%=BLLClassName%%><%%-();
			message.%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%- = Guid.NewGuid();%%>
			if (parentClassName != null)
			{
			<%%-
			message.%%><%%=BLLClassName%%><%%-.%%><%%=BLLParentForeignKeyPropertyName%%><%%- = %%><%%=parentClassName%%><%%-.%%><%%=parentPrimaryKeyPropertyName%%><%%-;
			message.%%><%%=BLLClassName%%><%%-.%%><%%=BLLParentReferencePropertyName%%><%%- = %%><%%=parentClassName%%><%%-;
			message.%%><%%=BLLParentForeignKeyPropertyName%%><%%- = %%><%%=parentClassName%%><%%-.%%><%%=parentPrimaryKeyPropertyName%%><%%-;%%>
			}
			if (BLLClassName != "Solution")
			{
			<%%-
			message.%%><%%=BLLClassName%%><%%-.Solution = Solution;
			message.Solution = Solution;%%>
				if (HasOrderProperty == true)
				{
			<%%-
			if (message.%%><%%=BLLClassName%%><%%-.%%><%%=BLLParentReferencePropertyName%%><%%- != null)
			{
				message.%%><%%=BLLClassName%%><%%-.Order = message.%%><%%=BLLClassName%%><%%-.%%><%%=BLLParentReferencePropertyName%%><%%-.%%><%%=BLLClassName%%><%%-List.Count + 1;
			}%%>
				}
			}
			<%%-
			message.WorkspaceID = WorkspaceID;%%>
			if (Tags.Contains("CustomDesigner") == true || Tags.Contains("Template") == true)
			{
			<%%-
			
			#region protected
			#endregion protected
			%%>
			}
			<%%-
			Mediator.NotifyColleagues<%%><%%=BLLClassName%%><%%-EventArgs>(MediatorMessages.Command_Edit%%><%%=BLLClassName%%><%%-Requested, message);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method applies %%><%%=BLLClassName.ToLower()%%><%%- updates.</summary>
		///--------------------------------------------------------------------------------
		public void ProcessEdit%%><%%=BLLClassName%%><%%-Performed(%%><%%=BLLClassName%%><%%-EventArgs data)
		{
			try
			{%%>
			if (Tags.Contains("Template") == true)
			{
				<%%-						
				#region protected
				#endregion protected%%>
			}
			else
			{
				<%%-
				bool isItemMatch = false;
				if (data != null && data.%%><%%=BLLClassName%%><%%- != null)
				{
					foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in %%><%%=BLLPluralEntityName%%><%%-)
					{
						if (item.%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%- == data.%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%-)
						{
							isItemMatch = true;
							item.%%><%%=BLLClassName%%><%%-.TransformDataFromObject(data.%%><%%=BLLClassName%%><%%-, null, false);%%>
						if (BLLClassName == "Solution")
						{
							<%%-
								
							#region protected
							#endregion protected
							%%>
						}
							<%%-
							item.OnUpdated(item, null);
							item.ShowInTreeView();
							break;
						}
					}
					if (isItemMatch == false)
					{
						// add new %%><%%=BLLClassName%%>
					if (parentClassName != null)
					{
						<%%-
						data.%%><%%=BLLClassName%%><%%-.%%><%%=BLLParentReferencePropertyName%%><%%- = %%><%%=parentClassName%%><%%-;%%>
					}
					if (Tags.Contains("CustomUpdate") == true)
					{
						<%%-
		
						#region protected
						#endregion protected
						%%>
					}
					else
					{
						<%%-
						%%><%%=VMBLLViewModelClassName%%><%%- newItem = new %%><%%=VMBLLViewModelClassName%%><%%-(data.%%><%%=BLLClassName%%>
							if (BLLClassName != "Solution")
							{
						<%%-, Solution%%>
						}
						<%%-);%%>
					}
						<%%-
						newItem.Updated += new EventHandler(Children_Updated);
						%%><%%=BLLPluralEntityName%%><%%-.Add(newItem);%%>
					if (parentClassName != null && parentClassName != "Solution")
					{
						<%%-
						%%>	<%%=parentClassName%%><%%-.%%><%%=parentCollectionOfThis%%><%%-.Add(newItem.%%><%%=BLLClassName%%><%%-);%%>
					}
					if (BLLClassName != "Solution")
					{
						<%%-
						Solution.%%><%%=BLLClassName%%><%%-List.Add(newItem.%%><%%=BLLClassName%%><%%-);%%>
					}
					else
					{
						<%%-
							
						#region protected
						#endregion protected
						%%>
					}
						<%%-
						Items.Add(newItem);
						OnUpdated(this, null);
						newItem.ShowInTreeView();
					}
				}%%>
			}
		<%%-
			}
			catch (Exception ex)
			{
				ShowIssue(ex.Message + ex.StackTrace);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method applies %%><%%=BLLClassName.ToLower()%%><%%- deletes.</summary>
		///--------------------------------------------------------------------------------
		public void ProcessDelete%%><%%=BLLClassName%%><%%-Performed(%%><%%=BLLClassName%%><%%-EventArgs data)
		{
			try
			{%%>
			if (Tags.Contains("Template") == true)
			{
				<%%-						
				#region protected
				#endregion protected%%>
			}
			else
			{
				<%%-
				bool isItemMatch = false;
				if (data != null && data.%%><%%=BLLClassName%%><%%- != null)
				{
					foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in %%><%%=BLLPluralEntityName%%><%%-.ToList<%%><%%=VMBLLViewModelClassName%%><%%->())
					{
						if (item.%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%- == data.%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%-)
						{
							// remove item from tabs, if present
							WorkspaceEventArgs message = new WorkspaceEventArgs();
							message.ItemID = item.%%><%%=BLLClassName%%><%%-.%%><%%=BLLPrimaryKeyPropertyName%%><%%-;
							Mediator.NotifyColleagues<WorkspaceEventArgs>(MediatorMessages.Command_CloseItemRequested, message);
	
							// delete children
							for (int i = item.Items.Count - 1; i >= 0; i--)
							{%%>
						foreach (Entity in EntityAndBaseEntities)
						{
							foreach (Collection where ReferencedEntity.EntityTypeCode == 3 /* Primary */ && Tags.Contains("Secondary") == false && ReferencedEntity.Tags.Contains("IgnoreView") == false)
							{
								if (ReferencedEntity.BLLParentClassName == ../BLLClassName)
								{
									with (ReferencedEntity)
									{
							<%%-
								if (item.Items[i] is %%><%%=VMBLLViewModelClassName%%><%%-)
								{
									%%><%%=VMBLLViewModelClassName%%><%%- child = item.Items[i] as %%><%%=VMBLLViewModelClassName%%><%%-;
									%%><%%=BLLClassName%%><%%-EventArgs childMessage = new %%><%%=BLLClassName%%><%%-EventArgs();
									childMessage.%%><%%=BLLClassName%%><%%- = child.%%><%%=BLLClassName%%><%%-;
									childMessage.%%><%%=BLLParentForeignKeyPropertyName%%><%%- = item.%%><%%=../../../BLLClassName%%><%%-.%%><%%=../../../BLLPrimaryKeyPropertyName%%><%%-;
									childMessage.Solution = Solution;
									childMessage.WorkspaceID = child.WorkspaceID;
									item.%%>
										if (../../../BLLSingleCollectionClassName == null)
										{
											with (../)
											{
												if (../Tags.Contains("Source") == true)
												{
														<%%-SpecificationSourcesFolder.%%>
												}
												else
												{
														<%%=../BLLPluralEntityName%%><%%-Folder.%%>
												}
											}
										}
									<%%-ProcessDelete%%><%%=BLLClassName%%><%%-Performed(childMessage);
								}%%>
									}
								}
							}
						}
							<%%-
							}
	
							// delete item
							isItemMatch = true;
							%%><%%=BLLPluralEntityName%%><%%-.Remove(item);%%>
						if (parentClassName != null)
						{
							<%%-
							%%><%%=parentClassName%%><%%-.%%><%%=parentCollectionOfThis%%><%%-.Remove(item.%%><%%=BLLClassName%%><%%-);%%>
						}
							<%%-
							Items.Remove(item);%%>
						if (parentClassName != null)
						{
							<%%-
							%%><%%=parentClassName%%><%%-.ResetModified(true);%%>
						}
							<%%-
							OnUpdated(this, null);
							break;
						}
					}
					if (isItemMatch == false)
					{
						ShowIssue(DisplayValues.Issue_DeleteItemNotFound);
					}
				}%%>
			}
		<%%-
			}
			catch (Exception ex)
			{
				ShowIssue(ex.Message + ex.StackTrace);
			}
		}

		#endregion "Command Processing"

		#region "Properties"

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets %%><%%=BLLClassName%%><%%- lists.</summary>
		///--------------------------------------------------------------------------------
		public EnterpriseDataObjectList<%%><%%=VMBLLViewModelClassName%%><%%-> %%><%%=BLLPluralEntityName%%><%%- { get; set; }%%>
		if (parentClassName != null && parentClassName != "Solution")
		{<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets %%><%%=parentClassName%%><%%-.</summary>
		///--------------------------------------------------------------------------------
		public %%><%%=parentClassName%%><%%- %%><%%=parentClassName%%><%%- { get; set; }%%>
		}
		<%%-

		#endregion "Properties"

		#region "Methods"
		///--------------------------------------------------------------------------------
		/// <summary>This method loads %%><%%=BLLPluralEntityName%%><%%- into the view model.</summary>
		///%%>
		if (parentClassName != null && parentClassName != "Solution")
		{
			<%%-
		/// <param name="%%><%%=parentClassName.CamelCase()%%><%%-">The %%><%%=parentClassName.CamelCase()%%><%%- to load.</param>%%>
		}
		if (BLLClassName != "Solution")
		{
		<%%-
		/// <param name="solution">The associated solution.</param>
		/// <param name="loadChildren">Flag indicating whether to perform a deeper load.</param>%%>
		}
		<%%-
		///--------------------------------------------------------------------------------
		public void Load%%><%%=BLLPluralEntityName%%><%%-(%%>
		if (parentClassName != null && parentClassName != "Solution")
		{
		<%%=parentClassName%%><%%- %%><%%=parentClassName.CamelCase()%%><%%-, %%>
		}
		if (BLLClassName != "Solution")
		{
		<%%-Solution solution, bool loadChildren = true%%>
		}
		<%%-)
		{
			// attach the items
			Items.Clear();
			if (%%><%%=BLLPluralEntityName%%><%%- == null)
			{
				%%><%%=BLLPluralEntityName%%><%%- = new EnterpriseDataObjectList<%%><%%=VMBLLViewModelClassName%%><%%->();
			}%%>
			if (parentClassName != null)
			{
			<%%-
			if (loadChildren == true)
			{
				foreach (%%><%%=BLLClassName%%><%%- item in %%><%%=parentClassName.CamelCase()%%><%%-.%%><%%=parentCollectionOfThis%%><%%-)
				{
					%%><%%=VMBLLViewModelClassName%%><%%- itemView = new %%><%%=VMBLLViewModelClassName%%><%%-(item, solution);
					itemView.Updated += new EventHandler(Children_Updated);
					%%><%%=BLLPluralEntityName%%><%%-.Add(itemView);
					Items.Add(itemView);
				}
			}%%>
			}
			<%%-
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method refreshes the view model.</summary>
		/// 
		/// <param name="refreshChildren">Flag indicating whether children should be refreshed.</param>
		///--------------------------------------------------------------------------------
		public void Refresh(bool refreshChildren, int refreshLevel = 0)
		{%%>
		if (Tags.Contains("Template") == true)
		{
			<%%-
			#region protected
			#endregion protected%%>
		}
		else
		{
		<%%-
			HasErrors = !IsValid;
			HasCustomizations = false;
			if (refreshChildren == true || refreshLevel > 0)
			{
				foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in %%><%%=BLLPluralEntityName%%><%%-)
				{
					item.Refresh(refreshChildren, refreshLevel-1);
				}
			}
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- item in %%><%%=BLLPluralEntityName%%><%%-)
			{
				if (item.HasCustomizations == true)
				{
					HasCustomizations = true;
				}
				if (item.HasErrors == true)
				{
					HasErrors = true;
				}
			}%%>
			if (BLLHasOrderProperty == true)
			{
			<%%-
			Items.Sort("ItemOrder", SortDirection.Ascending);%%>
			}
			else
			{
			<%%-
			Items.Sort("Name", SortDirection.Ascending);%%>
			}
			<%%-
			OnPropertyChanged("Items");
			OnPropertyChanged("HasCustomizations");
			OnPropertyChanged("HasErrors");%%>
		}
		<%%-
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method disposes of resources in the view model.</summary>
		///--------------------------------------------------------------------------------
		protected override void OnDispose()
		{
			if (%%><%%=BLLPluralEntityName%%><%%- != null)
			{
				foreach (%%><%%=VMBLLViewModelClassName%%><%%- itemView in %%><%%=BLLPluralEntityName%%><%%-)
				{
					itemView.Updated -= Children_Updated;
					itemView.Dispose();
				}
				%%><%%=BLLPluralEntityName%%><%%-.Clear();
				%%><%%=BLLPluralEntityName%%><%%- = null;
			}%%>
			if (parentClassName != null)
			{
			<%%-
			%%><%%=parentClassName%%><%%- = null;%%>
			}
			<%%-
			base.OnDispose();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method manages the update of this view when children are updated.</summary>
		/// 
		/// <param name="sender">The sender of the updated event.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void Children_Updated(object sender, EventArgs e)
		{
			Refresh(false, 1);
			OnUpdated(this, e);
		}
		
		///--------------------------------------------------------------------------------
		/// <summary>This method returns the parent view model corresponding to
		/// the input message.</summary>
		///
		/// <param name="data">The message data to find parent for.</param>
		///--------------------------------------------------------------------------------
		public EditWorkspaceViewModel FindParentViewModel(SolutionModelEventArgs data)
		{%%>
		if (BLLParentClassName != null)
		{
			<%%-
			if (data is %%><%%=BLLClassName%%><%%-EventArgs && (data as %%><%%=BLLClassName%%><%%-EventArgs).%%><%%=BLLParentForeignKeyPropertyName%%><%%- == %%><%%=BLLParentClassName%%><%%-.%%><%%=BLLParentPrimaryKeyPropertyName%%><%%-)
			{
				return this;
			}%%>
		}
		if (HasChildCollection == true)
		{
		<%%-
			EditWorkspaceViewModel parentModel = null;
			
			foreach (%%><%%=VMBLLViewModelClassName%%><%%- model in %%><%%=BLLPluralEntityName%%><%%-)
			{
				parentModel = model.FindParentViewModel(data);
				if (parentModel != null)
				{
					return parentModel;
				}
			}%%>
		}
		<%%-
			
			return null;
		}%%>
		if (BLLClassName != "Solution" && Tags.Contains("CustomPaste") == false)
		{
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method is used to copy/paste a new item.</summary>
		///
		/// <param name="copyItem">The item to copy/paste.</param>
		/// <param name="savePaste">Flag to determine whether to save the results of the paste.</param>
		///--------------------------------------------------------------------------------
		public %%><%%=VMBLLViewModelClassName%%><%%- Paste%%><%%=BLLClassName%%><%%-(%%><%%=VMBLLViewModelClassName%%><%%- copyItem, bool savePaste = true)
		{
			%%><%%=BLLClassName%%><%%- newItem = new %%><%%=BLLClassName%%><%%-();
			newItem.ReverseInstance = new %%><%%=BLLClassName%%><%%-();
			newItem.TransformDataFromObject(copyItem.%%><%%=BLLClassName%%><%%-, null, false);
			newItem.%%><%%=BLLPrimaryKeyPropertyName%%><%%- = Guid.NewGuid();
			newItem.IsAutoUpdated = false;
			%%>
			foreach (EntityReference where ReferencedEntity.BLLClassName != parentClassName && ReferencedEntity.EntityTypeCode == 3 /* Primary */)
			{
			<%%-
			// try to find referenced %%><%%=ReferencedEntity.BLLClassName%%><%%- by existing id first, second by old id, finally by name
			newItem.%%><%%=BLLPropertyName%%><%%- = Solution.%%><%%=ReferencedEntity.BLLClassName%%><%%-List.FindByID((Guid)copyItem.%%><%%=../BLLClassName%%><%%-.%%><%%=BLLReferenceKeyPropertyName%%><%%-);
			if (newItem.%%><%%=BLLPropertyName%%><%%- == null && Solution.PasteNewGuids[copyItem.%%><%%=../BLLClassName%%><%%-.%%><%%=BLLReferenceKeyPropertyName%%><%%-.ToString()] is Guid)
			{
				newItem.%%><%%=BLLPropertyName%%><%%- = Solution.%%><%%=ReferencedEntity.BLLClassName%%><%%-List.FindByID((Guid)Solution.PasteNewGuids[copyItem.%%><%%=../BLLClassName%%><%%-.%%><%%=BLLReferenceKeyPropertyName%%><%%-.ToString()]);
			}
			if (newItem.%%><%%=BLLPropertyName%%><%%- == null)
			{
				newItem.%%><%%=BLLPropertyName%%><%%- = Solution.%%><%%=ReferencedEntity.BLLClassName%%><%%-List.Find("Name", copyItem.%%><%%=../BLLClassName%%><%%-.Name);
			}
			if (newItem.%%><%%=BLLPropertyName%%><%%- == null)
			{
				newItem.Old%%><%%=BLLReferenceKeyPropertyName%%><%%- = newItem.%%><%%=BLLReferenceKeyPropertyName%%><%%-;
				newItem.%%><%%=BLLReferenceKeyPropertyName%%><%%- = Guid.Empty;
			}%%>
			}
			if (parentClassName != null)
			{
			<%%-
			newItem.%%><%%=BLLParentReferencePropertyName%%><%%- = %%><%%=parentClassName%%><%%-;%%>
			}
			<%%-
			newItem.Solution = Solution;
			%%><%%=VMBLLViewModelClassName%%><%%- newView = new %%><%%=VMBLLViewModelClassName%%><%%-(newItem, Solution);
			newView.ResetModified(true);
			Add%%><%%=BLLClassName%%><%%-(newView);

			// paste children%%>
			if (BLLSingleCollectionClassName != null)
			{
				foreach (Entity in EntityAndBaseEntities)
				{
					foreach (Collection where ReferencedEntity.EntityTypeCode ==  3 /* Primary */ && Tags.Contains("Secondary") == false && ReferencedEntity.Tags.Contains("IgnoreView") == false)
					{
			<%%-
			foreach (%%><%%=ReferencedEntity.VMBLLViewModelClassName%%><%%- childView in copyItem.%%><%%=ReferencedEntity.BLLPluralEntityName%%><%%-)
			{
				newView.Paste%%><%%=ReferencedEntity.BLLClassName%%><%%-(childView, savePaste);
			}%%>
					}
				}
			}
			else
			{
				foreach (Entity in EntityAndBaseEntities)
				{
					foreach (Collection where ReferencedEntity.EntityTypeCode ==  3 /* Primary */ && Tags.Contains("Secondary") == false && ReferencedEntity.Tags.Contains("IgnoreView") == false)
					{
			<%%-
			foreach (%%><%%=ReferencedEntity.VMBLLViewModelClassName%%><%%- childView in copyItem.%%><%%=ReferencedEntity.BLLPluralEntityName%%><%%-Folder.%%><%%=ReferencedEntity.BLLPluralEntityName%%><%%-)
			{
				newView.%%><%%=ReferencedEntity.BLLPluralEntityName%%><%%-Folder.Paste%%><%%=ReferencedEntity.BLLClassName%%><%%-(childView, savePaste);
			}%%>
					}
				}
			}
			
			<%%-
			if (savePaste == true)
			{
				Solution.%%><%%=BLLClassName%%><%%-List.Add(newItem);%%>
				if (parentClassName != null && parentClassName != "Solution")
				{
				<%%-
				%%><%%=parentClassName%%><%%-.%%><%%=BLLParentCollectionName%%><%%-.Add(newItem);%%>
				}
				<%%-
				newView.OnUpdated(this, null);
				Solution.ResetModified(true);
			}
			return newView;
		}%%>
		}
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method adds an instance of %%><%%=BLLClassName%%><%%- to the view model.</summary>
		/// 
		/// <param name="itemView">The %%><%%=BLLClassName%%><%%- to add.</param>
		///--------------------------------------------------------------------------------
		public void Add%%><%%=BLLClassName%%><%%-(%%><%%=VMBLLViewModelClassName%%><%%- itemView)
		{
			itemView.Updated += new EventHandler(Children_Updated);
			%%><%%=BLLPluralEntityName%%><%%-.Add(itemView);
			Add(itemView);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method deletes an instance of %%><%%=BLLClassName%%><%%- from the view model.</summary>
		/// 
		/// <param name="itemView">The %%><%%=BLLClassName%%><%%- to delete.</param>
		///--------------------------------------------------------------------------------
		public void Delete%%><%%=BLLClassName%%><%%-(%%><%%=VMBLLViewModelClassName%%><%%- itemView)
		{
			itemView.Updated -= Children_Updated;
			%%><%%=BLLPluralEntityName%%><%%-.Remove(itemView);
			Delete(itemView);
		}

		#endregion "Methods"

		#region "Constructors"

		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public %%><%%=VMBLLViewPluralModelClassName%%><%%-()
		{
			Name = Resources.DisplayValues.NodeName_%%><%%=BLLPluralEntityName%%><%%-;
		}

		///--------------------------------------------------------------------------------
		/// <summary>Create the instance with the designer view and other data.</summary>
		///%%>
		if (parentClassName != null && parentClassName != "Solution")
		{
		<%%-
		/// <param name="%%><%%=parentClassName.CamelCase()%%><%%-">The %%><%%=parentClassName.CamelCase()%%><%%- to load.</param>%%>
		}
		<%%-
		/// <param name="solution">The associated solution.</param>
		/// <param name="loadChildren">Flag indicating whether to perform a deeper load.</param>
		///--------------------------------------------------------------------------------
		public %%><%%=VMBLLViewPluralModelClassName%%><%%-(%%>
		if (parentClassName != null && parentClassName != "Solution")
		{
		<%%=parentClassName%%><%%- %%><%%=parentClassName.CamelCase()%%><%%-, %%>
		}
		<%%-Solution solution, bool loadChildren = true)
		{
			Name = Resources.DisplayValues.NodeName_%%><%%=BLLPluralEntityName%%><%%-;
			Solution = solution;%%>
			if (parentClassName != null && parentClassName != "Solution")
			{
			<%%-
			%%><%%=parentClassName%%><%%- = %%><%%=parentClassName.CamelCase()%%><%%-;%%>
			}
			<%%-
			Load%%><%%=BLLPluralEntityName%%><%%-(%%>
			if (parentClassName != null && parentClassName != "Solution")
			{
			<%%=parentClassName.CamelCase()%%><%%-, %%>
			}
			if (BLLClassName != "Solution")
			{
			<%%-solution, loadChildren%%>
			}
			<%%-);
		}

		#endregion "Constructors"
	}
}
%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(VMBLLViewPluralModelClassFilePath) == null || (File(VMBLLViewPluralModelClassFilePath).Contains("<Status>Generated</Status>") == true && File(VMBLLViewPluralModelClassFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected()))
{
	update(VMBLLViewPluralModelClassFilePath)
}
%%></OUTPUT>