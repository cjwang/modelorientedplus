<CONFIG>
	NAME BLLCurrentItemAssignmentStatementNodeFile
	CATEGORY BLL
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Irony.Parsing;
using Irony.Interpreter.Ast;
using MoPlus.Data;
using System.Collections;
using %%><%%=Namespace%%><%%-.Resources;%%>
foreach (Feature)
{
<%%-
using %%><%%=../Namespace%%><%%-.BLL.%%><%%=FeatureName%%><%%-;%%>
}
<%%-

namespace %%><%%=Namespace%%><%%-.BLL.Interpreter
{
	///--------------------------------------------------------------------------------
	/// <summary>This class implements necessary members for interpretation of current item assignment statements.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize this file outside of protected areas,
	/// change the Status value below to something other than
	/// Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public partial class CurrentItemAssignmentStatementNode : NonLeafGrammarNode, IStatementNode
	{
		///--------------------------------------------------------------------------------
		/// <summary>Interpret this node to produce code, output, or model data..</summary>
		/// 
		/// <param name="interpreterType">The type of interpretation to perform.</param>
		/// <param name="solutionContext">The associated solution.</param>
		/// <param name="templateContext">The associated template.</param>
		/// <param name="modelContext">The associated model context.</param>
		///--------------------------------------------------------------------------------
		public void InterpretNode(InterpreterTypeCode interpreterType, Solution solutionContext, ITemplate templateContext, IDomainEnterpriseObject modelContext)
		{
			try
			{
				if (ModelContext != null || !String.IsNullOrEmpty(NewItem) || !String.IsNullOrEmpty(NullItem))
				{
					IDomainEnterpriseObject currentContext = null;
					if (ModelContext != null)
					{
						bool isValidContext;
						currentContext = ModelContext.GetModelContext(solutionContext, templateContext, modelContext, out isValidContext);
					}
					if (CurrentItem != null)
					{%%>
foreach (Entity in Solution where IsCurrentModelEntity == true sort EntityName)
{
<%%-
						%%>
	if (ItemIndex > 0)
	{
		<%%-else %%>
	}
<%%-if (CurrentItem.CurrentItemName == Enum.GetName(typeof(CurrentItemTypeCode), CurrentItemTypeCode.Current%%><%%=BLLClassName%%><%%-))
						{
							if (currentContext is %%><%%=BLLClassName%%><%%-)
							{
								solutionContext.Current%%><%%=BLLClassName%%><%%- = currentContext as %%><%%=BLLClassName%%><%%-;
							}
							else if (!String.IsNullOrEmpty(NewItem))
							{
								solutionContext.Current%%><%%=BLLClassName%%><%%- = new %%><%%=BLLClassName%%><%%-();%%>
								foreach (Property where IsPrimaryKeyMember == true)
								{
								<%%-
								solutionContext.Current%%><%%=../BLLClassName%%><%%-.%%><%%=BLLPropertyName%%><%%- = Guid.NewGuid();%%>
								}<%%-
								solutionContext.Current%%><%%=BLLClassName%%><%%-.IsAutoUpdated = true;
								solutionContext.Current%%><%%=BLLClassName%%><%%-.Solution = solutionContext;
							}
							else if (!String.IsNullOrEmpty(NullItem))
							{
								solutionContext.Current%%><%%=BLLClassName%%><%%- = null;
							}
						}%%>
}
<%%-
						#region protected
						#endregion protected
					}
					else if (SpecCurrentItem != null)
					{%%>
foreach (Entity in Solution where IsSpecModelEntity == true sort EntityName)
{
<%%-
						%%>
	if (ItemIndex > 0)
	{
		<%%-else %%>
	}
<%%-if (SpecCurrentItem.CurrentItemName == Enum.GetName(typeof(SpecCurrentItemTypeCode), SpecCurrentItemTypeCode.Current%%><%%=BLLClassName%%><%%-))
						{
							if (currentContext is %%><%%=BLLClassName%%><%%-)
							{
								solutionContext.Current%%><%%=BLLClassName%%><%%- = currentContext as %%><%%=BLLClassName%%><%%-;
							}
							else if (!String.IsNullOrEmpty(NullItem))
							{
								solutionContext.Current%%><%%=BLLClassName%%><%%- = null;
							}
						}%%>
}
<%%-
						#region protected
						#endregion protected
					}
				}
				else
				{
					AssignProperty(interpreterType, solutionContext, templateContext, modelContext);
				}
			}
			catch (ApplicationAbortException ex)
			{
				throw;
			}
			catch (System.Exception ex)
			{
				LogException(solutionContext, templateContext, modelContext, ex, interpreterType);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method assigns a property value to the current item.</summary>
		/// 
		/// <param name="interpreterType">The type of interpretation to perform.</param>
		/// <param name="solutionContext">The associated solution.</param>
		/// <param name="templateContext">The associated template.</param>
		/// <param name="modelContext">The associated model context.</param>
		///--------------------------------------------------------------------------------
		protected void AssignProperty(InterpreterTypeCode interpreterType, Solution solutionContext, ITemplate templateContext, IDomainEnterpriseObject modelContext)
		{
			object propertyValue = Parameter.GetObjectValue(solutionContext, templateContext, modelContext, interpreterType);
			bool propertyAssigned = false;%%>
foreach (Entity in Solution where IsCurrentModelEntity == true sort EntityName)
{
<%%-
			%%>
	if (ItemIndex > 0)
	{
		<%%-else %%>
	}
<%%-if (CurrentItem.CurrentItemName == Enum.GetName(typeof(CurrentItemTypeCode), CurrentItemTypeCode.Current%%><%%=BLLClassName%%><%%-))
			{
				propertyAssigned = solutionContext.Current%%><%%=BLLClassName%%><%%-.AssignProperty(AssignableProperty.PropertyName, propertyValue);
			}%%>
}
foreach (Entity in Solution where IsSpecModelEntity sort EntityName)
{
<%%-
			else if (CurrentItem.CurrentItemName == Enum.GetName(typeof(SpecCurrentItemTypeCode), SpecCurrentItemTypeCode.Current%%><%%=BLLClassName%%><%%-))
			{
				propertyAssigned = solutionContext.Current%%><%%=BLLClassName%%><%%-.AssignProperty(AssignableProperty.PropertyName, propertyValue);
			}%%>
}
<%%-
			#region protected
			#endregion protected
			if (propertyAssigned == false)
			{
				LogException(solutionContext, templateContext, modelContext, new Exception(String.Format(DisplayValues.Exception_InvalidPropertyAssignment, CurrentItem.CurrentItemName, AssignableProperty.PropertyName, propertyValue.GetString())), interpreterType);
			}
		}
	}
}
%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(BLLCurrentItemAssignmentStatementNodeFilePath) == null || File(BLLCurrentItemAssignmentStatementNodeFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected())
{
	update(BLLCurrentItemAssignmentStatementNodeFilePath)
}
%%></OUTPUT>