<CONFIG>
	NAME WPFUISolutionBuilderControlMarkupFile
	CATEGORY WPFUI
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-<!--
 This  code was generated from a template.  Change the
 Status value below to something other than Generated if you have
 customized this file to prevent changes from being overwritten, or use protected areas.

 <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
 <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
 <Status>Generated</Status>
-->
<UserControl x:Class="%%><%%=Namespace%%><%%-.UserControls.SolutionBuilderControl"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:lib="clr-namespace:%%><%%=Namespace%%><%%-.Library"%%>
<%%:
if (ProjectReferenceCount > 1)
{
	// get a project tagged as VM
	foreach (Project where Tags.Contains("VM") == true)
	{
			<%%-
                    xmlns:vm="clr-namespace:%%><%%=Namespace%%><%%-;assembly=%%><%%=Namespace%%><%%-"
                    xmlns:Conventions="clr-namespace:%%><%%=Namespace%%><%%-.Conventions;assembly=%%><%%=Namespace%%><%%-"%%>
                    foreach (Feature)
                    {
                    	foreach (Entity where EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreView") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" limit 1)
                    	{
			<%%-
                    xmlns:%%><%%=FeatureName%%><%%-="clr-namespace:%%><%%=../../Namespace%%><%%-.%%><%%=FeatureName%%><%%-;assembly=%%><%%=../../Namespace%%><%%-"%%>
                    	}
                    }
	}
}
else
{
	foreach (Project)
	{
			<%%-
                    xmlns:vm="clr-namespace:%%><%%=Namespace%%><%%-;assembly=%%><%%=Namespace%%><%%-"
                    xmlns:Conventions="clr-namespace:%%><%%=Namespace%%><%%-.Conventions;assembly=%%><%%=Namespace%%><%%-"%%>
		foreach (Feature)
		{
			foreach (Entity where EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreView") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" limit 1)
			{
			<%%-
                    xmlns:%%><%%=FeatureName%%><%%-="clr-namespace:%%><%%=../../Namespace%%><%%-.%%><%%=FeatureName%%><%%-;assembly=%%><%%=../../Namespace%%><%%-"%%>
			}
		}
	}
}
                    <%%-
                    xmlns:Settings="clr-namespace:%%><%%=Project.Namespace%%><%%-.Library;assembly=%%><%%=Project.Namespace%%><%%-"
                    mc:Ignorable="d" 
                    d:DesignHeight="300" d:DesignWidth="300">
	<UserControl.InputBindings>
		<KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding CancelJobsCommand}" />
	</UserControl.InputBindings>
	<UserControl.CommandBindings>
		<CommandBinding Command="Open" CanExecute="OpenCanExecute" Executed="OpenExecuted"></CommandBinding>
		<CommandBinding Command="New" CanExecute="NewCanExecute" Executed="NewExecuted"></CommandBinding>
		<CommandBinding Command="Save" CanExecute="SaveCanExecute" Executed="SaveExecuted"></CommandBinding>
		<CommandBinding Command="Delete" CanExecute="DeleteCanExecute" Executed="DeleteExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.ManageItem" CanExecute="ManageItemCanExecute" Executed="ManageItemExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.NewChildItem" CanExecute="NewChildItemCanExecute" Executed="NewChildItemExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.OpenOutputSolution" CanExecute="OpenOutputSolutionCanExecute" Executed="OpenOutputSolutionExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.UpdateOutputSolution" CanExecute="UpdateOutputSolutionCanExecute" Executed="UpdateOutputSolutionExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.CompileSolution" CanExecute="CompileSolutionCanExecute" Executed="CompileSolutionExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.SaveAs" CanExecute="SaveAsCanExecute" Executed="SaveAsExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.SaveAll" CanExecute="SaveAllCanExecute" Executed="SaveAllExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.CancelJobs" CanExecute="CancelJobsCanExecute" Executed="CancelJobsExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.Update" CanExecute="UpdateCanExecute" Executed="UpdateExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.Close" CanExecute="CloseCanExecute" Executed="CloseExecuted"></CommandBinding>
		<CommandBinding Command="vm:CustomCommands.ExplicitOpen" CanExecute="OpenCanExecute" Executed="OpenExecuted"></CommandBinding>
	</UserControl.CommandBindings>
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="../Resources/Theme.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<BitmapImage x:Key="Icon_FolderOpen"   UriSource="../Resources/Images/FolderOpen.png"   />
			<BitmapImage x:Key="Icon_FolderClosed" UriSource="../Resources/Images/FolderClosed.png" />
			<BitmapImage x:Key="Icon_HelpOpen"   UriSource="../Resources/Images/HelpOpen.png"   />
			<BitmapImage x:Key="Icon_HelpClosed" UriSource="../Resources/Images/HelpClosed.png" />%%>
			foreach (Entity in Solution where EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreView") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications")
			{
				if (HasUIChildCollection == true)
				{
			<%%-
			<BitmapImage x:Key="Icon_%%><%%=BLLClassName%%><%%-Open"   UriSource="../Resources/Images/%%><%%=BLLClassName%%><%%-Open.png"   />%%>
				}
			<%%-
			<BitmapImage x:Key="Icon_%%><%%=BLLClassName%%><%%-Closed" UriSource="../Resources/Images/%%><%%=BLLClassName%%><%%-Closed.png" />%%>
			}
			<%%-
			<Style x:Key="IconImageStyleSmall" TargetType="Image">
				<Setter Property="MaxWidth" Value="16"/>
				<Setter Property="MaxHeight" Value="16"/>
				<Setter Property="Margin" Value="0,0,0,0"/>
			</Style>
			<Style x:Key="TreeViewItemTextStyle" TargetType="{x:Type TextBlock}">
				<Setter Property="Text" Value="{Binding Name, Mode=OneWay}" />
				<Setter Property="Foreground" Value="Gray" />
				<Setter Property="Padding" Value="5,0,4,0" />
				<Setter Property="Margin" Value="0" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsSelected}" Value="True">
						<Setter Property="TreeViewItem.FontWeight" Value="Bold" />
					</DataTrigger>
					<DataTrigger Binding="{Binding HasCustomizations}" Value="True">
						<Setter Property="Foreground" Value="Black" />
					</DataTrigger>
					<DataTrigger Binding="{Binding HasErrors}" Value="True">
						<Setter Property="Foreground" Value="Red" />
					</DataTrigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="TemplateTreeViewItemTextStyle" TargetType="{x:Type TextBlock}">
				<Setter Property="Text" Value="{Binding Name, Mode=OneWay}" />
				<Setter Property="Foreground" Value="Gray" />
				<Setter Property="Padding" Value="5,0,4,0" />
				<Setter Property="Margin" Value="0" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsSelected}" Value="True">
						<Setter Property="TreeViewItem.FontWeight" Value="Bold" />
					</DataTrigger>
					<DataTrigger Binding="{Binding HasCustomizations}" Value="True">
						<Setter Property="Foreground" Value="Black" />
					</DataTrigger>
					<DataTrigger Binding="{Binding IsTemplateUtilized}" Value="True">
						<Setter Property="Foreground" Value="Green" />
					</DataTrigger>
					<DataTrigger Binding="{Binding HasErrors}" Value="True">
						<Setter Property="Foreground" Value="Red" />
					</DataTrigger>
				</Style.Triggers>
			</Style>%%>
			foreach (Entity in Solution where EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreView") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" && Tags.Contains("IgnoreBuilderUI") == false)
			{
				if (BLLParentSingleCollectionClassName == null)
				{
			<%%-
			<!-- %%><%%=BLLPluralEntityName%%><%%- -->
			<HierarchicalDataTemplate DataType="{x:Type %%><%%=FeatureName%%><%%-:%%><%%=VMBLLViewPluralModelClassName%%><%%-}" ItemsSource="{Binding Items, Mode=OneWay}">
				<StackPanel Orientation="Horizontal">
					<Image x:Name="nodeImg" Style="{StaticResource IconImageStyleSmall}" Source="{StaticResource Icon_FolderClosed}" />
					<TextBlock Style="{DynamicResource %%>
					if (Tags.Contains("Template") == true)
					{
						<%%-Template%%>
					}
					<%%-TreeViewItemTextStyle}" />
					<StackPanel.ContextMenu>
						<ContextMenu>%%>
					if (Tags.Contains("ContextMenu") == true)
					{
							<%%-
							<!-- region protected -->
							<!-- endregion protected -->%%>
					}
					else
					{
							<%%-
							<MenuItem Header="{Binding MenuLabelNew%%><%%=BLLClassName%%><%%-}" Command="New"></MenuItem>%%>
					}
						<%%-
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
				<HierarchicalDataTemplate.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=lib:ModelTreeViewItem}, Path=IsExpanded}" Value="True">
						<Setter TargetName="nodeImg" Property="Source" Value="{Binding Source={StaticResource Icon_FolderOpen}, Mode=OneTime}"/>
					</DataTrigger>
				</HierarchicalDataTemplate.Triggers>
			</HierarchicalDataTemplate>%%>
				}
				if (HasUIChildCollection == true)
				{
			<%%-
			<!-- %%><%%=BLLClassName%%><%%- -->
			<HierarchicalDataTemplate DataType="{x:Type %%><%%=FeatureName%%><%%-:%%><%%=VMBLLViewModelClassName%%><%%-}" ItemsSource="{Binding %%><%%=WPFUIChildItemsSource%%><%%-, Mode=OneWay}">
				<StackPanel Orientation="Horizontal">
					<Image x:Name="nodeImg" Style="{StaticResource IconImageStyleSmall}" Source="{StaticResource Icon_%%><%%=BLLClassName%%><%%-Closed}" />
					<TextBlock Style="{DynamicResource %%>
					if (Tags.Contains("Template") == true)
					{
						<%%-Template%%>
					}
					<%%-TreeViewItemTextStyle}" />
					<StackPanel.ContextMenu>
						<ContextMenu>%%>
					if (Tags.Contains("ContextMenu") == true)
					{
							<%%-
							<!-- region protected -->
							<!-- endregion protected -->%%>
					}
					else
					{
							<%%-
							<MenuItem Header="{Binding MenuLabelNew%%><%%=BLLClassName%%><%%-}" Command="New"></MenuItem>%%>
							if (BLLSingleCollectionClassName != null)
							{
							<%%-
							<MenuItem Header="{Binding MenuLabelNew%%><%%=BLLSingleCollectionClassName%%><%%-}" Command="vm:CustomCommands.NewChildItem"></MenuItem>%%>
							}
							<%%-
							<MenuItem Header="{Binding MenuLabelEdit}" Command="vm:CustomCommands.Update"></MenuItem>
							<MenuItem Header="{Binding MenuLabelDelete}" Command="Delete"></MenuItem>%%>
					}
						<%%-
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
				<HierarchicalDataTemplate.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=lib:ModelTreeViewItem}, Path=IsExpanded}" Value="True">
						<Setter TargetName="nodeImg" Property="Source" Value="{Binding Source={StaticResource Icon_%%><%%=BLLClassName%%><%%-Open}, Mode=OneTime}"/>
					</DataTrigger>
				</HierarchicalDataTemplate.Triggers>
			</HierarchicalDataTemplate>%%>
				}
				else
				{
			<%%-
			<!-- %%><%%=BLLClassName%%><%%- -->
			<DataTemplate DataType="{x:Type %%><%%=FeatureName%%><%%-:%%><%%=VMBLLViewModelClassName%%><%%-}">
				<StackPanel Orientation="Horizontal">
					<Image x:Name="nodeImg" Style="{StaticResource IconImageStyleSmall}" Source="{StaticResource Icon_%%><%%=BLLClassName%%><%%-Closed}" />%%>
					if (Tags.Contains("Template") == true)
					{
					<%%-
					<TextBlock ToolTip="{Binding ToolTipText, Mode=OneWay}" Style="{DynamicResource TemplateTreeViewItemTextStyle}" />%%>
					}
					else
					{
					<%%-
					<TextBlock Style="{DynamicResource TreeViewItemTextStyle}" />%%>
					}
					<%%-
					<StackPanel.ContextMenu>
						<ContextMenu>%%>
					if (Tags.Contains("ContextMenu") == true)
					{
							<%%-
							<!-- region protected -->
							<!-- endregion protected -->%%>
					}
					else
					{
							<%%-
							<MenuItem Header="{Binding MenuLabelNew%%><%%=BLLClassName%%><%%-}" Command="New"></MenuItem>
							<MenuItem Header="{Binding MenuLabelEdit}" Command="vm:CustomCommands.Update"></MenuItem>
							<MenuItem Header="{Binding MenuLabelDelete}" Command="Delete"></MenuItem>%%>
					}
						<%%-
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
			</DataTemplate>%%>
				}
			}
			<%%-
			<!-- region protected -->
			<!-- endregion protected -->
			<!-- resources -->
			<HierarchicalDataTemplate DataType="{x:Type Conventions:ResourcesViewModel}" ItemsSource="{Binding Items, Mode=OneWay}">
				<StackPanel Orientation="Horizontal">
					<Image x:Name="nodeImg" Style="{StaticResource IconImageStyleSmall}" Source="{StaticResource Icon_FolderClosed}" />
					<TextBlock Style="{DynamicResource TreeViewItemTextStyle}" />
				</StackPanel>
				<HierarchicalDataTemplate.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=lib:ModelTreeViewItem}, Path=IsExpanded}" Value="True">
						<Setter TargetName="nodeImg" Property="Source" Value="{Binding Source={StaticResource Icon_FolderOpen}, Mode=OneTime}"/>
					</DataTrigger>
				</HierarchicalDataTemplate.Triggers>
			</HierarchicalDataTemplate>
			<HierarchicalDataTemplate DataType="{x:Type Conventions:HelpViewModel}" ItemsSource="{Binding Items, Mode=OneWay}">
				<StackPanel Orientation="Horizontal">
					<Image x:Name="nodeImg" Style="{StaticResource IconImageStyleSmall}" Source="{StaticResource Icon_HelpClosed}" />
					<TextBlock Style="{DynamicResource TreeViewItemTextStyle}" />
					<StackPanel.ContextMenu>
						<ContextMenu>
							<MenuItem Header="{Binding MenuLabelShow}" Command="vm:CustomCommands.Update"></MenuItem>
						</ContextMenu>
					</StackPanel.ContextMenu>
				</StackPanel>
				<HierarchicalDataTemplate.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=lib:ModelTreeViewItem}, Path=IsExpanded}" Value="True">
						<Setter TargetName="nodeImg" Property="Source" Value="{Binding Source={StaticResource Icon_HelpOpen}, Mode=OneTime}"/>
					</DataTrigger>
				</HierarchicalDataTemplate.Triggers>
			</HierarchicalDataTemplate>
			<ObjectDataProvider x:Key="builderVM" ObjectType="{x:Type vm:BuilderViewModel}" />
		</ResourceDictionary>
	</UserControl.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<Grid Grid.Row="0" RenderTransformOrigin="0.5,0.5">
			<Grid.LayoutTransform>
				<TransformGroup>
					<ScaleTransform ScaleY="{Binding Path=Value, ElementName=slider}" ScaleX="{Binding Path=Value, ElementName=slider}"/>
				</TransformGroup>
			</Grid.LayoutTransform>
			<lib:ModelTreeView x:Name="solutionsModel" AllowDrop="True" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" ItemsSource="{Binding Items, Mode=OneWay}" PreviewMouseRightButtonDown="OnPreviewMouseRightButtonDown" Loaded="solutionsModel_Loaded" />
		</Grid>
		<Slider x:Name="slider" Grid.Row="1" Minimum=".75" Maximum="5" Value="{Binding Source={x:Static Settings:UserSettingsHelper.Instance}, Path=ControlSize, Mode=TwoWay}"/>
	</Grid>
</UserControl>%%>
%%></CONTENT><OUTPUT>
<%%=PROTECTEDAREASTART "<!-- region protected -->"%%>
<%%=PROTECTEDAREAEND "<!-- endregion protected -->"%%>
<%%:
if (File(WPFUISolutionBuilderControlMarkupFilePath) == null ||File(WPFUISolutionBuilderControlMarkupFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected())
{
	update(WPFUISolutionBuilderControlMarkupFilePath)
}
%%>
<%%=PROTECTEDAREASTART "#region protected"%%>
<%%=PROTECTEDAREAEND "#endregion protected"%%></OUTPUT>