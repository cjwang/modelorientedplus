<CONFIG>
	NAME VMBLLBuilderViewModelFile
	CATEGORY VMBLL
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Data;
using System.Windows.Input;
using System.Collections.ObjectModel;
using Microsoft.SqlServer.Server;
using System.IO;
using MoPlus.Data;
using %%><%%=Project.Namespace%%><%%-.Messaging;
using %%><%%=Project.Namespace%%><%%-.Events;
using %%><%%=Project.Namespace%%><%%-.Conventions;%%>
foreach (Feature in Solution where Tags.Contains("DB") == true)
{
	foreach (Entity where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" limit 1)
	{
<%%-
using %%><%%=Project.Namespace%%><%%-.%%><%%=FeatureName%%><%%-;
using %%><%%=Project.Namespace%%><%%-.Events.%%><%%=FeatureName%%><%%-;%%>
	}
}
foreach (Project where Tags.Contains("BLL") == true)
{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
	foreach (Feature in Solution)
	{
<%%-
using %%><%%=../Namespace%%><%%-.BLL.%%><%%=FeatureName%%><%%-;%%>
	}
}
<%%-

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class provides the view for the entire model.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize this file outside of protected areas,
	/// change the Status value below to something other than
	/// Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public partial class BuilderViewModel : WorkspaceViewModel
	{
		#region "Command Processing"

		///--------------------------------------------------------------------------------
		/// <summary>This method processes show Help messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_ShowHelpRequested, ParameterType = typeof(HelpEventArgs))]
		public void ProcessShowHelpRequested(HelpEventArgs data)
		{
			OnShowSolutionDesignerRequested(this, null);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes show item messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_ShowItemRequested, ParameterType = typeof(WorkspaceEventArgs))]
		public void ProcessShowItemRequested(WorkspaceEventArgs args)
		{
			if (args != null && args.Workspace != null)
			{
				// find and select item
				if (SelectItem(this, args) == true)
				{
					IsExpanded = true;
					IsSelected = false;
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method selects an item in the tree.</summary>
		/// 
		/// <param name="item">The item to compare recursively.</param>
		/// <param name="args">The arguments containing the item to select.</param>
		///--------------------------------------------------------------------------------
		private bool SelectItem(IWorkspaceViewModel item, WorkspaceEventArgs args)
		{
			if (args.ItemID == item.ItemID)
			{
				item.IsSelected = true;
				if (args.NeedsFocus == true)
				{
					item.NeedsFocus = true;
				}
				return true;
			}
			else if (item.Items != null)
			{
				foreach (IWorkspaceViewModel childItem in item.Items)
				{
					if (SelectItem(childItem, args) == true)
					{
						item.IsExpanded = true;
						item.IsSelected = false;
						return true;
					}
				}
			}
			return false;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes refresh solution messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_RefreshSolutionRequested, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessRefreshSolutionRequested(SolutionEventArgs args)
		{
			if (args != null && args.Solution != null)
			{
				foreach (SolutionViewModel item in SolutionsFolder.Solutions)
				{
					if (item.Solution.SolutionID == args.Solution.SolutionID)
					{
						item.Refresh(true);
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes compile solution messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_CompileSolutionRequested, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessCompileSolutionRequested(SolutionEventArgs data)
		{
			if (data != null && data.Solution != null)
			{
				foreach (SolutionViewModel item in SolutionsFolder.Solutions)
				{
					if (item.Solution.SolutionID == data.Solution.SolutionID)
					{
						item.BuildSolution();
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes update output solution messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_UpdateSolutionRequested, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessUpdateSolutionRequested(SolutionEventArgs data)
		{
			if (data != null && data.Solution != null)
			{
				foreach (SolutionViewModel item in SolutionsFolder.Solutions)
				{
					if (item.Solution.SolutionID == data.Solution.SolutionID)
					{
						item.UpdateOutputSolution();
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes compile solution messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_SolutionEditItemCount, ParameterType = typeof(SolutionEditEventArgs))]
		public void ProcessSolutionEditItemCount(SolutionEditEventArgs data)
		{
			if (data != null && data.SolutionID != Guid.Empty)
			{
				int tabItemCount = 0;
				foreach (SolutionViewModel item in SolutionsFolder.Solutions)
				{
					if (item.SolutionID == data.SolutionID)
					{
						item.EditItemsCount = data.EditItemsCount;
					}
					tabItemCount += item.EditItemsCount;
				}
				if (tabItemCount == 0)
				{
					OnFocusRequested(this, null);
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes refresh spec template messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_RefreshSpecTemplatesRequested, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessRefreshSpecTemplatesRequested(SolutionEventArgs data)
		{
			if (data != null && data.Solution != null)
			{
				foreach (SolutionViewModel item in SolutionsFolder.Solutions)
				{
					if (item.Solution.SolutionID == data.Solution.SolutionID)
					{
						item.SpecTemplatesFolder.Refresh(true);
						SolutionsFolder.Refresh(false, 1);
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes refresh code template messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_RefreshCodeTemplatesRequested, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessRefreshCodeTemplatesRequested(SolutionEventArgs data)
		{
			if (data != null && data.Solution != null)
			{
				foreach (SolutionViewModel item in SolutionsFolder.Solutions)
				{
					if (item.Solution.SolutionID == data.Solution.SolutionID)
					{
						item.CodeTemplatesFolder.Refresh(true);
						SolutionsFolder.Refresh(false, 1);
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This event is for handling focus requests.</summary>
		///--------------------------------------------------------------------------------
		public event EventHandler FocusRequested;

		///--------------------------------------------------------------------------------
		/// <summary>This method handles focus requests.</summary>
		/// 
		/// <param name="sender">Sender of the event.</param>
		/// <param name="args">Event arguments.</param>
		///--------------------------------------------------------------------------------
		public void OnFocusRequested(object sender, EventArgs args)
		{
			if (FocusRequested != null)
			{
				FocusRequested(this, args);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes the new command.</summary>
		/// 
		/// <param name="viewModel">View model to process command for.</param>
		///--------------------------------------------------------------------------------
		public void ProcessNewCommand(IWorkspaceViewModel viewModel)
		{%%>
		foreach (Entity in Solution where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" && BLLClassName != "Solution")
		{
			<%%-
			%%>
			if (ItemIndex > 0)
			{
				<%%-else %%>
			}
			if (BLLParentSingleCollectionClassName == null && Tags.Contains("IgnoreView") == false)
			{
			<%%-if (viewModel is %%><%%=VMBLLViewPluralModelClassName%%><%%-)
			{
				(viewModel as %%><%%=VMBLLViewPluralModelClassName%%><%%-).ProcessNew%%><%%=BLLClassName%%><%%-Command();
				return;
			}
			else %%>
			}
			<%%-if (viewModel is %%><%%=VMBLLViewModelClassName%%><%%-)
			{
				(viewModel as %%><%%=VMBLLViewModelClassName%%><%%-).ProcessNew%%><%%=BLLClassName%%><%%-Command();
				return;
			}%%>
		}
			<%%-
			
			#region protected
			#endregion protected
			
			SolutionsFolder.ProcessNewSolutionCommand();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes the new child item command.</summary>
		/// 
		/// <param name="viewModel">View model to process command for.</param>
		///--------------------------------------------------------------------------------
		public void ProcessNewChildItemCommand(IWorkspaceViewModel viewModel)
		{%%>
		foreach (Entity in Solution where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" && BLLClassName != "Solution" && VMBLLSingleCollectionViewClassName != null)
		{
		<%%-
			%%>
			if (ItemIndex > 0)
			{
				<%%-else %%>
			}
		<%%-if (viewModel is %%><%%=VMBLLViewModelClassName%%><%%-)
			{
				(viewModel as %%><%%=VMBLLViewModelClassName%%><%%-).ProcessNew%%><%%=VMBLLSingleCollectionViewClassName%%><%%-Command();
				return;
			}%%>
		}
		<%%-
			
			#region protected
			#endregion protected
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes the delete command.</summary>
		/// 
		/// <param name="viewModel">View model to process command for.</param>
		///--------------------------------------------------------------------------------
		public void ProcessDeleteCommand(IWorkspaceViewModel viewModel)
		{%%>
		foreach (Entity in Solution where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" && BLLClassName != "Solution")
		{
		<%%-
			%%>
			if (ItemIndex > 0)
			{
				<%%-else %%>
			}
		<%%-if (viewModel is %%><%%=VMBLLViewModelClassName%%><%%-)
			{
				(viewModel as %%><%%=VMBLLViewModelClassName%%><%%-).ProcessDelete%%><%%=BLLClassName%%><%%-Command();
				return;
			}%%>
		}
		<%%-
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method applies solution updates.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_EditSolutionPerformed, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessEditSolutionPerformed(SolutionEventArgs data)
		{
			if (SolutionsFolder != null)
			{
				SolutionsFolder.ProcessEditSolutionPerformed(data);
			}
		}%%>
	foreach (Entity in Solution where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreUI") == false && Tags.Contains("Source") == false && FeatureName != "Specifications" && BLLClassName != "Solution")
	{
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method applies %%><%%=BLLClassName%%><%%- updates.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_Edit%%><%%=BLLClassName%%><%%-Performed, ParameterType = typeof(%%><%%=BLLClassName%%><%%-EventArgs))]
		public void ProcessEdit%%><%%=BLLClassName%%><%%-Performed(%%><%%=BLLClassName%%><%%-EventArgs data)
		{%%>
		if (PropertyHasTag(tagName = "SelectParent") == true)
		{
		<%%-
			#region protected
			#endregion protected
%%>
		}
		<%%-
			if (SolutionsFolder != null)
			{
				foreach (SolutionViewModel solution in SolutionsFolder.Solutions)
				{
					if (solution.Solution.SolutionID == data.Solution.SolutionID)
					{
						EditWorkspaceViewModel parentView = solution.FindParentViewModel(data);%%>
		if (Tags.Contains("IgnoreView") == true)
		{
						<%%-

						#region protected
						#endregion protected
						%%>
		}
		else if (BLLParentSingleCollectionClassName != null)
		{
						<%%-
						if (parentView is %%><%%=VMBLLParentViewModelClassName%%><%%-)
						{
							(parentView as %%><%%=VMBLLParentViewModelClassName%%><%%-).ProcessEdit%%><%%=BLLClassName%%><%%-Performed(data);%%>
			if (PropertyHasTag(tagName = "SelectParent") == true)
			{
							<%%-

							#region protected
							#endregion protected
%%>
			}
			<%%-
						}%%>
		}
		else
		{
						<%%-
						if (parentView is %%><%%=VMBLLViewPluralModelClassName%%><%%-)
						{
							(parentView as %%><%%=VMBLLViewPluralModelClassName%%><%%-).ProcessEdit%%><%%=BLLClassName%%><%%-Performed(data);%%>
			if (PropertyHasTag(tagName = "SelectParent") == true)
			{
							<%%-

							#region protected
							#endregion protected
%%>
			}
			<%%-
						}%%>
		}
						<%%-
						break;
					}
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes delete %%><%%=BLLClassName%%><%%- messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_Delete%%><%%=BLLClassName%%><%%-Requested, ParameterType = typeof(%%><%%=BLLClassName%%><%%-EventArgs))]
		public void ProcessDelete%%><%%=BLLClassName%%><%%-Requested(%%><%%=BLLClassName%%><%%-EventArgs data)
		{
			if (SolutionsFolder != null)
			{
				foreach (SolutionViewModel solution in SolutionsFolder.Solutions)
				{
					if (solution.Solution.SolutionID == data.Solution.SolutionID)
					{
						EditWorkspaceViewModel parentView = solution.FindParentViewModel(data);%%>
		if (Tags.Contains("IgnoreView") == true)
		{
						<%%-
						#region protected
						#endregion protected%%>
		}
		else if (BLLParentSingleCollectionClassName != null)
		{
						<%%-
						if (parentView is %%><%%=VMBLLParentViewModelClassName%%><%%-)
						{
							(parentView as %%><%%=VMBLLParentViewModelClassName%%><%%-).ProcessDelete%%><%%=BLLClassName%%><%%-Performed(data);
						}%%>
		}
		else
		{
						<%%-
						if (parentView is %%><%%=VMBLLViewPluralModelClassName%%><%%-)
						{
							(parentView as %%><%%=VMBLLViewPluralModelClassName%%><%%-).ProcessDelete%%><%%=BLLClassName%%><%%-Performed(data);
						}%%>
		}
						<%%-
						break;
					}
				}
			}
		}%%>
	}
		<%%-

		#endregion "Command Processing"

		#region "Events"
		public delegate void SolutionEventHandler(object sender, SolutionEventArgs args);
		///--------------------------------------------------------------------------------
		/// <summary>This event is for handling requests to show the solution designer.</summary>
		///--------------------------------------------------------------------------------
		public event SolutionEventHandler ShowSolutionDesignerRequested;

		///--------------------------------------------------------------------------------
		/// <summary>This method handles show solution designer requests.</summary>
		/// 
		/// <param name="sender">Sender of the event.</param>
		/// <param name="args">Event arguments.</param>
		///--------------------------------------------------------------------------------
		protected void OnShowSolutionDesignerRequested(object sender, SolutionEventArgs args)
		{
			if (ShowSolutionDesignerRequested != null)
			{
				ShowSolutionDesignerRequested(this, args);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method processes edit solution messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_EditSolutionRequested, ParameterType = typeof(SolutionEventArgs))]
		public void ProcessEditSolutionRequested(SolutionEventArgs data)
		{
			OnShowSolutionDesignerRequested(this, null);
		}%%>
	foreach (Entity in Solution where Tags.Contains("DB") == true && EntityTypeCode == 3 /* Primary */ && Tags.Contains("IgnoreModel") == false && Tags.Contains("IgnoreUI") == false && FeatureName != "Specifications" && BLLClassName != "Solution")
	{
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method processes edit %%><%%=BLLClassName%%><%%- messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_Edit%%><%%=BLLClassName%%><%%-Requested, ParameterType = typeof(%%><%%=BLLClassName%%><%%-EventArgs))]
		public void ProcessEdit%%><%%=BLLClassName%%><%%-Requested(%%><%%=BLLClassName%%><%%-EventArgs data)
		{
			OnShowSolutionDesignerRequested(this, null);
		}%%>
	}
		<%%-

		#endregion "Events"

		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets Solutions folder.</summary>
		///--------------------------------------------------------------------------------
		public SolutionsViewModel SolutionsFolder { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets Resources folder.</summary>
		///--------------------------------------------------------------------------------
		public ResourcesViewModel ResourcesFolder { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets PasteViewModel folder.</summary>
		///--------------------------------------------------------------------------------
		public IWorkspaceViewModel PasteViewModel { get; set; }

		BackgroundWorker _initializationWorker = null;
		///--------------------------------------------------------------------------------
		/// <summary>This property gets the initialization worker.</summary>
		///--------------------------------------------------------------------------------
		BackgroundWorker InitializationWorker
		{
			get
			{
				if (_initializationWorker == null)
				{
					_initializationWorker = new BackgroundWorker();
					_initializationWorker.WorkerReportsProgress = true;
					_initializationWorker.WorkerSupportsCancellation = true;
					_initializationWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(InitializationWorker_RunWorkerCompleted);
					_initializationWorker.Disposed += new EventHandler(InitializationWorker_Disposed);
					_initializationWorker.ProgressChanged += new ProgressChangedEventHandler(InitializationWorker_ProgressChanged);
				}
				return _initializationWorker;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the initialization work handler.</summary>
		///--------------------------------------------------------------------------------
		protected DoWorkEventHandler InitializationWorkHandler { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the initialization work completed handler.</summary>
		///--------------------------------------------------------------------------------
		protected RunWorkerCompletedEventHandler InitializationWorkCompletedHandler { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"

		///--------------------------------------------------------------------------------
		/// <summary>This method refreshes the view model.</summary>
		/// 
		/// <param name="refreshChildren">Flag indicating whether children should be refreshed.</param>
		///--------------------------------------------------------------------------------
		public void Refresh(bool refreshChildren, int refreshLevel = 0)
		{
			HasErrors = !IsValid;
			HasCustomizations = false;
			if (refreshChildren == true || refreshLevel > 0)
			{
				SolutionsFolder.Refresh(refreshChildren, refreshLevel-1);
				ResourcesFolder.Refresh(refreshChildren, refreshLevel-1);
			}
			if (SolutionsFolder.HasErrors == true)
			{
				HasErrors = true;
			}
			if (SolutionsFolder.HasCustomizations == true)
			{
				HasCustomizations = true;
			}
			if (ResourcesFolder.HasErrors == true)
			{
				HasErrors = true;
			}
			if (ResourcesFolder.HasCustomizations == true)
			{
				HasCustomizations = true;
			}
			OnPropertyChanged("HasCustomizations");
			OnPropertyChanged("HasErrors");
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method disposes of resources in the view model.</summary>
		///--------------------------------------------------------------------------------
		protected override void OnDispose()
		{
			SolutionsFolder.Updated -= Children_Updated;
			SolutionsFolder = null;
			ResourcesFolder.Updated -= Children_Updated;
			ResourcesFolder = null;
			PasteViewModel = null;
			_initializationWorker = null;
			base.OnDispose();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method manages the update of this view when children are updated.</summary>
		/// 
		/// <param name="sender">The sender of the updated event.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		private void Children_Updated(object sender, EventArgs e)
		{
			Refresh(false, 1);
			OnUpdated(this, null);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method runs initialization on the initialization background worker.</summary>
		///--------------------------------------------------------------------------------
		protected void RunInitializationJob()
		{
			try
			{
				if (InitializationWorker.IsBusy == false)
				{
					if (InitializationWorkHandler != null)
					{
						// remove previous work
						InitializationWorker.DoWork -= InitializationWorkHandler;
						InitializationWorkHandler = null;
					}
					if (InitializationWorkCompletedHandler != null)
					{
						// remove completed handler
						InitializationWorker.RunWorkerCompleted -= InitializationWorkCompletedHandler;
						InitializationWorkCompletedHandler = null;
					}
					InitializationWorkHandler = new DoWorkEventHandler(InitializeData);
					InitializationWorker.DoWork += InitializationWorkHandler;

					InitializationWorker.RunWorkerAsync(InitializationWorker);
				}
				else
				{
					ShowIssue(Resources.DisplayValues.Thread_InitializationThreadBusy);
				}
			}
			catch (ApplicationException ex)
			{
				ShowException(ex);
			}
			catch (Exception ex)
			{
				ShowException(ex);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method initializes data needed by the application.</summary>
		///--------------------------------------------------------------------------------
		protected void InitializeData(object sender, DoWorkEventArgs e)
		{
			try
			{
				// transform some data to set up cache
				Solution testSolution = new Solution();
				Solution testSolution2 = new Solution();
				testSolution2.AuditPropertyList.Add(new AuditProperty());
				testSolution2.CollectionList.Add(new Collection());
				testSolution2.PropertyReferenceList.Add(new PropertyReference());
				testSolution2.DatabaseSourceList.Add(new DatabaseSource());
				testSolution2.XmlSourceList.Add(new XmlSource());
				testSolution2.ProjectList.Add(new Project());
				testSolution2.PropertyList.Add(new Property());
				testSolution2.IndexList.Add(new Index());
				testSolution2.IndexPropertyList.Add(new IndexProperty());
				testSolution2.EntityList.Add(new Entity());
				testSolution2.RelationshipList.Add(new Relationship());
				testSolution2.RelationshipPropertyList.Add(new RelationshipProperty());
				testSolution2.FeatureList.Add(new Feature());
				testSolution2.MethodList.Add(new Method());
				testSolution2.ParameterList.Add(new Parameter());
				testSolution2.MethodRelationshipList.Add(new MethodRelationship());
				testSolution2.PropertyRelationshipList.Add(new PropertyRelationship());
				testSolution2.EntityReferenceList.Add(new EntityReference());
				testSolution.TransformDataFromObject(testSolution2, null);

				// load a recent solution (TODO: look for initial load slowdown)
				foreach (RecentSolution loopSolution in BusinessConfiguration.RecentSolutionList)
				{
					testSolution.Load(loopSolution.RecentSolutionLocation);
					break;
				}
				testSolution2 = null;
				testSolution = null;

				// load library convention data
				int i = 0;
				i += DataConventionHelper.DataTypes.Count;
				i += DataConventionHelper.EntityTypes.Count;
				i += DataConventionHelper.IdentifierTypes.Count;
				i += DataConventionHelper.MethodTypes.Count;
				if (i == 0)
				{
					ShowIssue(Resources.DisplayValues.Issue_LibraryResourcesMissing);
				}
			}
			catch (ApplicationException ex)
			{
				ShowException(ex);
			}
			catch (Exception ex)
			{
				ShowException(ex);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles reporting ongoing progress of the initialization job.</summary>
		/// 
		/// <param name="sender">The sender of the event.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		void InitializationWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
		{
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles disposing of the background worker.</summary>
		/// 
		/// <param name="sender">The sender of the event.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		void InitializationWorker_Disposed(object sender, EventArgs e)
		{
			_initializationWorker = null;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles reporting completed progress of the initialization job.</summary>
		/// 
		/// <param name="sender">The sender of the event.</param>
		/// <param name="e">The event arguments.</param>
		///--------------------------------------------------------------------------------
		void InitializationWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
		{
			ShowOutput(Resources.DisplayValues.Thread_InitializationDone, Resources.DisplayValues.Task_InitializationTitle, true);
		}

		#endregion "Methods"

		#region "Constructors"

		///--------------------------------------------------------------------------------
		/// <summary>The default constructor.</summary>
		///--------------------------------------------------------------------------------
		public BuilderViewModel()
		{
			Name = Resources.DisplayValues.NodeName_Root;

			// Register all decorated methods to the Mediator
			Mediator.Register(this);

			// create the solutions folder
			SolutionsFolder = new SolutionsViewModel(true);
			SolutionsFolder.Updated += new EventHandler(Children_Updated);

			// create the resources folder
			ResourcesFolder = new ResourcesViewModel();
			ResourcesFolder.Updated += new EventHandler(Children_Updated);

			Refresh(false);
			Items.Add(SolutionsFolder);
			Items.Add(ResourcesFolder);

			// initialize data
			RunInitializationJob();
		}

		#endregion "Constructors"
	}
}
%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(VMBLLBuilderViewModelFilePath) == null || File(VMBLLBuilderViewModelFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected())
{
	update(VMBLLBuilderViewModelFilePath)
}
%%></OUTPUT>