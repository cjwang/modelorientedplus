<CONFIG>
	NAME UnitTestBaseClassCode
	CATEGORY UnitTest
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;%%>
with (Project)
{
	if (ProjectReferenceCount > 1)
	{
		// get a project tagged as BLL
		foreach (Project where Tags.Contains("BLL") == true)
		{
    <%%-
using %%><%%=Namespace%%><%%-;
using %%><%%=Namespace%%><%%-.Models;%%>
		}
	}
	else
	{
		foreach (Project)
		{
    <%%-
using %%><%%=Namespace%%><%%-;
using %%><%%=Namespace%%><%%-.Models;%%>
		}
	}
}
<%%-

namespace %%><%%=Project.Namespace%%><%%-
{
	//------------------------------------------------------------------------------
	/// <summary>This base class is used to set up unit tests.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, change
	/// the Status value below to something other than Generated to
	/// prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	[TestClass]
	public abstract class %%><%%=UnitTestBaseClassName%%><%%-
	{
		protected UnitOfWork unitOfWork;
		private static Random random = new Random(DateTime.Now.Millisecond);

		protected BaseUnitTest()
		{
			unitOfWork = new UnitOfWork();
		}

		protected static int GetRandomNumeric(int minValue, int maxValue)
		{
			return random.Next(minValue, maxValue);
		}

		protected static bool GetRandomBool()
		{
			return random.Next(1, 11) > 5;
		}

		protected static Guid GetRandomGuid()
		{
			return Guid.NewGuid();
		}

		protected static DateTime GetRandomDate()
		{
			return DateTime.Now.AddYears(random.Next(-10, 1)).AddDays(random.Next(-100, 100)).AddHours(random.Next(-100, 100)).AddMinutes(random.Next(-100, 100)).AddSeconds(random.Next(-100, 100));
		}

		protected static string GetRandomString(int minLength, int maxLength)
		{
			StringBuilder sb = new StringBuilder();
			var chars = new[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " ", ",", ".", "?", "@", "!", "#", "$", "%", "^", "&", "*", "(", ")" };
			int length = random.Next(minLength, maxLength);
			for (int i = 0; i < length; i++)
			{
				sb.Append(chars[random.Next(0, chars.Length)]);
			}
			return sb.ToString();
		}

		protected static char GetRandomChar()
		{
			var chars = new[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', ' ', ',', '.', '?', '@', '!', '#', '$', '%', '^', '&', '*', '(', ')' };
			return chars[random.Next(0, chars.Length)];
		}
	}
}%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(UnitTestBaseClassFilePath) == null || (File(UnitTestBaseClassFilePath).Contains("<Status>Generated</Status>") == true
     && File(UnitTestBaseClassFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(UnitTestBaseClassFilePath)
}
%%></OUTPUT>