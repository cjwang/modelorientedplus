<CONFIG>
	NAME WPFUIOutputCodeFile
	CATEGORY WPFUI
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;%%>
<%%:
if (ProjectReferenceCount > 1)
{
	// get a project tagged as VM
	foreach (Project where Tags.Contains("VM") == true)
	{
    <%%-
using %%><%%=Namespace%%><%%-;
using %%><%%=Namespace%%><%%-.Messaging;
using %%><%%=Namespace%%><%%-.Events;%%>
	}
}
else
{
	foreach (Project)
	{
    <%%-
using %%><%%=Namespace%%><%%-;
using %%><%%=Namespace%%><%%-.Messaging;
using %%><%%=Namespace%%><%%-.Events;%%>
	}
}
%%><%%-

namespace %%><%%=Namespace%%><%%-.UserControls
{
	///--------------------------------------------------------------------------------
	/// <summary>Interaction logic for Output.xaml.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public partial class Output : UserControl
	{
		public Output()
		{
			InitializeComponent();
			OutputViewModel = new OutputViewModel();
			OutputViewModel.OutputChanged += new OutputViewModel.StatusChangeEventHandler(OutputViewModel_OutputChanged);
			DataContext = OutputViewModel;
		}

		#region "Properties and Fields"

		public OutputViewModel OutputViewModel { get; set; }
		#endregion "Properties and Fields"

		#region "Methods"
		delegate void OutputViewModel_OutputChangedCallback(object sender, StatusEventArgs args);
		void OutputViewModel_OutputChanged(object sender, StatusEventArgs args)
		{
			if (txtOutput.Dispatcher.Thread != System.Threading.Thread.CurrentThread)
			{
				OutputViewModel_OutputChangedCallback callback = new OutputViewModel_OutputChangedCallback(OutputViewModel_OutputChanged);
				this.Dispatcher.Invoke(callback, new object[] { sender, args});
			}
			else
			{
				if (args != null)
				{
					ShowOutput(args.Text, args.Title, args.AppendText);
				}
			}
		}

		delegate void ShowOutputCallback(string outputMessage, string outputTitle, bool appendMessage);
		///--------------------------------------------------------------------------------
		/// <summary>This method displays a message in the output area.</summary>
		/// 
		/// <param name="outputMessage">The message to show.</param>
		/// <param name="outputTitle">The title for the message.</param>
		/// <param name="appendMessage">Flag indicating whether message should be appended to existing message.</param>
		///--------------------------------------------------------------------------------
		public void ShowOutput(string outputMessage, string outputTitle, bool appendMessage)
		{
			if (txtOutput.Dispatcher.Thread != System.Threading.Thread.CurrentThread)
			{
				ShowOutputCallback callback = new ShowOutputCallback(ShowOutput);
				this.Dispatcher.Invoke(callback, new object[] { outputTitle, outputMessage, appendMessage });
			}
			else
			{
				txtOutput.Focusable = false;
				if (txtOutput.Text.Length > 20000) // TODO: use an application setting for this
				{
					txtOutput.Text = string.Empty;
				}
				if (!String.IsNullOrEmpty(txtOutput.Text))
				{
					if (appendMessage == false)
					{
						txtOutput.Text = "\r\n";
					}
					else
					{
						txtOutput.Text = txtOutput.Text + "\r\n";
					}
				}
				if (!String.IsNullOrEmpty(outputTitle))
				{
					txtOutput.Text = txtOutput.Text + "\r\n" + outputTitle;
				}
				txtOutput.Text = txtOutput.Text + "\r\n" + outputMessage;
				txtOutput.SelectionStart = txtOutput.Text.Length;
				txtOutput.ScrollToEnd();
				txtOutput.Focusable = true;
			}
		}

		private void ClearTextCanExecute(object sender, CanExecuteRoutedEventArgs e)
		{
			e.CanExecute = true;
		}

		private void ClearTextExecuted(object sender, ExecutedRoutedEventArgs e)
		{
			txtOutput.Text = String.Empty;
		}

		#endregion "Methods"
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(WPFUIOutputCodeFilePath) == null || (File(WPFUIOutputCodeFilePath).Contains("<Status>Generated</Status>") == true && File(WPFUIOutputCodeFilePath).Filter("<CreatedByUserName>","</CreatedDate>") != Text.Filter("<CreatedByUserName>","</CreatedDate>")))
{
	update(WPFUIOutputCodeFilePath)
}
%%></OUTPUT>