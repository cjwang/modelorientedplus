<CONFIG>
	NAME IEnterpriseDataObjectListFile
	CATEGORY MiddleTier
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Text;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This interface is used for all sortable object lists, including the ability
	/// to sort instances by a property.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public interface IEnterpriseDataObjectList<T> : IEnumerable<T>, ICollection<T>, IList<T>, IEnterpriseEnumerable where T : IEnterpriseDataObject
	{
		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has been modified since the
		/// last load from a resource such as a database.</summary>
		///--------------------------------------------------------------------------------
		bool IsModified { get; }

		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has been loaded from a resource
		/// such as a database.</summary>
		///--------------------------------------------------------------------------------
		bool IsLoaded { get; }

		///--------------------------------------------------------------------------------
		/// <summary>This method resets the IsLoaded state for the list.</summary>
		///
		/// <remarks>This should only be used if special business rules override normal loading behavior.</remarks>
		/// 
		/// <param name="isLoaded">The reset value for the IsLoaded property.</param>
		///--------------------------------------------------------------------------------
		void ResetLoaded(bool isLoaded);

		///--------------------------------------------------------------------------------
		/// <summary>This method resets the IsModified state for the list.</summary>
		///
		/// <remarks>This should only be used if special business rules override normal modified behavior.</remarks>
		/// 
		/// <param name="isModified">The reset value for the IsModified property.</param>
		///--------------------------------------------------------------------------------
		void ResetModified(bool isModified);

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included.</summary>
		///--------------------------------------------------------------------------------
		string GetDelimitedData();

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included if specified.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		///--------------------------------------------------------------------------------
		string GetDelimitedData(bool includeHeader);

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included if specified.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		/// <param name="includeData">Specifies whether or not to include the data in
		/// the output.</param>
		/// <param name="delimiter">The user specified delimiter.</param>
		///--------------------------------------------------------------------------------
		string GetDelimitedData(bool includeHeader, bool includeData, string delimiter);

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves formatted data of all serializable public
		/// property elements (non complex or array types).  Header is included, 80 character
		/// maximum per column.</summary>
		///--------------------------------------------------------------------------------
		string GetFormattedData();

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves formatted data of all serializable public
		/// property elements (non complex or array types).  Header is included, 80 character
		/// maximum per column.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		///--------------------------------------------------------------------------------
		string GetFormattedData(bool includeHeader);

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves formatted data of all serializable public
		/// property elements (non complex or array types).  Header and maximum characters
		/// per column is input.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		/// <param name="includeData">Specifies whether or not to include the data in
		/// the output.</param>
		/// <param name="maxWidthPerColumn">The maximum number of characters per column.</param>
		///--------------------------------------------------------------------------------
		string GetFormattedData(bool includeHeader, bool includeData, int maxWidthPerColumn);
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(IEnterpriseDataObjectListFilePath) == null || (File(IEnterpriseDataObjectListFilePath).Contains("<Status>Generated</Status>") == true && File(IEnterpriseDataObjectListFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected()))
{
	update(IEnterpriseDataObjectListFilePath)
}
%%></OUTPUT>