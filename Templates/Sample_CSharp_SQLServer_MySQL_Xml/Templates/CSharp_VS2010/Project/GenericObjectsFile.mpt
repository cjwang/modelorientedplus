<CONFIG>
	NAME GenericObjectsFile
	CATEGORY MiddleTier
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using System.Text;
using System.Data.Services;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This file holds a set of generic classes for holding some data for
	/// generic tasks.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------

	///--------------------------------------------------------------------------------
	/// <summary>This class is used to support general needs for creating and managing
	/// generic entities.  Entities can have properties, methods, and associated method
	/// parameters.</summary>
	///
	/// <remarks>This class should not be used directly for enterprise objects that
	/// have data that needs to be managed in a database, etc.  Enterprise objects
	/// should derive from IEnterpriseDataObject.</remarks>
	///--------------------------------------------------------------------------------
	[Serializable()]
	[IgnoreProperties("PropertyList", "MethodList")]
	public class GenericEntity : DataAccessObjectBase
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the ID of the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public override Guid ID
		{
			get
			{
				return EntityID;
			}
			set
			{
				EntityID = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the id of the entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public Guid EntityID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string EntityName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the entity type.  Valid entity types depend
		/// entirely on the set provided by the user of this entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int EntityTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the entity type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string EntityTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the description of the entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string Description { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a generic value.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public object GenericValue { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the list of properties for the entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlArrayItem(ElementName = "PropertyList", Type = typeof(GenericProperty))]
		[DataArrayItem]
		public EnterpriseDataObjectList<GenericProperty> PropertyList { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the list of methods for the entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlArrayItem(ElementName = "MethodList", Type = typeof(GenericMethod))]
		[DataArrayItem]
		public EnterpriseDataObjectList<GenericMethod> MethodList { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public GenericEntity() { }
		#endregion "Constructors"
	}

	///--------------------------------------------------------------------------------
	/// <summary>This class is used to support general needs for creating and managing
	/// generic items.</summary>
	///
	/// <remarks>This class should not be used directly for enterprise objects that
	/// have data that needs to be managed in a database, etc.  Enterprise objects
	/// should derive from IEnterpriseDataObject.</remarks>
	///--------------------------------------------------------------------------------
	[Serializable()]
	public class GenericItem : DataAccessObjectBase
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the ID of the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public override Guid ID
		{
			get
			{
				return ItemID;
			}
			set
			{
				ItemID = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the id of the item.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public Guid ItemID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the item.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string ItemName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the description of the item.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string Description { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a generic value.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public object GenericValue { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public GenericItem() { }
		#endregion "Constructors"
	}

	///--------------------------------------------------------------------------------
	/// <summary>This class is used to support general needs for creating and managing
	/// generic methods.  Entities can have associated method parameters.</summary>
	///
	/// <remarks>This class should not be used directly for enterprise objects that
	/// have data that needs to be managed in a database, etc.  Enterprise objects
	/// should derive from IEnterpriseDataObject.</remarks>
	///--------------------------------------------------------------------------------
	[Serializable()]
	[IgnoreProperties("MethodParameterList")]
	public class GenericMethod : DataAccessObjectBase
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the ID of the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public override Guid ID
		{
			get
			{
				return MethodID;
			}
			set
			{
				MethodID = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the id of the method.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public Guid MethodID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the method.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string MethodName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the method type.  Valid method types depend
		/// entirely on the set provided by the user of this method.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int MethodTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the method type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string MethodTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the description of the method.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string Description { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a generic value.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public object GenericValue { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the list of parameters for the method.</summary>
		///--------------------------------------------------------------------------------
		[XmlArrayItem(ElementName = "MethodParameterList", Type = typeof(GenericParameter))]
		[DataArrayItem]
		public EnterpriseDataObjectList<GenericParameter> MethodParameterList { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public GenericMethod() { }
		#endregion "Constructors"
	}

	///--------------------------------------------------------------------------------
	/// <summary>This class is used to support general needs for creating and managing
	/// generic packages (of entities).</summary>
	///
	/// <remarks>This class should not be used directly for enterprise objects that
	/// have data that needs to be managed in a database, etc.  Enterprise objects
	/// should derive from IEnterpriseDataObject.</remarks>
	///--------------------------------------------------------------------------------
	[Serializable()]
	[IgnoreProperties("EntityList")]
	public class GenericPackage : DataAccessObjectBase
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the ID of the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public override Guid ID
		{
			get
			{
				return PackageID;
			}
			set
			{
				PackageID = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the id of the package.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public Guid PackageID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the package.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string PackageName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the package type.  Valid package types depend
		/// entirely on the set provided by the user of this entity.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int PackageTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the package type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string PackageTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the description of the package.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string Description { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a generic value.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public object GenericValue { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the list of entities for the package.</summary>
		///--------------------------------------------------------------------------------
		[XmlArrayItem(ElementName = "EntityList", Type = typeof(GenericEntity))]
		[DataArrayItem]
		public EnterpriseDataObjectList<GenericEntity> EntityList { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public GenericPackage() { }
		#endregion "Constructors"
	}

	///--------------------------------------------------------------------------------
	/// <summary>This class is used for creating and managing generic parameters,
	/// usually associated with the generic Method class.</summary>
	///
	/// <remarks>This class should not be used directly for enterprise objects that
	/// have data that needs to be managed in a database, etc.  Enterprise objects
	/// should derive from IEnterpriseDataObject.</remarks>
	///--------------------------------------------------------------------------------
	[Serializable()]
	public class GenericParameter : DataAccessObjectBase
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the ID of the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public override Guid ID
		{
			get
			{
				return ParameterID;
			}
			set
			{
				ParameterID = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the id of the parameter.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public Guid ParameterID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the parameter.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string ParameterName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the method type.  Valid parameter types depend
		/// entirely on the set provided by the user of this parameter.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int ParameterTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the parameter type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string ParameterTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the data type.  Valid data types depend
		/// entirely on the set provided by the user of this parameter.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int DataTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the data type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string DataTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the is nullable flag.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Bool)]
		[DataElement]
		public bool IsNullable { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the data type size.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int Size { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the data type precision.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int Precision { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the order of the this parameter.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int Order { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the description of the parameter.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string Description { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a generic value.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public object GenericValue { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public GenericParameter() { }
		#endregion "Constructors"
	}

	///--------------------------------------------------------------------------------
	/// <summary>This class is used for creating and managing generic properties,
	/// usually associated with the generic Entity class.</summary>
	///
	/// <remarks>This class should not be used directly for enterprise objects that
	/// have data that needs to be managed in a database, etc.  Enterprise objects
	/// should derive from IEnterpriseDataObject.</remarks>
	///--------------------------------------------------------------------------------
	[Serializable()]
	public class GenericProperty : DataAccessObjectBase
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the ID of the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public override Guid ID
		{
			get
			{
				return PropertyID;
			}
			set
			{
				PropertyID = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the id of the property.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public Guid PropertyID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the property.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string PropertyName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the property type.  Valid property types depend
		/// entirely on the set provided by the user of this property.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int PropertyTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the property type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string PropertyTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the data type.  Valid data types depend
		/// entirely on the set provided by the user of this property.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int DataTypeCode { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the name of the data type.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string DataTypeName { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the is nullable flag.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Bool)]
		[DataElement]
		public bool IsNullable { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the data type size.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int Size { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the data type precision.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int Precision { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the order of the this property.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue(DefaultValue.Int)]
		[DataElement]
		public int Order { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets the description of the property.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DefaultValue("")]
		[DataElement]
		public string Description { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a generic value.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public object GenericValue { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public GenericProperty() { }
		#endregion "Constructors"
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(GenericObjectsFilePath) == null || (File(GenericObjectsFilePath).Contains("<Status>Generated</Status>") == true && File(GenericObjectsFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected()))
{
	update(GenericObjectsFilePath)
}
%%></OUTPUT>