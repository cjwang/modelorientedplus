<CONFIG>
	NAME DataAccessObjectBaseFile
	CATEGORY MiddleTier
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Xml;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Text;
using System.IO;
using System.Reflection;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class is the base data access object implementation for this
	/// project.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	[Serializable()]
	[DataContract]
	public abstract partial class DataAccessObjectBase : IEnterpriseDataObject, IDataErrorInfo, INotifyPropertyChanged, IDisposable
	{
		#region "IDataErrorInfo Members"

		[XmlIgnore]
		[IgnoreDataMember]
		string IDataErrorInfo.Error { get { return null; } }

		[XmlIgnore]
		[IgnoreDataMember]
		string IDataErrorInfo.this[string propertyName]
		{
			get { return this.GetValidationError(propertyName); }
		}

		#endregion "IDataErrorInfo Members"

		#region "INotifyPropertyChanged Members"

		/// <summary>
		/// Raised when a property on this object has a new value.
		/// </summary>
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Raises this object's PropertyChanged event.
		/// </summary>
		/// <param name="propertyName">The property that has a new value.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null && this.GetPropertyInfo(propertyName) != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		#endregion "INotifyPropertyChanged Members"

		#region "IDisposable Members"

		/// <summary>
		/// Invoked when this object is being removed from the application
		/// and will be subject to garbage collection.
		/// </summary>
		public void Dispose()
		{
			this.OnDispose();
		}

		/// <summary>
		/// Child classes can override this method to perform 
		/// clean-up logic, such as removing event handlers.
		/// </summary>
		protected virtual void OnDispose()
		{
		}

		#endregion "IDisposable Members"

		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a convenient unique ID of the instance.  It
		/// does not need to be the primary identifier for the instance.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public virtual Guid ID { get; set; }

		// get a random int as a default value
		protected int _randomInt = DataHelper.GetRandomInt();
		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a random integer value, to be used for random
		/// sorting.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		[IgnoreDataMember]
		public int RandomInt
		{
			get
			{
				return _randomInt;
			}
			set
			{
				_randomInt = value;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the representation of the instance as xml.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		[IgnoreDataMember]
		public string XmlData
		{
			get
			{
				return XmlHelper.Serialize(this);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the representation of the instance as xml.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		[IgnoreDataMember]
		public string InnerXmlData
		{
			get
			{
				XmlDocument document = new XmlDocument();
				document.LoadXml(XmlHelper.Serialize(this));
				return document.ChildNodes[1].InnerXml;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets whether validation errors are present.</param>
		///--------------------------------------------------------------------------------
		public bool IsValid
		{
			get
			{
				GenericEntity inputEntity = null;
				string typeName = GetType().FullName;
				if (DataTransformHelper.EntityPropertyFieldInfoCache.GenericEntityCache[typeName] is GenericEntity)
				{
					inputEntity = DataTransformHelper.EntityPropertyFieldInfoCache.GenericEntityCache[typeName] as GenericEntity;
				}
				else
				{
					inputEntity = DataTransformHelper.EntityPropertyFieldInfoCache.AddNewEntityWithPropertyFieldInfo(this);
				}
				foreach (GenericProperty loopProperty in inputEntity.PropertyList)
				{
					if (GetValidationError(loopProperty.PropertyName) != null)
						return false;
				}
				return true;
			}
		}

		[DataMember(Name = "IsLoaded")]
		[DataElement(ElementName = "IsLoaded")]
		protected bool _isLoaded = DefaultValue.Bool;
		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has been loaded from a resource
		/// such as a database.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public virtual bool IsLoaded
		{
			get
			{
				return _isLoaded;
			}
		}

		[DataMember(Name = "IsModified")]
		[DataElement(ElementName = "IsModified")]
		protected bool __isModified = DefaultValue.Bool;
		protected bool _isModified
		{
			get { return __isModified; }
			set { __isModified = value; }
		}
		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has been modified since the
		/// last load from a resource such as a database.</summary>
		/// 
		/// <remarks>This property should be extended to check collections to see if anything is modified.</remarks>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		public virtual bool IsModified
		{
			get
			{
				return _isModified;
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has or should be deleted.</summary>
		///--------------------------------------------------------------------------------
		[DataMember(Name = "IsDeleted")]
		[DataElement(ElementName = "IsDeleted")]
		public bool IsDeleted { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the primary key.  This property should be
		/// overridden.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		[IgnoreDataMember]
		public virtual string PrimaryKeyValues
		{
			get
			{

				return (RandomInt.GetString());
			}
			set
			{
				string[] primaryKeyValues = value.Split(',');
				if (primaryKeyValues.Length > 0)
				{
					RandomInt = primaryKeyValues[0].GetInt();
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the primary key columns (names).  This property
		/// should be overridden.</summary>
		///--------------------------------------------------------------------------------
		[XmlIgnore]
		[IgnoreDataMember]
		public virtual string PrimaryKeyProperties
		{
			get
			{
				return "RandomInt";
			}
		}%%>
		<%%:
		foreach (AuditProperty)
		{
			with (Property from Solution.Find(PropertyName, PropertyName))
			{
			<%%-
			
		protected %%><%%=DALDataType%%><%%- %%><%%=DALFieldName%%>
				if (IsNullable == true)
				{
					<%%- = null%%>
				}
		<%%-;
		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the %%><%%=DALPropertyName%%><%%-.</summary>
		///--------------------------------------------------------------------------------
		[XmlElement()]
		[DataMember]
		[DataElement]
		[DefaultValue(null)]
		public virtual %%><%%=DALDataType%%><%%- %%><%%=DALPropertyName%%><%%-
		{
			get
			{
				return %%><%%=DALFieldName%%><%%-;
			}
			set
			{
				if (%%><%%=DALFieldName%%><%%- != value)
				{
					%%><%%=DALFieldName%%><%%- = value;
				}
			}
		}%%>
			}
		}
		%%><%%-
		#endregion "Fields and Properties"

		#region "Methods"
		///--------------------------------------------------------------------------------
		/// <summary>This method loads the data for this entity from an xml file.</summary>
		/// 
		/// <remarks>This method will cause an exception if the input file is not valid
		/// xml for this instance.</remarks>
		/// 
		/// <param name="inputFilePath">The path of the file to load from.</param>
		///--------------------------------------------------------------------------------
		public virtual void Load(string inputFilePath)
		{
			if (File.Exists(inputFilePath))
			{
				TransformDataFromObject((IEnterpriseDataObject)XmlHelper.Deserialize(FileHelper.GetText(inputFilePath), GetType()), null);
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method saves the data for this entity as an xml file.</summary>
		/// 
		/// <param name="inputFilePath">The path of the file to save to.</param>
		///--------------------------------------------------------------------------------
		public virtual void Save(string inputFilePath)
		{
			FileHelper.ReplaceFile(inputFilePath, XmlData);
		}

		///--------------------------------------------------------------------------------
		/// <summary>Use RandomInt as basis for default compare (there is no other useful
		/// property for this object).</summary>
		///--------------------------------------------------------------------------------
		public virtual int CompareTo(object obj)
		{
			IEnterpriseDataObject baseObj = obj as IEnterpriseDataObject;
			if (obj != null)
			{
				return RandomInt.CompareTo(baseObj.RandomInt);
			}
			return 0;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method returns a validation error for the input property.</param>
		/// 
		/// <param name="propertyName">The name of the property.</param>
		/// 
		/// <remarks>This should be overridden with actual business rules for validation.</remarks>
		/// 
		/// <returns>Validation error (null by default).</returns>
		///--------------------------------------------------------------------------------
		public virtual string GetValidationError(string propertyName)
		{
			return null;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method gets a string value from a property of the input object,
		/// else returns the default string value.</summary>
		/// 
		/// <param name="propertyName">Name of the property to get value from.</param>
		/// 
		/// <remarks>DataHelper.GetPropertyValueString() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		public virtual string GetPropertyValueString(string propertyName)
		{
			return DataHelper.GetPropertyValueString(this, propertyName);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method gets an object value from a property of the input object,
		/// else returns the default string value.</summary>
		/// 
		/// <param name="propertyName">Name of the property to get value from.</param>
		/// 
		/// <remarks>DataHelper.GetPropertyValue() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		public virtual object GetPropertyValue(string propertyName)
		{
			return DataHelper.GetPropertyValue(this, propertyName);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method gets a string value from a field of the input object,
		/// else returns the default string value.</summary>
		/// 
		/// <param name="fieldName">Name of the field to get value from.</param>
		/// 
		/// <remarks>DataHelper.GetFieldValueString() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		public virtual string GetFieldValueString(string fieldName)
		{
			return DataHelper.GetFieldValueString(this, fieldName);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method determine whethers the input value matches the value of the specified
		/// property's value.</summary>
		/// 
		/// <remarks>DataHelper.IsPropertyValueMatch() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		public virtual bool IsPropertyValueMatch(string propertyName, object propertyValue)
		{
			return DataHelper.IsPropertyValueMatch(this, propertyName, propertyValue);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included.</summary>
		/// 
		/// <returns>Tab delimited data with header for the instance.</returns>
		///--------------------------------------------------------------------------------
		public virtual string GetDelimitedData()
		{
			return GetDelimitedData(true, true, "\t");
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included if specified.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		/// 
		/// <returns>Tab delimited data for the instance.</returns>
		///--------------------------------------------------------------------------------
		public virtual string GetDelimitedData(bool includeHeader)
		{
			return GetDelimitedData(includeHeader, true, "\t");
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included if specified.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		/// <param name="includeData">Specifies whether or not to include the data in
		/// the output.</param>
		/// <param name="delimiter">The user specified delimiter.</param>
		/// 
		/// <returns>Delimited data for the instance, delimited and header as specified by the user.</returns>
		///--------------------------------------------------------------------------------
		public virtual string GetDelimitedData(bool includeHeader, bool includeData, string delimiter)
		{
			StringBuilder output = new StringBuilder();

			if (includeHeader == true)
			{
				string title = String.Empty;
				foreach (PropertyInfo loopInfo in GetType().GetProperties())
				{
					if (loopInfo.GetCustomAttributes(typeof(XmlElementAttribute), true).Length > 0)
					{
						// output serializable element header
						if (title != String.Empty)
						{
							title += delimiter;
						}
						title += loopInfo.Name;
					}
				}
				output.Append(title);
			}
			if (includeData == true)
			{
				string row = String.Empty;
				foreach (PropertyInfo loopInfo in GetType().GetProperties())
				{
					if (loopInfo.GetCustomAttributes(typeof(XmlElementAttribute), true).Length > 0)
					{
						// output serializable element data
						if (row != String.Empty)
						{
							row += delimiter;
						}
						row += GetPropertyValueString(loopInfo.Name);
					}
				}
				output.Append("\r\n" + row);
			}

			return output.ToString();
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method transforms data from the input object into this instance.</summary>
		///
		/// <param name="inputObject">The input object to get data from.</param>
		/// <param name="filterElements">Properties and fields whose values should be omitted from the transform.</param>
		///--------------------------------------------------------------------------------
		public void TransformDataFromObject(IEnterpriseDataObject inputObject, NameObjectCollection filterElements)
		{
			TransformDataFromObject(inputObject, filterElements, true, false);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method transforms data from the input object into this instance.</summary>
		///
		/// <param name="inputObject">The input object to get data from.</param>
		/// <param name="filterElements">Properties and fields whose values should be omitted from the transform.</param>
		/// <param name="includeCollections">Flag indicating whether or not to include collections in the transform.</param>
		///--------------------------------------------------------------------------------
		public void TransformDataFromObject(IEnterpriseDataObject inputObject, NameObjectCollection filterElements, bool includeCollections)
		{
			TransformDataFromObject(inputObject, filterElements, includeCollections, false);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method transforms data from the input object into this instance,
		/// with the option to include collections in the transformation.</summary>
		///
		/// <param name="inputObject">The input object to get data from.</param>
		/// <param name="filterElements">Properties and fields whose values should be omitted from the transform.</param>
		/// <param name="includeCollections">Flag indicating whether or not to include collections in the transform.</param>
		/// <param name="getNonDefaultValuesOnly">If true, only return a value if not null and not a default value.</param>
		///--------------------------------------------------------------------------------
		public void TransformDataFromObject(IEnterpriseDataObject inputObject, NameObjectCollection filterElements, bool includeCollections, bool getNonDefaultValuesOnly)
		{
			DataTransformHelper.TransformDataFromObject(inputObject, this, filterElements, includeCollections, getNonDefaultValuesOnly);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method resets the IsLoaded state for the instance.</summary>
		///
		/// <remarks>This should only be used if special business rules override normal loading behavior.
		/// This method may need to be extended to reset collections.</remarks>
		/// 
		/// <param name="isLoaded">The reset value for the IsLoaded property.</param>
		///--------------------------------------------------------------------------------
		public virtual void ResetLoaded(bool isLoaded)
		{
			_isLoaded = isLoaded;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method resets the IsModified state for the instance.</summary>
		///
		/// <remarks>This should only be used if special business rules override normal modified behavior.
		/// This method may need to be extended to reset collections.</remarks>
		/// 
		/// <param name="isModified">The reset value for the IsModified property.</param>
		///--------------------------------------------------------------------------------
		public virtual void ResetModified(bool isModified)
		{
			_isModified = isModified;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method determines if the input enterprise data object is equal to
		/// (in key values) to the current instance.</summary>
		/// 
		/// <param name="inputObject">The item to compare.</param>
		/// 
		/// <returns>True if two instances compare as equal, false otherwise.</returns>
		///--------------------------------------------------------------------------------
		public override bool Equals(object inputObject)
		{
			if (inputObject == null)
			{
				return false;
			}

			if (inputObject is IEnterpriseDataObject && GetType().Name == inputObject.GetType().Name)
			{
				IEnterpriseDataObject inputEnterpriseDataObject = (IEnterpriseDataObject)inputObject;

				// compare primary key values for equality
				if (PrimaryKeyValues != inputEnterpriseDataObject.PrimaryKeyValues)
				{
					return false;
				}

				// compare all public property values for equality
				GenericEntity inputEntity = null;
				if (DataTransformHelper.EntityPropertyFieldInfoCache.GenericEntityCache[inputEnterpriseDataObject.GetType().FullName] is GenericEntity)
				{
					inputEntity = DataTransformHelper.EntityPropertyFieldInfoCache.GenericEntityCache[inputEnterpriseDataObject.GetType().FullName] as GenericEntity;
				}
				else
				{
					inputEntity = DataTransformHelper.EntityPropertyFieldInfoCache.AddNewEntityWithPropertyFieldInfo(inputEnterpriseDataObject);
				}
				foreach (GenericProperty loopProperty in inputEntity.PropertyList)
				{
					if (loopProperty.PropertyTypeCode == (int)DataTransformPropertyType.ElementProperty || loopProperty.PropertyTypeCode == (int)DataTransformPropertyType.ElementField)
					{
						if (inputEnterpriseDataObject.IsPropertyValueMatch(loopProperty.PropertyName, GetPropertyValue(loopProperty.PropertyName)) == false)
						{
							return false;
						}
					}
				}

				return true;
			}

			return false;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This override of GetHashCode uses the primary key values to determine
		/// an identifying instance.</summary>
		/// 
		/// <returns>The hash code as primary key values.</returns>
		///--------------------------------------------------------------------------------
		public override int GetHashCode()
		{
			return PrimaryKeyValues.GetHashCode();
		}
	
		#endregion "Methods"
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(DataAccessObjectBaseFilePath) == null || (File(DataAccessObjectBaseFilePath).Contains("<Status>Generated</Status>") == true && File(DataAccessObjectBaseFilePath).Filter("<CreatedByUserName>","</CreatedDate>") != Text.Filter("<CreatedByUserName>","</CreatedDate>")))
{
	update(DataAccessObjectBaseFilePath)
}
%%></OUTPUT>