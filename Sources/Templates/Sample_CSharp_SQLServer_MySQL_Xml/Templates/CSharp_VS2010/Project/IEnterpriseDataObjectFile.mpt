<CONFIG>
	NAME IEnterpriseDataObjectFile
	CATEGORY MiddleTier
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Text;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This interface is used for all enterprise data objects (data access
	/// objects, business objects, etc.).</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public interface IEnterpriseDataObject
	{
		#region "Fields and Properties"

		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has been modified since the
		/// last load from a resource such as a database.</summary>
		///--------------------------------------------------------------------------------
		bool IsModified { get; }

		///--------------------------------------------------------------------------------
		/// <summary>This property determines if the data has been loaded from a resource
		/// such as a database.</summary>
		///--------------------------------------------------------------------------------
		bool IsLoaded { get; }

		///--------------------------------------------------------------------------------
		/// <summary>This property is used to get the set of properties that comprise the
		/// primary key.</summary>
		///--------------------------------------------------------------------------------
		string PrimaryKeyProperties { get; }

		///--------------------------------------------------------------------------------
		/// <summary>This property is used to get a reliable unique value for each instance
		/// of the data object.</summary>
		///--------------------------------------------------------------------------------
		string PrimaryKeyValues { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a convenient unique ID of the instance.  It
		/// does not need to be the primary identifier for the instance.</summary>
		///--------------------------------------------------------------------------------
		Guid ID { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets/sets a random integer value, to be used for random
		/// sorting.</summary>
		/// 
		/// <remarks>DataHelper.GetRandomInt() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		int RandomInt { get; set; }%%>
		<%%:
		foreach (AuditProperty in Solution)
		{
			with (Property from Solution.Find(PropertyName, PropertyName))
			{
		<%%-
		
		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the %%><%%=BLLPropertyName%%><%%-.</summary>
		///--------------------------------------------------------------------------------
		%%><%%=BLLDataType%%><%%- %%><%%=BLLPropertyName%%><%%- { get; set; }%%>
			}
		}
		%%>
		<%%-
		#endregion "Fields and Properties"

		#region "Methods"
		///--------------------------------------------------------------------------------
		/// <summary>This method resets the IsLoaded state for the instance.</summary>
		///
		/// <remarks>This should only be used if special business rules override normal loading behavior.</remarks>
		/// 
		/// <param name="isLoaded">The reset value for the IsLoaded property.</param>
		///--------------------------------------------------------------------------------
		void ResetLoaded(bool isLoaded);

		///--------------------------------------------------------------------------------
		/// <summary>This method resets the IsModified state for the instance.</summary>
		///
		/// <remarks>This should only be used if special business rules override normal modified behavior.</remarks>
		/// 
		/// <param name="isModified">The reset value for the IsModified property.</param>
		///--------------------------------------------------------------------------------
		void ResetModified(bool isModified);

		///--------------------------------------------------------------------------------
		/// <summary>This method gets a string value from a property of the input object,
		/// else returns the default string value.</summary>
		/// 
		/// <param name="propertyName">Name of the property to get value from.</param>
		/// 
		/// <remarks>DataHelper.GetPropertyValueString() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		string GetPropertyValueString(string propertyName);

		///--------------------------------------------------------------------------------
		/// <summary>This method gets an object value from a property of the input object,
		/// else returns the default string value.</summary>
		/// 
		/// <param name="propertyName">Name of the property to get value from.</param>
		/// 
		/// <remarks>DataHelper.GetPropertyValue() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		object GetPropertyValue(string propertyName);

		///--------------------------------------------------------------------------------
		/// <summary>This method gets a string value from a field of the input object,
		/// else returns the default string value.</summary>
		/// 
		/// <param name="fieldName">Name of the field to get value from.</param>
		/// 
		/// <remarks>DataHelper.GetFieldValueString() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		string GetFieldValueString(string fieldName);

		///--------------------------------------------------------------------------------
		/// <summary>This method determine whethers the input value matches the value of the specified
		/// property's value.</summary>
		/// 
		/// <param name="propertyName">Name of the property to determine match.</param>
		/// <param name="propertyValue">Value to use to determine match.</param>
		/// 
		/// <remarks>DataHelper.IsPropertyValueMatch() can be used as a base implementation.</remarks>
		///--------------------------------------------------------------------------------
		bool IsPropertyValueMatch(string propertyName, object propertyValue);

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included.</summary>
		///--------------------------------------------------------------------------------
		string GetDelimitedData();

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included if specified.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		///--------------------------------------------------------------------------------
		string GetDelimitedData(bool includeHeader);

		///--------------------------------------------------------------------------------
		/// <summary>This method retrieves tab delimited data of all serializable public
		/// property elements (non complex or array types).  Header is included if specified.</summary>
		/// 
		/// <param name="includeHeader">Specifies whether or not to include the header in
		/// the output.</param>
		/// <param name="includeData">Specifies whether or not to include the data in
		/// the output.</param>
		/// <param name="delimiter">The user specified delimiter.</param>
		///--------------------------------------------------------------------------------
		string GetDelimitedData(bool includeHeader, bool includeData, string delimiter);

		///--------------------------------------------------------------------------------
		/// <summary>This method transforms data from the input object into this instance.</summary>
		///
		/// <param name="inputObject">The input object to get data from.</param>
		/// <param name="filterElements">Properties and fields whose values should be omitted from the transform.</param>
		///--------------------------------------------------------------------------------
		void TransformDataFromObject(IEnterpriseDataObject inputObject, NameObjectCollection filterElements);

		///--------------------------------------------------------------------------------
		/// <summary>This method transforms data from the input object into this instance.</summary>
		///
		/// <param name="inputObject">The input object to get data from.</param>
		/// <param name="filterElements">Properties and fields whose values should be omitted from the transform.</param>
		/// <param name="includeCollections">Flag indicating whether or not to include collections in the transform.</param>
		///--------------------------------------------------------------------------------
		void TransformDataFromObject(IEnterpriseDataObject inputObject, NameObjectCollection filterElements, bool includeCollections);

		///--------------------------------------------------------------------------------
		/// <summary>This method transforms data from the input object into this instance,
		/// with the option to include collections in the transformation.</summary>
		///
		/// <param name="inputObject">The input object to get data from.</param>
		/// <param name="filterElements">Properties and fields whose values should be omitted from the transform.</param>
		/// <param name="includeCollections">Flag indicating whether or not to include collections in the transform.</param>
		/// <param name="getNonDefaultValuesOnly">If true, only return a value if not null and not a default value.</param>
		///--------------------------------------------------------------------------------
		void TransformDataFromObject(IEnterpriseDataObject inputObject, NameObjectCollection filterElements, bool includeCollections, bool getNonDefaultValuesOnly);
		#endregion "Methods"
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(IEnterpriseDataObjectFilePath) == null || (File(IEnterpriseDataObjectFilePath).Contains("<Status>Generated</Status>") == true && File(IEnterpriseDataObjectFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(IEnterpriseDataObjectFilePath)
}
%%></OUTPUT>