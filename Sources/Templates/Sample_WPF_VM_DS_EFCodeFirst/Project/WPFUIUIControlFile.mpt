<CONFIG>
	NAME WPFUIUIControlFile
	CATEGORY WPFUI
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Controls;
using System.Windows;
using System.Windows.Input;
using System.Text.RegularExpressions;%%>
<%%:
if (ProjectReferenceCount > 1)
{
	// get a project tagged as VM
	foreach (Project where Tags.Contains("VM") == true)
	{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
	}
}
else
{
	foreach (Project)
	{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
	}
}
%%><%%-

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class provides base functionality for edit user controls.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public class UIControl : UserControl
	{
		///--------------------------------------------------------------------------------
		/// <summary>This method enables commands that require dialogs.</summary>
		///--------------------------------------------------------------------------------
		public void SetCommands()
		{
			if (DataContext is IEditWorkspaceViewModel)
			{
				var context = DataContext as IEditWorkspaceViewModel;
				if (context.AreConfirmCommandsDelegated == false)
				{
					context.ConfirmClose += UIControl_ConfirmClose;
					context.AreConfirmCommandsDelegated = true;
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method confirms the close of the control.</summary>
		///--------------------------------------------------------------------------------
		private void UIControl_ConfirmClose(object sender, EventArgs e)
		{
			if (sender is IEditWorkspaceViewModel)
			{
				if (MessageBox.Show("Are you sure you want to close the tab " + (sender as IEditWorkspaceViewModel).TabTitle + " that has outstanding changes?", "Close Item", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
				{
					(sender as IEditWorkspaceViewModel).CloseCommand.Execute(null);
				}
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method handles the textbox loaded event to set focus.</summary>
		/// 
		/// <param name="sender">Sender of the event.</param>
		/// <param name="e">Event arguments.</param>
		///--------------------------------------------------------------------------------
		protected void TextBox_Loaded(object sender, RoutedEventArgs e)
		{
			if (sender != null && sender is TextBox)
			{
				(sender as TextBox).Focus();
			}
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method enforces input to be numeric only.</summary>
		/// 
		/// <param name="sender">Sender of the event.</param>
		/// <param name="e">Event arguments.</param>
		///--------------------------------------------------------------------------------
		protected void TextBox_PreviewNumericInput(object sender, TextCompositionEventArgs e)
		{
			e.Handled = !IsTextNumeric(e.Text);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method determines whether the input text is numeric.</summary>
		/// 
		/// <param name="text">Input text to test.</param>
		///--------------------------------------------------------------------------------
		private bool IsTextNumeric(string text)
		{   
			Regex regex = new Regex("[^0-9.-]+");
			return !regex.IsMatch(text);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method enforces input to be numeric only.</summary>
		/// 
		/// <param name="sender">Sender of the event.</param>
		/// <param name="e">Event arguments.</param>
		///--------------------------------------------------------------------------------
		protected void TextBox_NumericPasting(object sender, DataObjectPastingEventArgs e)
		{
			if (e.DataObject.GetDataPresent(typeof(String)))
			{
				String text = (String)e.DataObject.GetData(typeof(String));
				if (!IsTextNumeric(text)) e.CancelCommand();
			}
			else e.CancelCommand();
		}
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(WPFUIUIControlFilePath) == null || (File(WPFUIUIControlFilePath).Contains("<Status>Generated</Status>") == true && File(WPFUIUIControlFilePath).Filter("<CreatedByUserName>","</CreatedDate>") != Text.Filter("<CreatedByUserName>","</CreatedDate>")))
{
	update(WPFUIUIControlFilePath)
}
%%></OUTPUT>