<CONFIG>
	NAME VITADomainEntityStoreClassCode
	CATEGORY VITA
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
//
// Use this template to create a class to set up an entity store with VITA managed entities.
//
<%%=USETABS true%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.Linq;
using Vita.Entities;
using Vita.Activation;
using Vita.Data;
using Vita.Data.Caching;
using Vita.Data.Model;
using Vita.Data.MsSql;%%>
if (Solution.VITA_ADD_LOGIN_MODULE == true)
{
	<%%=Solution.NEWLINE%%>
	<%%-using Vita.Modules.Login;%%>
}
<%%-
using %%><%%=Project.Namespace%%><%%-.Models;

namespace %%><%%=Project.Namespace%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class is used to set up an entity store with VITA entities.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, change
	/// the Status value below to something other than Generated to
	/// prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	public static partial class %%><%%=VITADomainEntityStoreClassName%%>
	<%%=Solution.OPEN_BRACE%%><%%-
		public static IEntityStore EntityStore { get; private set; }
		public static CacheSettings CacheSettings;
		public static bool CacheEnabled;
		
		///--------------------------------------------------------------------------------
		/// <summary>Initialize the VITA entity store.</summary>
		/// 
		/// <param name="connectionString">The connection to a SQL Server 2012 database.</param>
		///--------------------------------------------------------------------------------
		public static void Init(string connectionString)%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%-
			try%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%-
				var domainApp = new %%><%%=VITADomainAppClassName%%><%%-();
				var driver = new MsSqlDbDriver(MsSqlVersion.V2012);
				var schemas = new string[] { "domain"%%>
				if (Solution.VITA_ADD_INFO_MODULE == true)
				{
					<%%-, "info"%%>
				}
				if (Solution.VITA_ADD_LOGIN_MODULE == true)
				{
					<%%-, "login"%%>
				}
				if (Solution.VITA_ADD_LOG_MODULE == true)
				{
					<%%-, "log"%%>
				}
				<%%-};
				CacheSettings = null;
				if (CacheEnabled)%%>
				<%%=Solution.OPEN_BRACE%%>
					<%%-
					CacheSettings = new CacheSettings(%%>
					<%%=Solution.INDENT%%>
						<%%-
						new Type[]%%>
						<%%=Solution.OPEN_BRACE%%>
							foreach (Entity in Solution where VITAIsFullyCachedEntity == true)
							{
								<%%=Solution.NEWLINE%%>
								<%%-typeof(%%><%%=VITAInterfaceName%%><%%-),%%>
							}
						<%%=Solution.CLOSE_BRACE%%><%%-, //fully cached types
						new Type[]%%>
						<%%=Solution.OPEN_BRACE%%>
							foreach (Entity in Solution where VITAIsPartiallyCachedEntity == true)
							{
								<%%=Solution.NEWLINE%%>
								<%%-typeof(%%><%%=VITAInterfaceName%%><%%-),%%>
							}
						<%%=Solution.CLOSE_BRACE%%><%%-, // sparsely cached types
						fullSetCacheExpiration: TimeSpan.FromSeconds(300), sparseCacheExpiration: TimeSpan.FromSeconds(60));%%>
					<%%=Solution.OUTDENT%%>
				<%%=Solution.CLOSE_BRACE%%>
				<%%-
				var dbSettings = new DbSettings(driver, MsSqlDbDriver.DefaultMsSqlDbOptions, connectionString, schemas: schemas);
				EntityStore = domainApp.CreateEntityStore(dbSettings, null, true%%>
				if (Solution.VITA_ADD_LOG_MODULE == true)
				{
					<%%-, logFilePath: ConfigurationManager.AppSettings["LogFilePath"]%%>
				}
				<%%-);%%>
				if (Solution.VITA_ADD_LOGIN_MODULE == true)
				{
					<%%=Solution.NEWLINE%%>
					<%%-var session = EntityStore.OpenSystemSession();
					if (session.EntitySet<ISecretQuestion>().Count() == 0)%%>
					<%%=Solution.OPEN_BRACE%%>
						<%%=Solution.NEWLINE%%>
						<%%-LoginModule.ImportDefaultSecretQuestions(session);
						session.SaveChanges();%%>
					<%%=Solution.CLOSE_BRACE%%>
				}
			<%%=Solution.CLOSE_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-catch(ClientFaultException cfx)%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.NEWLINE%%>
				<%%-Debug.WriteLine("Validation errors: \r\n" + cfx.ToString());
				throw;%%>
			<%%=Solution.CLOSE_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-catch(Exception ex)%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.NEWLINE%%>
				<%%-Debug.WriteLine("EntityStore init encountered errors: ");
				Debug.WriteLine(ex.ToString());
				throw;%%>
			<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.CLOSE_BRACE%%>
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(VITADomainEntityStoreClassFilePath) == null || (File(VITADomainEntityStoreClassFilePath).Contains("<Status>Generated</Status>") == true
     && File(VITADomainEntityStoreClassFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(VITADomainEntityStoreClassFilePath)
}
%%></OUTPUT>