<CONFIG>
	NAME ViewModelBaseFile
	CATEGORY VM
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using System.Xml;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Text;
using System.IO;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class manages overall business configuration values.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file outside of protected areas to prevent changes
	///	from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public abstract class ViewModelBase : IViewModelObject
	{
		#region protected
		#endregion protected

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the name.</summary>
		///--------------------------------------------------------------------------------
		public virtual string Name { get; set; }
		
		///--------------------------------------------------------------------------------
		/// <summary>This method gets a validation error for a property or other tag.</summary>
		/// 
		/// <remarks>This should be overridden by view model classes performing any validation.</remarks>
		/// <param name="propertyName">The property to get the validation error for.</param>
		///--------------------------------------------------------------------------------
		public virtual string GetValidationError(string propertyName)
		{
			return string.Empty;
		}
		
		#region "IDataErrorInfo Members"

		[XmlIgnore]
		[IgnoreDataMember]
		string IDataErrorInfo.Error { get { return null; } }

		[XmlIgnore]
		[IgnoreDataMember]
		string IDataErrorInfo.this[string propertyName]
		{
			get { return this.GetValidationError(propertyName); }
		}

		#endregion "IDataErrorInfo Members"

		#region "INotifyPropertyChanged Members"

		/// <summary>
		/// Raised when a property on this object has a new value.
		/// </summary>
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Raises this object's PropertyChanged event.
		/// </summary>
		/// <param name="propertyName">The property that has a new value.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		#endregion "INotifyPropertyChanged Members"

		#region "IDisposable Members"

		/// <summary>
		/// Invoked when this object is being removed from the application
		/// and will be subject to garbage collection.
		/// </summary>
		public void Dispose()
		{
			this.OnDispose();
		}

		/// <summary>
		/// Child classes can override this method to perform 
		/// clean-up logic, such as removing event handlers.
		/// </summary>
		protected virtual void OnDispose()
		{
		}

		#endregion "IDisposable Members"
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(ViewModelBaseFilePath) == null || (File(ViewModelBaseFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(ViewModelBaseFilePath)
}
%%></OUTPUT>