<CONFIG>
	NAME VMBLLEditorAreaViewModelFile
	CATEGORY VMBLL
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Input;
using System.ComponentModel;%%>
if (ProjectReferenceCount > 1)
{
	// get a project tagged as BLL
	foreach (Project where Tags.Contains("BLL") == true)
	{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
	}
}
else
{
	foreach (Project)
	{
    <%%-
using %%><%%=Namespace%%><%%-;%%>
	}
}
<%%-
using %%><%%=Project.Namespace%%><%%-.Messaging;
using %%><%%=Project.Namespace%%><%%-.Events;%%>
foreach (Feature in Solution where Tags.Contains("DB") == true)
{
<%%-
using %%><%%=Project.Namespace%%><%%-.%%><%%=FeatureName%%><%%-;
using %%><%%=Project.Namespace%%><%%-.Events.%%><%%=FeatureName%%><%%-;%%>
}
<%%-

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class provides views for the editor area.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize, change the Status value below to something
	/// other than Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public partial class EditorAreaViewModel : WorkspaceViewModel
	{
		#region "Properties"
		#endregion "Properties"

		#region "Methods"
		///--------------------------------------------------------------------------------
		/// <summary>This method processes close item messages.</summary>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_RequestItem, ParameterType = typeof(RequestEventArgs))]
		public void ProcessRequestItem(RequestEventArgs data)
		{
			switch (data.Name)
			{%%>
			foreach (Entity in Solution where Tags.Contains("DB") == true)
			{
			<%%-
				case "Manage %%><%%=BLLPluralEntityName%%><%%-":
					%%><%%=VMBLLViewPluralModelClassName%%><%%- existing%%><%%=VMBLLViewPluralModelClassName%%><%%- = Items.OfType<%%><%%=VMBLLViewPluralModelClassName%%><%%->().FirstOrDefault<%%><%%=VMBLLViewPluralModelClassName%%><%%->();
					if (existing%%><%%=VMBLLViewPluralModelClassName%%><%%- != null)
					{
						existing%%><%%=VMBLLViewPluralModelClassName%%><%%-.IsSelected = true;
					}
					else
					{
						%%><%%=VMBLLViewPluralModelClassName%%><%%- %%><%%=VMBLLViewPluralModelClassName.CamelCase()%%><%%-View = new %%><%%=VMBLLViewPluralModelClassName%%><%%-();
						%%><%%=VMBLLViewPluralModelClassName.CamelCase()%%><%%-View.RequestClose += new EventHandler(OnItemRequestClose);
						%%><%%=VMBLLViewPluralModelClassName.CamelCase()%%><%%-View.IsSelected = true;
						Items.Add(%%><%%=VMBLLViewPluralModelClassName.CamelCase()%%><%%-View);
					}
					break;%%>
			}
					<%%-
				default:
					break;
			}
		}%%>
		
		foreach (Entity in Solution where Tags.Contains("DB") == true)
		{
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method allows the editing of %%><%%=BLLClassName%%><%%- items.</summary>
		/// 
		/// <param name="data">The view model containing the data to be edited.</param>
		///--------------------------------------------------------------------------------
		[MediatorMessageSink(MediatorMessages.Command_Edit%%><%%=BLLClassName%%><%%-Requested, ParameterType = typeof(%%><%%=VMBLLEventArgsClassName%%><%%-))]
		public void ProcessEdit%%><%%=BLLClassName%%><%%-(%%><%%=VMBLLEventArgsClassName%%><%%- data)
		{
			%%><%%=VMBLLViewModelClassName%%><%%- existingView = new List<%%><%%=VMBLLViewModelClassName%%><%%->(Items.OfType<%%><%%=VMBLLViewModelClassName%%><%%->()).Find(i => %%>
			foreach (Property where IsPrimaryKeyMember == true)
			{
				if (ItemIndex > 0)
				{
					<%%- && %%>
				}
				<%%-i.%%><%%=PropertyName%%><%%- == data.%%><%%=../BLLClassName%%><%%-.%%><%%=PropertyName%%>
			}
			<%%-);
			if (existingView != null)
			{
				existingView.IsSelected = true;
			}
			else
			{
				%%><%%=VMBLLViewModelClassName%%><%%- view = data.%%><%%=BLLClassName%%><%%-;
				view.RequestClose += new EventHandler(OnItemRequestClose);
				view.IsSelected = true;
				Items.Add(view);
			}
		}%%>
		}
		<%%-

		///--------------------------------------------------------------------------------
		/// <summary>This method handles closing of an item.</summary>
		/// 
		/// <param name="sender">Sender of the event.</param>
		/// <param name="args">Event arguments.</param>
		///--------------------------------------------------------------------------------
		private void OnItemRequestClose(object sender, EventArgs e)
		{
			WorkspaceViewModel workspace = sender as WorkspaceViewModel;
			workspace.RequestClose -= OnItemRequestClose;
			workspace.Dispose();
			Items.Remove(workspace);
			workspace = null;
		}

		#endregion "Methods"

		#region "Constructors"

		///--------------------------------------------------------------------------------
		/// <summary>The default constructor (for reflection, etc.).</summary>
		///--------------------------------------------------------------------------------
		public EditorAreaViewModel()
		{
			WorkspaceID = Guid.NewGuid();
			Mediator.Register(this);
		}

		#endregion "Constructors"
	}
}
%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(VMBLLEditorAreaViewModelFilePath) == null || (File(VMBLLEditorAreaViewModelFilePath).Contains("<Status>Generated</Status>") == true && File(VMBLLEditorAreaViewModelFilePath).Filter("<CreatedByUserName>","</CreatedDate>") != Text.Filter("<CreatedByUserName>","</CreatedDate>")))
{
	update(VMBLLEditorAreaViewModelFilePath)
}
%%></OUTPUT>