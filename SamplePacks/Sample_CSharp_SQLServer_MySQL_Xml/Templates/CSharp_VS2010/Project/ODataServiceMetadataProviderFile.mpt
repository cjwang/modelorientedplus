<CONFIG>
	NAME ODataServiceMetadataProviderFile
	CATEGORY MiddleTier
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%:
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.Services.Providers;
using BLL = %%><%%=Namespace%%><%%-.BLL;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class provides metadata for OData services.</summary>
	/// 
	/// <remarks>This code is based on an example provided by Alex D. James in his blog
	/// at http://blogs.msdn.com/b/alexj/archive/2010/01/04/creating-a-data-service-provider-part-1-intro.aspx .</remarks>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	public class ODataServiceMetadataProvider : IDataServiceMetadataProvider
	{
		#region "Fields and Properties"
		private Dictionary<string, ResourceType> resourceTypes = new Dictionary<string, ResourceType>();
		private Dictionary<string, ResourceSet> resourceSets = new Dictionary<string, ResourceSet>();
		private List<ResourceAssociationSet> _associationSets = new List<ResourceAssociationSet>(); 

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the ContainerName.</summary>
		///--------------------------------------------------------------------------------
		public string ContainerName
		{
			get { return "%%><%%=DSModelClassName%%><%%-"; }
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the ContainerNamespace.</summary>
		///--------------------------------------------------------------------------------
		public string ContainerNamespace
		{
			get { return "%%><%%=Namespace%%><%%-"; }
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the ResourceSets.</summary>
		///--------------------------------------------------------------------------------
		public IEnumerable<ResourceSet> ResourceSets
		{
			get { return this.resourceSets.Values; }
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the ServiceOperations.</summary>
		///--------------------------------------------------------------------------------
		public IEnumerable<ServiceOperation> ServiceOperations
		{
			// No service operations yet 
			get { yield break; }
		}

		///--------------------------------------------------------------------------------
		/// <summary>This property gets the Types.</summary>
		///--------------------------------------------------------------------------------
		public IEnumerable<ResourceType> Types
		{
			get { return this.resourceTypes.Values; }
		}

		#endregion "Fields and Properties"

		#region "Methods"

		///--------------------------------------------------------------------------------
		/// <summary>This method tries to get a resource set by name.</summary>
		/// 
		/// <param name="name">The resource set name.</param>
		/// <param name="resourceSet">The matching resource set, if found.</param>
		///--------------------------------------------------------------------------------
		public bool TryResolveResourceSet(string name, out ResourceSet resourceSet)
		{
			return resourceSets.TryGetValue(name, out resourceSet);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method tries to get a resource type by name.</summary>
		/// 
		/// <param name="name">The resource type name.</param>
		/// <param name="resourceType">The matching resource type, if found.</param>
		///--------------------------------------------------------------------------------
		public bool TryResolveResourceType(string name, out ResourceType resourceType)
		{
			return resourceTypes.TryGetValue(name, out resourceType);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method tries to get a service operation by name.</summary>
		/// 
		/// <param name="name">The service operation name.</param>
		/// <param name="serviceOperation">The matching service operation, if found.</param>
		///--------------------------------------------------------------------------------
		public bool TryResolveServiceOperation(string name, out ServiceOperation serviceOperation)
		{
			// No service operations are supported yet 
			serviceOperation = null;
			return false;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method adds a resource type.</summary>
		/// 
		/// <param name="type">The input resource type to add.</param>
		///--------------------------------------------------------------------------------
		public void AddResourceType(ResourceType type)
		{
			type.SetReadOnly();
			resourceTypes.Add(type.FullName, type);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method adds a resource set.</summary>
		/// 
		/// <param name="set">The input resource set to add.</param>
		///--------------------------------------------------------------------------------
		public void AddResourceSet(ResourceSet set)
		{
			set.SetReadOnly();
			resourceSets.Add(set.Name, set);
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method adds a resource set.</summary>
		/// 
		/// <param name="set">The input resource set to add.</param>
		///--------------------------------------------------------------------------------
		public bool HasDerivedTypes(ResourceType resourceType)
		{%%>
		foreach (Entity in Solution)
		{
			<%%-
			if (resourceType.InstanceType == typeof(BLL.%%><%%=FeatureName%%><%%-.%%><%%=BLLClassName%%><%%-))
			{%%>
			log ("ODataServiceMetadataProviderFile", "DerivedCount", 0)
			foreach (Entity in Solution where BaseEntityID == ../EntityID)
			{
				log ("ODataServiceMetadataProviderFile", "DerivedCount", LogValue("ODataServiceMetadataProviderFile", "DerivedCount") + 1)
			}
			if (LogValue("ODataServiceMetadataProviderFile", "DerivedCount") > 0)
			{
			<%%-
				return true;%%>
			}
			else
			{
			<%%-
				return false;%%>
			}
			<%%-
			}%%>
		}
		<%%-
			return false;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method gets the derived resource types for the input resource type.</summary>
		/// 
		/// <param name="resourceType">The input resource set to add.</param>
		///--------------------------------------------------------------------------------
		public IEnumerable<ResourceType> GetDerivedTypes(ResourceType resourceType)
		{
			List<ResourceType> derivedResourceTypes = new List<ResourceType>();%%>
		foreach (Entity in Solution)
		{
			log ("ODataServiceMetadataProviderFile", "DerivedCount", 0)
			foreach (Entity in Solution where BaseEntityID == ../EntityID)
			{
				log ("ODataServiceMetadataProviderFile", "DerivedCount", LogValue("ODataServiceMetadataProviderFile", "DerivedCount") + 1)
			}
			if (LogValue("ODataServiceMetadataProviderFile", "DerivedCount") > 0)
			{
			<%%-
			if (resourceType.InstanceType == typeof(BLL.%%><%%=FeatureName%%><%%-.%%><%%=BLLClassName%%><%%-))
			{
				foreach (ResourceType resource in Types)
				{%%>
				foreach (Entity in Solution where BaseEntityID == ../EntityID)
				{
				<%%-
					if (resource.InstanceType == typeof(BLL.%%><%%=FeatureName%%><%%-.%%><%%=BLLClassName%%><%%-))
					{
						derivedResourceTypes.Add(resource);
					}%%>
				}
			<%%-
				}
			}%%>
			}
		}			
			<%%-

			return derivedResourceTypes;
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method adds a resource association set.</summary>
		/// 
		/// <param name="associationSet">The input resource association set.</param>
		///--------------------------------------------------------------------------------
		public void AddAssociationSet(ResourceAssociationSet associationSet) 
		{
			_associationSets.Add(associationSet); 
		}

		///--------------------------------------------------------------------------------
		/// <summary>This method gets the associated resource association set.</summary>
		/// 
		/// <param name="resourceSet">The input resource set.</param>
		/// <param name="resourceType">The input resource type.</param>
		/// <param name="resourceProperty">The input resource property.</param>
		///--------------------------------------------------------------------------------
		public ResourceAssociationSet GetResourceAssociationSet(ResourceSet resourceSet, ResourceType resourceType, ResourceProperty resourceProperty)
		{
			return resourceProperty.CustomState as ResourceAssociationSet;
		}

		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>Default contructor.</summary>
		///--------------------------------------------------------------------------------
		public ODataServiceMetadataProvider() { }

		#endregion "Constructors"
	}
}%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(ODataServiceMetadataProviderFilePath) == null || (File(ODataServiceMetadataProviderFilePath).Contains("<Status>Generated</Status>") == true && File(ODataServiceMetadataProviderFilePath).Filter("<CreatedByUserName>","</CreatedDate>") != Text.Filter("<CreatedByUserName>","</CreatedDate>")))
{
	update(ODataServiceMetadataProviderFilePath)
}
%%></OUTPUT>