<CONFIG>
	NAME VMEFDS
	NODE Project
	TOPLEVEL True
</CONFIG>
<CONTENT>
//
// This template is for creating a view model layer that utilizes data service operations in an entity
// framework data services layer (such as a DS project generated using the EFDataServices template).
//
// Note: Tag projects using this template with VM to best work with higher layer projects in this library.
//
<%%=USETABS false%%>
<%%-<?xml version="1.0" encoding="utf-8"?>
<!--<ProjectType>EF</ProjectType>-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{%%><%%=ProjectID.ToUpper()%%><%%-}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>%%><%%=Namespace%%><%%-</RootNamespace>
    <AssemblyName>%%><%%=Namespace%%><%%-</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.configuration" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Entity" />
    <Reference Include="System.Data.Services.Client" />
    <Reference Include="System.Xml" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ViewModelBase_G.cs" />
    <Compile Include="CommandViewModel_G.cs" />
    <Compile Include="CustomCommands_G.cs" />
    <Compile Include="DataServiceClient_G.cs" />
    <Compile Include="EditorAreaViewModel_G.cs" />
    <Compile Include="EditWorkspaceViewModel_G.cs" />
    <Compile Include="IEditWorkspaceViewModel_G.cs" />
    <Compile Include="IViewModelObject_G.cs" />
    <Compile Include="IWorkspaceViewModel_G.cs" />
    <Compile Include="ManageItemViewModel_G.cs" />
    <Compile Include="NavigationAreaViewModel_G.cs" />
    <Compile Include="NavigationItemViewModel_G.cs" />
    <Compile Include="OutputViewModel_G.cs" />
    <Compile Include="RelayCommand_G.cs" />
    <Compile Include="SortableObservableCollection_G.cs" />
    <Compile Include="StatusViewModel_G.cs" />
    <Compile Include="WorkspaceViewModel_G.cs" />
    <Compile Include="Events\RequestEventArgs_G.cs" />
    <Compile Include="Events\StatusEventArgs_G.cs" />
    <Compile Include="Events\WorkspaceEventArgs_G.cs" />
    <Compile Include="Messaging\Mediator_G.cs" />
    <Compile Include="Messaging\MediatorMessages_G.cs" />
    <Compile Include="Messaging\MediatorMessageSinkAttribute_G.cs" />
    <Compile Include="Messaging\MessageToActionsMap_G.cs" />
    <Compile Include="Messaging\WeakAction_G.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <ItemGroup>
    <ServiceReferenceMetadataStorage Include="Service References\DataService\">
      <Type>datasvcmap</Type>
    </ServiceReferenceMetadataStorage>
  </ItemGroup>
  <ItemGroup>
    <None Include="Service References\DataService\Reference.datasvcmap">
      <Generator>DataServiceClientGenerator</Generator>
    </None>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>%%></CONTENT><OUTPUT>
<%%=ProjectFilePath%%>
<%%:
// delete project file if of a different type
if (File(Path).Contains("<ProjectType>EF</ProjectType>") == false)
{
	delete(Path)
}

// create project file if it does not exist
if (FileExists(Path) == false)
{
	update(Path)
}

// make sure standard project files are present
<%%>AssemblyInfoFile%%>
<%%>VMBLLCommandViewModelFile%%>
log("GeneratedFile", VMBLLCommandViewModelFilePath, true)
<%%>VMBLLCustomCommandsFile%%>
log("GeneratedFile", VMBLLCustomCommandsFilePath, true)
<%%>VMEFDSDataServiceClientFile%%>
log("GeneratedFile", VMEFDSDataServiceClientFilePath, true)
<%%>VMBLLEditorAreaViewModelFile%%>
log("GeneratedFile", VMBLLEditorAreaViewModelFilePath, true)
<%%>VMBLLEditWorkspaceViewModelFile%%>
log("GeneratedFile", VMBLLEditWorkspaceViewModelFilePath, true)
<%%>VMBLLIEditWorkspaceViewModelFile%%>
log("GeneratedFile", VMBLLIEditWorkspaceViewModelFilePath, true)
<%%>IViewModelObjectFile%%>
log("GeneratedFile", IViewModelObjectFilePath, true)
<%%>VMBLLIWorkspaceViewModelFile%%>
log("GeneratedFile", VMBLLIWorkspaceViewModelFilePath, true)
<%%>VMBLLManageItemViewModelFile%%>
log("GeneratedFile", VMBLLManageItemViewModelFilePath, true)
<%%>VMBLLMediatorFile%%>
log("GeneratedFile", VMBLLMediatorFilePath, true)
<%%>VMBLLMediatorMessagesFile%%>
log("GeneratedFile", VMBLLMediatorMessagesFilePath, true)
<%%>VMBLLMediatorMessageSinkAttributeFile%%>
log("GeneratedFile", VMBLLMediatorMessageSinkAttributeFilePath, true)
<%%>VMBLLMessageToActionsMapFile%%>
log("GeneratedFile", VMBLLMessageToActionsMapFilePath, true)
<%%>VMBLLNavigationAreaViewModelFile%%>
log("GeneratedFile", VMBLLNavigationAreaViewModelFilePath, true)
<%%>VMBLLNavigationItemViewModelFile%%>
log("GeneratedFile", VMBLLNavigationItemViewModelFilePath, true)
<%%>VMBLLOutputViewModelFile%%>
log("GeneratedFile", VMBLLOutputViewModelFilePath, true)
<%%>VMBLLRelayCommandFile%%>
log("GeneratedFile", VMBLLRelayCommandFilePath, true)
<%%>VMBLLRequestEventArgsFile%%>
log("GeneratedFile", VMBLLRequestEventArgsFilePath, true)
<%%>SortableObservableCollectionFile%%>
log("GeneratedFile", SortableObservableCollectionFilePath, true)
<%%>VMBLLStatusEventArgsFile%%>
log("GeneratedFile", VMBLLStatusEventArgsFilePath, true)
<%%>VMBLLStatusViewModelFile%%>
log("GeneratedFile", VMBLLStatusViewModelFilePath, true)
<%%>ViewModelBaseFile%%>
log("GeneratedFile", ViewModelBaseFilePath, true)
<%%>VMBLLWeakActionFile%%>
log("GeneratedFile", VMBLLWeakActionFilePath, true)
<%%>VMBLLWorkspaceEventArgsFile%%>
log("GeneratedFile", VMBLLWorkspaceEventArgsFilePath, true)
<%%>VMBLLWorkspaceViewModelFile%%>
log("GeneratedFile", VMBLLWorkspaceViewModelFilePath, true)
<%%>VMEFDSDataServiceReferenceMapFile%%>
log("GeneratedFile", VMEFDSDataServiceReferenceMapFilePath, true)

foreach (Entity in Solution where Tags.Contains("DB") == false)
{
	// report progress
	progress
	progress
}

// add generated files that should be part of the solution
foreach (Entity in Solution where Tags.Contains("DB") == true)
{
	// output event args class file
	<%%>VMEFDSEventArgsClassCode%%>
	log("GeneratedFile", VMBLLEventArgsClassFilePath, true)
	if (File(Path).Contains(VMBLLEventArgsClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(../ProjectFilePath, "<Compile Include=", "/>", "EditWorkspaceViewModel.cs", VMBLLEventArgsClassFileProjectItem)
	}
	<%%>VMBLLExtendedEventArgsClassCode%%>
	log("GeneratedFile", VMBLLExtendedEventArgsClassFilePath, true)
	
	// output view model collection class file
	<%%>VMEFDSViewPluralModelClassCode%%>
	log("GeneratedFile", VMBLLViewPluralModelClassFilePath, true)
	if (File(Path).Contains(VMBLLViewPluralModelClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(../ProjectFilePath, "<Compile Include=", "/>", "EditWorkspaceViewModel.cs", VMBLLViewPluralModelClassFileProjectItem)
	}
	<%%>VMBLLExtendedViewPluralModelClassCode%%>
	log("GeneratedFile", VMBLLExtendedViewPluralModelClassFilePath, true)
	
	// report progress
	progress
	
	// output view model class file
	<%%>VMEFDSViewModelClassCode%%>
	log("GeneratedFile", VMBLLViewModelClassFilePath, true)
	if (File(Path).Contains(VMBLLViewModelClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(../ProjectFilePath, "<Compile Include=", "/>", "EditWorkspaceViewModel.cs", VMBLLViewModelClassFileProjectItem)
	}
	<%%>VMBLLExtendedViewModelClassCode%%>
	log("GeneratedFile", VMBLLExtendedViewModelClassFilePath, true)
	
	// report progress
	progress
}

// delete generated files that are no longer part of the solution
forfiles(ProjectDirectory, ".cs")
{
	if (LogValue("GeneratedFile", ItemPath) == null && ItemFile.Contains("<Status>Generated</Status>") == true)
	{
		// delete file
		delete(ItemPath)
		
		// remove from project file
		remove(Path, "<Compile Include=", "/>", ItemPath.Substring(ProjectDirectory.Length + 1))
		remove(Path, "<Compile Include=", "</Compile>", ItemPath.Substring(ProjectDirectory.Length + 1))
	}
}

// make sure project references are present
if (ProjectReferenceCount > 0)
{
	foreach (Project)
	{
		if (File(Path).Contains(ProjectFileName) == false)
		{
			if (File(Path).Contains("<ProjectReference") == true)
			{
				// add to project file
				insert(../ProjectFilePath, "<ProjectReference", ProjectReferenceProjectItem)
			}
			else
			{
				// add to project file as new ItemGroup
				insert(../ProjectFilePath, "<Import Project", ProjectReferenceProjectItemGroup)
			}
		}
	}
}
%%></OUTPUT>