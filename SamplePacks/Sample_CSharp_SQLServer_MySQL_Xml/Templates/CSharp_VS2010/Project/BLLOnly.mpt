<CONFIG>
	NAME BLLOnly
	NODE Project
	TOPLEVEL True
</CONFIG>
<CONTENT>
//
// This template is for creating a business logic layer that has no underlying database
// operations built in, or service enabled operations.
//
// As this temlate will not work with other layers in this library without enhancements, this
// template is intended to be a starting point for further customizations.
//
<%%=USETABS false%%>
<%%-<?xml version="1.0" encoding="utf-8"?>
<!--<ProjectType>BLL</ProjectType>-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{%%><%%=ProjectID.ToUpper()%%><%%-}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>%%><%%=Namespace%%><%%-</RootNamespace>
    <AssemblyName>%%><%%=Namespace%%><%%-</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.configuration" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Services" />
    <Reference Include="System.Transactions" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="DataAccessOptions_G.cs" />
    <Compile Include="DataArrayItemAttribute_G.cs" />
    <Compile Include="DatabaseOptions_G.cs" />
    <Compile Include="DataElementAttribute_G.cs" />
    <Compile Include="DataHelper_G.cs" />
    <Compile Include="DataTransformHelper_G.cs" />
    <Compile Include="DefaultValue_G.cs" />
    <Compile Include="EnterpriseDataObjectList_G.cs" />
    <Compile Include="ExceptionHandler_G.cs" />
    <Compile Include="FileHelper_G.cs" />
    <Compile Include="GenericObjects_G.cs" />
    <Compile Include="IEnterpriseBusinessObject_G.cs" />
    <Compile Include="IEnterpriseDataObject_G.cs" />
    <Compile Include="IEnterpriseDataObjectList_G.cs" />
    <Compile Include="IEnterpriseEnumerable_G.cs" />
    <Compile Include="IODataContext_G.cs" />
    <Compile Include="MicrosoftEnterpriseLibrary_G.cs" />
    <Compile Include="NameObjectCollection_G.cs" />
    <Compile Include="ODataService_G.cs" />
    <Compile Include="ODataServiceMetadataProvider_G.cs" />
    <Compile Include="ODataServiceQueryProvider_G.cs" />
    <Compile Include="SqlDbManager_G.cs" />
    <Compile Include="SqlHelper_G.cs" />
    <Compile Include="XmlHelper_G.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>%%></CONTENT><OUTPUT>
<%%=ProjectFilePath%%>
<%%:
//
// view the comments in the CREATE_VS_PROJECT_FILES template to control how your project file is created
//
// delete project file if of a different type
if (CREATE_VS_PROJECT_FILES == true && File(Path).Contains("<ProjectType>BLL</ProjectType>") == false)
{
	delete(Path)
}

// create project file if it does not exist
if (CREATE_VS_PROJECT_FILES == true && FileExists(Path) == false)
{
	update(Path)
}

// make sure standard project files are present
<%%>AssemblyInfoFile%%>
<%%>BusinessConfigurationFile%%>
log("GeneratedFile", BusinessConfigurationFilePath, true)
if (File(Path).Contains(BusinessConfigurationFilePath.Substring(BusinessConfigurationFilePath.IndexOf("BusinessConfiguration"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", BusinessConfigurationFileProjectItem)
}
<%%>BusinessManagerObjectBaseFile%%>
log("GeneratedFile", BusinessManagerObjectBaseFilePath, true)
if (File(Path).Contains(BusinessManagerObjectBaseFilePath.Substring(BusinessManagerObjectBaseFilePath.IndexOf("BusinessManagerObjectBase"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", BusinessManagerObjectBaseFileProjectItem)
}
<%%>BusinessObjectBaseFile%%>
log("GeneratedFile", BusinessObjectBaseFilePath, true)
if (File(Path).Contains(BusinessObjectBaseFilePath.Substring(BusinessObjectBaseFilePath.IndexOf("BusinessObjectBase"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", BusinessObjectBaseFileProjectItem)
}
<%%>DataAccessConfigurationFile%%>
log("GeneratedFile", DataAccessConfigurationFilePath, true)
if (File(Path).Contains(DataAccessConfigurationFilePath.Substring(DataAccessConfigurationFilePath.IndexOf("DataAccessConfiguration"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataAccessConfigurationFileProjectItem)
}
<%%>DataAccessObjectBaseFile%%>
log("GeneratedFile", DataAccessObjectBaseFilePath, true)
if (File(Path).Contains(DataAccessObjectBaseFilePath.Substring(DataAccessObjectBaseFilePath.IndexOf("DataAccessObjectBase"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataAccessObjectBaseFileProjectItem)
}
<%%>DataAccessOptionsFile%%>
log("GeneratedFile", DataAccessOptionsFilePath, true)
if (File(Path).Contains(DataAccessOptionsFilePath.Substring(DataAccessOptionsFilePath.IndexOf("DataAccessOptions"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataAccessOptionsFileProjectItem)
}
<%%>DataArrayItemAttributeFile%%>
log("GeneratedFile", DataArrayItemAttributeFilePath, true)
if (File(Path).Contains(DataArrayItemAttributeFilePath.Substring(DataArrayItemAttributeFilePath.IndexOf("DataArrayItemAttribute"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataArrayItemAttributeFileProjectItem)
}
<%%>DatabaseOptionsFile%%>
log("GeneratedFile", DatabaseOptionsFilePath, true)
if (File(Path).Contains(DatabaseOptionsFilePath.Substring(DatabaseOptionsFilePath.IndexOf("DatabaseOptions"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DatabaseOptionsFileProjectItem)
}
<%%>DataElementAttributeFile%%>
log("GeneratedFile", DataElementAttributeFilePath, true)
if (File(Path).Contains(DataElementAttributeFilePath.Substring(DataElementAttributeFilePath.IndexOf("DataElementAttribute"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataElementAttributeFileProjectItem)
}
<%%>DataHelperFile%%>
log("GeneratedFile", DataHelperFilePath, true)
if (File(Path).Contains(DataHelperFilePath.Substring(DataHelperFilePath.IndexOf("DataHelper"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataHelperFileProjectItem)
}
<%%>DataTransformHelperFile%%>
log("GeneratedFile", DataTransformHelperFilePath, true)
if (File(Path).Contains(DataTransformHelperFilePath.Substring(DataTransformHelperFilePath.IndexOf("DataTransformHelper"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DataTransformHelperFileProjectItem)
}
<%%>DefaultValueFile%%>
log("GeneratedFile", DefaultValueFilePath, true)
if (File(Path).Contains(DefaultValueFilePath.Substring(DefaultValueFilePath.IndexOf("DefaultValue"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", DefaultValueFileProjectItem)
}
<%%>EnterpriseDataObjectListFile%%>
log("GeneratedFile", EnterpriseDataObjectListFilePath, true)
if (File(Path).Contains(EnterpriseDataObjectListFilePath.Substring(EnterpriseDataObjectListFilePath.IndexOf("EnterpriseDataObjectList"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", EnterpriseDataObjectListFileProjectItem)
}
<%%>ExceptionHandlerFile%%>
log("GeneratedFile", ExceptionHandlerFilePath, true)
if (File(Path).Contains(ExceptionHandlerFilePath.Substring(ExceptionHandlerFilePath.IndexOf("ExceptionHandler"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", ExceptionHandlerFileProjectItem)
}
<%%>FileHelperFile%%>
log("GeneratedFile", FileHelperFilePath, true)
if (File(Path).Contains(FileHelperFilePath.Substring(FileHelperFilePath.IndexOf("FileHelper"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", FileHelperFileProjectItem)
}
<%%>GenericObjectsFile%%>
log("GeneratedFile", GenericObjectsFilePath, true)
if (File(Path).Contains(GenericObjectsFilePath.Substring(GenericObjectsFilePath.IndexOf("GenericObjects"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", GenericObjectsFileProjectItem)
}
<%%>IEnterpriseBusinessObjectFile%%>
log("GeneratedFile", IEnterpriseBusinessObjectFilePath, true)
if (File(Path).Contains(IEnterpriseBusinessObjectFilePath.Substring(IEnterpriseBusinessObjectFilePath.IndexOf("IEnterpriseBusinessObject"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", IEnterpriseBusinessObjectFileProjectItem)
}
<%%>IEnterpriseDataObjectFile%%>
log("GeneratedFile", IEnterpriseDataObjectFilePath, true)
if (File(Path).Contains(IEnterpriseDataObjectFilePath.Substring(IEnterpriseDataObjectFilePath.IndexOf("IEnterpriseDataObject"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", IEnterpriseDataObjectFileProjectItem)
}
<%%>IEnterpriseDataObjectListFile%%>
log("GeneratedFile", IEnterpriseDataObjectListFilePath, true)
if (File(Path).Contains(IEnterpriseDataObjectListFilePath.Substring(IEnterpriseDataObjectListFilePath.IndexOf("IEnterpriseDataObjectList"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", IEnterpriseDataObjectListFileProjectItem)
}
<%%>IEnterpriseEnumerableFile%%>
log("GeneratedFile", IEnterpriseEnumerableFilePath, true)
if (File(Path).Contains(IEnterpriseEnumerableFilePath.Substring(IEnterpriseEnumerableFilePath.IndexOf("IEnterpriseEnumerable"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", IEnterpriseEnumerabletFileProjectItem)
}
<%%>IODataContextFile%%>
log("GeneratedFile", IODataContextFilePath, true)
if (File(Path).Contains(IODataContextFilePath.Substring(IODataContextFilePath.IndexOf("IODataContext"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", IODataContextFileProjectItem)
}
<%%>MicrosoftEnterpriseLibraryFile%%>
log("GeneratedFile", MicrosoftEnterpriseLibraryFilePath, true)
if (File(Path).Contains(MicrosoftEnterpriseLibraryFilePath.Substring(MicrosoftEnterpriseLibraryFilePath.IndexOf("MicrosoftEnterpriseLibrary"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", MicrosoftEnterpriseLibraryFileProjectItem)
}
<%%>MicrosoftLicenseFile%%>
<%%>NameObjectCollectionFile%%>
log("GeneratedFile", NameObjectCollectionFilePath, true)
if (File(Path).Contains(NameObjectCollectionFilePath.Substring(NameObjectCollectionFilePath.IndexOf("NameObjectCollection"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", NameObjectCollectionFileProjectItem)
}
<%%>ODataServiceMetadataProviderFile%%>
log("GeneratedFile", ODataServiceMetadataProviderFilePath, true)
if (File(Path).Contains(ODataServiceMetadataProviderFilePath.Substring(ODataServiceMetadataProviderFilePath.IndexOf("ODataServiceMetadataProvider"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", ODataServiceMetadataProviderFileProjectItem)
}
<%%>ODataServiceQueryProviderFile%%>
log("GeneratedFile", ODataServiceQueryProviderFilePath, true)
if (File(Path).Contains(ODataServiceQueryProviderFilePath.Substring(ODataServiceQueryProviderFilePath.IndexOf("ODataServiceQueryProvider"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", ODataServiceQueryProviderFileProjectItem)
}
<%%>ODataServiceUpdateProviderFile%%>
log("GeneratedFile", ODataServiceUpdateProviderFilePath, true)
if (File(Path).Contains(ODataServiceUpdateProviderFilePath.Substring(ODataServiceUpdateProviderFilePath.IndexOf("ODataServiceUpdateProvider"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", ODataServiceUpdateProviderFileProjectItem)
}
<%%>ODataServiceFile%%>
log("GeneratedFile", ODataServiceFilePath, true)
if (File(Path).Contains(ODataServiceFilePath.Substring(ODataServiceFilePath.IndexOf("ODataService"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", ODataServiceFileProjectItem)
}
<%%>SqlDbManagerFile%%>
log("GeneratedFile", SqlDbManagerFilePath, true)
if (File(Path).Contains(SqlDbManagerFilePath.Substring(SqlDbManagerFilePath.IndexOf("SqlDbManager"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", SqlDbManagerFileProjectItem)
}
<%%>SqlHelperFile%%>
log("GeneratedFile", SqlHelperFilePath, true)
if (File(Path).Contains(SqlHelperFilePath.Substring(SqlHelperFilePath.IndexOf("SqlHelper"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", SqlHelperFileProjectItem)
}
<%%>XmlHelperFile%%>
log("GeneratedFile", XmlHelperFilePath, true)
if (File(Path).Contains(XmlHelperFilePath.Substring(XmlHelperFilePath.IndexOf("XmlHelper"))) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", XmlHelperFileProjectItem)
}

// add generated files that should be part of the solution
foreach (Entity in Solution)
{
	// report progress
	progress

	// output BLL class file
	<%%>BLLOnlyClassCode%%>
	log("GeneratedFile", BLLClassFilePath, true)
	if (File(Path).Contains(BLLClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(../ProjectFilePath, "<Compile Include=", "/>", "BusinessObjectBase_Ext.cs", BLLClassFileProjectItem)
	}
	
	// report progress
	progress
}

// delete generated files that are no longer part of the solution
forfiles(ProjectDirectory, ".cs")
{
	if (LogValue("GeneratedFile", ItemPath) == "" && ItemFile.Contains("<Status>Generated</Status>") == true)
	{
		// delete file
		delete(ItemPath)
		
		// remove from project file
		remove(Path, "<Compile Include=", "/>", ItemPath.Substring(ProjectDirectory.Length + 1))
	}
}
%%></OUTPUT>