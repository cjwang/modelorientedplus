<CONFIG>
	NAME DataAccessOptionsFile
	CATEGORY MiddleTier
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS false%%>
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using System.Data.Services;
using System.ComponentModel;

namespace %%><%%=Namespace%%><%%-
{
	///--------------------------------------------------------------------------------
	/// <summary>This class is used to hold options for filtering, sorting, and presenting
	/// data in conjuction with retrieving and/or modifying data.</summary>
	///
	/// This library code was generated from a template.  Change the
	/// Status value below to something other than Generated if you have
	/// customized this file to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	///--------------------------------------------------------------------------------
	[Serializable()]
	[IgnoreProperties("SortDirection", "FilterElements")]
	public class DataAccessOptions
	{
		#region "Fields and Properties"
		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the debug level (for trace operations).</summary>
		///--------------------------------------------------------------------------------
		public virtual int DebugLevel { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property determines whether or not active records should be returned
		/// in multi instance get operations.</summary>
		///--------------------------------------------------------------------------------
		public virtual bool IncludeInactive { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the index for the first page of data.</summary>
		///--------------------------------------------------------------------------------
		public virtual int StartIndex { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the size of the page of data.</summary>
		///--------------------------------------------------------------------------------
		public virtual int PageSize { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the maximum amount of data.</summary>
		///--------------------------------------------------------------------------------
		public virtual int MaximumListSize { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the sort column.</summary>
		///--------------------------------------------------------------------------------
		public virtual string SortColumn { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property gets or sets the sort direction.</summary>
		///--------------------------------------------------------------------------------
		public virtual ListSortDirection SortDirection { get; set; }

		///--------------------------------------------------------------------------------
		/// <summary>This property determines what elements (fields, properties, etc. get
		/// filtered out of results).</summary>
		///--------------------------------------------------------------------------------
		public virtual NameObjectCollection FilterElements { get; set; }

		#endregion "Fields and Properties"

		#region "Methods"
		///--------------------------------------------------------------------------------
		/// <summary>This method sets the sort direction based on the input string.</summary>
		/// 
		/// <param name="sortDirection">The input sort direction as a string.</param>
		///--------------------------------------------------------------------------------
		public void SetSortDirection(string sortDirection)
		{
			if (sortDirection.ToLower().StartsWith("des") == true)
			{
				SortDirection = ListSortDirection.Descending;
			}
			else
			{
				SortDirection = ListSortDirection.Ascending;
			}
		}
		#endregion "Methods"

		#region "Constructors"
		///--------------------------------------------------------------------------------
		/// <summary>This constructor initializes a default DataOptions instance with
		/// default values.</summary>
		///--------------------------------------------------------------------------------
		public DataAccessOptions()
		{
			// initialize a default DataOptions instance
			StartIndex = 0;
			PageSize = 50;
			MaximumListSize = 2000;
			SortColumn = String.Empty;
			SortDirection = ListSortDirection.Ascending;
		}

		#endregion "Constructors"
	}
}
%%></CONTENT><OUTPUT>
<%%:
if (File(DataAccessOptionsFilePath) == null || (File(DataAccessOptionsFilePath).Contains("<Status>Generated</Status>") == true && File(DataAccessOptionsFilePath).FilterIgnored().FilterProtected() != Text.FilterIgnored().FilterProtected()))
{
	update(DataAccessOptionsFilePath)
}
%%></OUTPUT>