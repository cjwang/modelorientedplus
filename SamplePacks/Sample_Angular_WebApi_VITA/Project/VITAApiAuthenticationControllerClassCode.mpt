<CONFIG>
	NAME VITAApiAuthenticationControllerClassCode
	CATEGORY VITA
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
//
// Use this template to create a controller to manage authentication utilizing the VITA authentication module.
//
<%%=USETABS true%%>
<%%=TAB -100%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using Vita.Common;
using Vita.Entities;
using Vita.Entities.Web;
using Vita.Modules.Login;
using Vita.Modules.Logging;
using %%><%%=Project.Namespace%%><%%-.Dtos;
using %%><%%=Project.Namespace%%><%%-.Models;%%>
<%%-

namespace %%><%%=Project.Namespace%%><%%-.Controllers%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class defines the authentication controller to handle login functions.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, add those changes
	/// in another partial class file.  As a last resort (if generated code needs
	/// to be different), change the Status value below to something other than
	/// Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	[ApiRoutePrefix("auth")]
	public class AuthenticationController : SlimApiController%%>
	<%%=Solution.OPEN_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%-ILoginService _loginService;
		ILoginManagementService _loginManagementService;
		IUserSessionService _sessionService; 
		
		public override void InitController(OperationContext controllerContext)%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-base.InitController(controllerContext);
			_loginService = controllerContext.App.GetService<ILoginService>();
			_loginManagementService = controllerContext.App.GetService<ILoginManagementService>();
			_sessionService = controllerContext.App.GetService<IUserSessionService>();%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%-
		
		private IEntitySession OpenSession()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-
			return base.Context.OpenSession();%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%-
		
		[ApiPost, ApiRoute("login")]
		public LoginResponseDto Login(LoginDto loginDto)%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-// Validate input; if validation fails, ClientFaultException is thrown which results in BadRequest response, with body
			// containing Json with client faults; if you use HttpClientWrapper (as unit tests do), it will re-throw ClientFaultException
			// with fault list inside
			Context.ThrowIfNull(loginDto, ClientFaultCodes.ContentMissing, "MessageContent", "Login object missing in request body.");
			Context.ValidateTrue(!string.IsNullOrEmpty(loginDto.UserName), ClientFaultCodes.ValueMissing, "UserName", null, "UserName may not be empty");
			Context.ValidateTrue(!string.IsNullOrEmpty(loginDto.Password), ClientFaultCodes.ValueMissing, "Password", null, "Password may not be empty");
			Context.ThrowValidation();
			
			//Login using LoginService
			var loginResult = _loginService.Login(Context, loginDto.UserName, loginDto.Password);
			if(loginResult.Status == LoginAttemptStatus.Failed)%%><%%=Solution.INDENT%%><%%-
			    return new LoginResponseDto() { ResultCode = "LoginFailed" };%%><%%=Solution.OUTDENT%%><%%-
			//If account is suspended (ex: after 3 unsuccessful logins system suspends account for 10 minutes)
			if (loginResult.Login.Flags.IsSet(LoginFlags.Suspended))%%><%%=Solution.INDENT%%><%%-
			    return new LoginResponseDto() { ResultCode = "LoginSuspended" };%%><%%=Solution.OUTDENT%%><%%-
			Context.User = loginResult.User;
			_sessionService.StartSession(Context, loginResult.User);
			var userSession = Context.UserSession;
			var resp = new LoginResponseDto() { ResultCode = "Success", AuthenticationToken = userSession.Token };
			return resp;%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%-
		
		[ApiPost, ApiRoute("register")]
		public LoginResponseDto Register(RegisterDto registerDto)%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-Context.ThrowIfNull(registerDto, ClientFaultCodes.ContentMissing, "MessageContent", "Register object missing in request body.");
			Context.ValidateTrue(!string.IsNullOrEmpty(registerDto.UserName), ClientFaultCodes.ValueMissing, "UserName", null, "UserName may not be empty");
			Context.ValidateTrue(!string.IsNullOrEmpty(registerDto.Password), ClientFaultCodes.ValueMissing, "Password", null, "Password may not be empty");
			registerDto.Validate(Context);
			Context.ThrowValidation();%%>
			foreach (Entity where VITAIsPrimaryUserEntity == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%=Solution.NEWLINE%%>
				<%%-// create user
				var session = OpenSession();
				%%><%%=VITAInterfaceName%%><%%- %%><%%=VITAClassName.CamelCase()%%><%%- = session.NewEntity<%%><%%=VITAInterfaceName%%><%%->();%%>
				foreach (Entity in EntityAndBaseEntities)
				{
					foreach (Property where VITAIsUpdateProperty == true && IsForeignKeyMember == false)
					{
						<%%=Solution.NEWLINE%%>
						<%%=../../VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPropertyName%%><%%- = registerDto.%%><%%=VITAPropertyName%%><%%-;%%>
					}
				}
				<%%=Solution.NEWLINE%%>
				<%%=VITAClassName.CamelCase()%%><%%-.Type = UserType.Member;
				if (registerDto.IsAdmin)%%><%%=Solution.INDENT%%><%%-
				%%><%%=VITAClassName.CamelCase()%%><%%-.Type |= UserType.Administrator;%%><%%=Solution.OUTDENT%%><%%-
				session.SaveChanges();
				
				// create login
				var login = _loginManagementService.NewLogin(session, registerDto.UserName, registerDto.Password, userId: %%><%%=VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPrimaryKeyPropertyName%%><%%-, loginId: %%><%%=VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPrimaryKeyPropertyName%%><%%-);
				session.SaveChanges();%%>
				break
			}
			<%%-

			// login
			LoginDto loginDto = new LoginDto { UserName = registerDto.UserName, Password = registerDto.Password };
			return Login(loginDto);%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%-


		[ApiDelete, ApiRoute("login")]
		public void Logout()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-_loginService.Logout(Context);
			var userSession = Context.UserSession;
			if(userSession != null)%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.NEWLINE%%>
				<%%-_sessionService.EndSession(Context);%%>
			<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.CLOSE_BRACE%%>
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>
%%></CONTENT><OUTPUT>
<%%:
if (Solution.ShouldUpdateFile(path=VITAApiAuthenticationControllerClassFilePath, text=Text) == true)
{
	update(VITAApiAuthenticationControllerClassFilePath)
}
%%></OUTPUT>