<CONFIG>
	NAME VITADomainAppClassCode
	CATEGORY VITA
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
//
// Use this template to create a class to set up an application with VITA managed entities.
//
<%%=USETABS true%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Collections.Generic;
using Vita.Entities;
using Vita.Entities.Authorization;
using Vita.Entities.Runtime;
using Vita.Entities.Services;
using Vita.Modules.EncryptedData;
using Vita.Common;%%>
if (Solution.VITA_ADD_LOG_MODULE == true || Solution.VITA_ADD_SESSION_MODULE == true)
{
<%%-
using Vita.Modules.Logging;
using Vita.Modules.Logging.Api;%%>
}
if (Solution.VITA_ADD_LOGIN_MODULE == true)
{
<%%-
using Vita.Modules.Login;
using Vita.Modules.Login.Api;
using Vita.Modules.TextTemplates;%%>
}
if (Solution.VITA_ADD_INFO_MODULE == true)
{
<%%-
using Vita.Modules.DbInfo;%%>
}
<%%-
using %%><%%=Project.Namespace%%><%%-.Models;
using %%><%%=Project.Namespace%%><%%-.Controllers;

namespace %%><%%=Project.Namespace%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class is used to set up an application with VITA managed entities.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, change
	/// the Status value below to something other than Generated to
	/// prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	public partial class %%><%%=VITADomainAppClassName%%><%%-: EntityApp%%>
	<%%=Solution.OPEN_BRACE%%>
		<%%-
		public DomainModule MainModule;
%%>
if (Solution.VITA_ADD_LOG_MODULE == true)
{
		<%%-		
		// To use a separate database for logs, change log connection string in app.config file to point to a separate database.
		public LoggingEntityApp LoggingApp;%%>
}
<%%-

		///--------------------------------------------------------------------------------
		/// <summary>Set up the application, incorporating all modules that should be part of the application.</summary>
		///--------------------------------------------------------------------------------
		public %%><%%=VITADomainAppClassName%%><%%-(string cryptoKey) : this()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%-
			var cryptoService = this.GetService<IEncryptionService>();
			var cryptoBytes = HexUtil.HexToByteArray(cryptoKey);
			if (cryptoService != null) cryptoService.AddChannel(cryptoBytes); //sets up default unnamed channel%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%-
		
		public %%><%%=VITADomainAppClassName%%><%%-()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			this.Version = new Version(1, 0);
			
			// add main area and module
			var domainArea = this.AddArea("Domain");
			MainModule = new %%><%%=VITADomainModuleClassName%%><%%-(domainArea);%%>
			if (Solution.VITA_ADD_INFO_MODULE == true || Solution.VITA_ADD_LOGIN_MODULE == true || Solution.VITA_ADD_LOG_MODULE == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%=Solution.NEWLINE%%>
				<%%-// add additional areas%%>
			}
			if (Solution.VITA_ADD_INFO_MODULE == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%-var infoArea = this.AddArea("Info");%%>
			}
			if (Solution.VITA_ADD_LOGIN_MODULE == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%-var loginArea = this.AddArea("Login");%%>
			}
			if (Solution.VITA_ADD_INFO_MODULE == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%=Solution.NEWLINE%%>
				<%%-// add App instance info module%%>
				<%%=Solution.NEWLINE%%>
				<%%-var appInstanceInfoModule = new DbInfoModule(infoArea);%%>
				<%%=Solution.NEWLINE%%>
			}
			if (Solution.VITA_ADD_LOGIN_MODULE == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%-// add login functionality
				var loginStt = new LoginModuleSettings(passwordExpirationPeriod: TimeSpan.FromDays(180)); //uses BCrypt hashing
				loginStt.RequiredPasswordStrength = PasswordStrength.Medium; 
				// var loginStt = new LoginModuleSettings(passwordHasher: new Pbkdf2PasswordHasher()); // uses Pbkdf2 hasher - inferior method
				var loginModule = new LoginModule(loginArea, loginStt);
				//EncryptedData is used by login module
				var cryptModule = new EncryptedDataModule(loginArea);
				var templateModule = new TemplateModule(domainArea);%%>
			}
			if (Solution.VITA_ADD_LOG_MODULE == true)
			{
				<%%=Solution.NEWLINE%%>
				<%%=Solution.NEWLINE%%>
				<%%-// add user transaction log, with extra tracking columns in "transaction" entities  
				var transLogStt = new TransactionLogModelExtender();
				// add columns CreatedIn and UpdatedIn - tracking user/date of create/update events
				transLogStt.AddUpdateStampColumns(new[]%%>
				<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.INDENT%%>
				foreach (Entity in Solution where VITAIsTransactionEntity == true)
				{
					<%%=Solution.NEWLINE%%>
					if (ItemIndex > 0)
					{
						<%%-, %%>
					}
					else
					{
						<%%-  %%>
					}
					<%%-typeof(%%><%%=VITAInterfaceName%%><%%-)%%>
				}
				<%%=Solution.CLOSE_BRACE%%>
				<%%-,
				createIdPropertyName: "CreatedIn", updateIdPropertyName: "UpdatedIn");%%>
				<%%=Solution.OUTDENT%%>
				<%%=Solution.NEWLINE%%>
				<%%=Solution.NEWLINE%%>
				<%%-// Error log, operation log, web call log, model change log, incident log, persistent session
					this.LoggingApp = new LoggingEntityApp("log");
					LoggingApp.LinkTo(this);%%>
					if (Solution.VITA_ADD_LOGIN_MODULE == true)
					{
						<%%=Solution.NEWLINE%%>
						<%%=Solution.NEWLINE%%>
						<%%-// add trigger to suspense login after 3 failed attempts within a minute
						var loginFailedTrigger = new Vita.Modules.Login.LoginFailedTrigger(this, new LoginFailedTriggerSettings(%%>
						<%%=Solution.INDENT%%>
						<%%=Solution.NEWLINE%%>
						<%%-failureCount: 3, timeWindow: TimeSpan.FromMinutes(1), suspensionPeriod: TimeSpan.FromMinutes(5)));%%>
						<%%=Solution.OUTDENT%%>
						<%%=Solution.NEWLINE%%>
						<%%-LoggingApp.IncidentLog.AddTrigger(loginFailedTrigger);%%>
					}
			}
			<%%-
			
			//api config
			base.ApiConfiguration.GlobalRoutePrefix = "slimapi";
			base.ApiConfiguration.RegisterControllerTypes(%%>
			<%%=Solution.INDENT%%>
			foreach (Entity in Solution where VITAIsDataModelEntity == true)
			{
				if (ItemIndex > 0)
				{
					<%%-,%%>
				}
				<%%-
				typeof(%%><%%=VITAApiControllerClassName%%><%%-)%%>
			}
			if (Solution.VITA_ADD_LOG_MODULE == true)
			{
				<%%-,
				typeof(ClientErrorController),
				typeof(LoggingDataController)%%>
			}
			if (Solution.VITA_ADD_LOGIN_MODULE == true)
			{
				<%%-,
				typeof(AuthenticationController),
				typeof(LoginController),
				typeof(PasswordResetController),
				typeof(LoginSelfServiceController),
				typeof(LoginAdministrationController)%%>
			}
			<%%-);%%>
			<%%=Solution.OUTDENT%%>
			<%%-
			
			// add additional custom areas and other features here
			#region protected
			#endregion protected%%>
		<%%=Solution.CLOSE_BRACE%%>
		if (Solution.VITA_ADD_LOGIN_MODULE == true)
		{
		<%%- 
		
		//Provides user roles for a given user
		 public override IList<Role> GetUserRoles(UserInfo user)%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			%%><%%=VITADomainAuthorizationHelperClassName%%><%%-.EnsureInitialized();
			var list = new List<Role>(); 
			switch(user.Kind)%%>
			<%%=Solution.OPEN_BRACE%%><%%-
				case UserKind.Anonymous:%%><%%=Solution.INDENT%%><%%-
					list.Add(%%><%%=VITADomainAuthorizationHelperClassName%%><%%-.PublicUser);
					return list;%%><%%=Solution.OUTDENT%%><%%-
				case UserKind.AuthenticatedUser:%%><%%=Solution.INDENT%%>
					foreach (Entity where VITAIsPrimaryUserEntity == true)
					{
						<%%-
						var session = this.OpenSystemSession();
						var iUser = session.GetEntity<%%><%%=VITAInterfaceName%%><%%->(user.UserId);
						var roles = %%><%%=../VITADomainAuthorizationHelperClassName%%><%%-.GetRoles(iUser.Type);
						return roles;%%><%%=Solution.OUTDENT%%>
						break
					}
			<%%=Solution.CLOSE_BRACE%%>
			<%%-
			return new List<Role>(); //never happens%%>
		<%%=Solution.CLOSE_BRACE%%>
		}
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>
%%></CONTENT><OUTPUT>
<%%:
if (File(VITADomainAppClassFilePath) == null || (File(VITADomainAppClassFilePath).Contains("<Status>Generated</Status>") == true
     && File(VITADomainAppClassFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(VITADomainAppClassFilePath)
}
%%></OUTPUT>