<CONFIG>
	NAME VITAUI
	NODE Project
	TOPLEVEL True
</CONFIG>
<CONTENT>
//
// This template is for creating an AngularJS administrative application, which manage your information via web api services.  Those services in turn manage your data
// utilizing the VITA ORM framework.
//
// Note: Link this project with your VITA web api services project.
//
<%%=USETABS false%%>
<%%-<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{%%><%%=ProjectID.ToUpper()%%><%%-}</ProjectGuid>
    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>%%><%%=Namespace%%><%%-</RootNamespace>
    <AssemblyName>%%><%%=Namespace%%><%%-</AssemblyName>
    <TargetFrameworkVersion>%%><%%=Solution.DOTNET_TARGET_VERSION%%><%%-</TargetFrameworkVersion>
    <MvcBuildViews>false</MvcBuildViews>
    <UseIISExpress>true</UseIISExpress>
    <IISExpressSSLPort />
    <IISExpressAnonymousAuthentication />
    <IISExpressWindowsAuthentication />
    <IISExpressUseClassicPipelineMode />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Antlr3.Runtime">
      <HintPath>..\packages\Antlr.3.5.0.2\lib\Antlr3.Runtime.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.Web.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
      <HintPath>..\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll</HintPath>
    </Reference>
    <Reference Include="Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Newtonsoft.Json.6.0.4\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http.Formatting, Version=5.2.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebApi.Client.5.2.2\lib\net45\System.Net.Http.Formatting.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Helpers, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.2\lib\net45\System.Web.Helpers.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Http, Version=5.2.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebApi.Core.5.2.2\lib\net45\System.Web.Http.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Http.WebHost, Version=5.2.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebApi.WebHost.5.2.2\lib\net45\System.Web.Http.WebHost.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Mvc, Version=5.2.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.Mvc.5.2.2\lib\net45\System.Web.Mvc.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Optimization">
      <HintPath>..\packages\Microsoft.AspNet.Web.Optimization.1.1.3\lib\net40\System.Web.Optimization.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.Razor.3.2.2\lib\net45\System.Web.Razor.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.WebPages, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.2\lib\net45\System.Web.WebPages.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.WebPages.Deployment, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.2\lib\net45\System.Web.WebPages.Deployment.dll</HintPath>
    </Reference>
    <Reference Include="System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\Microsoft.AspNet.WebPages.3.2.2\lib\net45\System.Web.WebPages.Razor.dll</HintPath>
    </Reference>
    <Reference Include="WebGrease">
      <HintPath>..\packages\WebGrease.1.6.0\lib\WebGrease.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Web.DynamicData" />
    <Reference Include="System.Web.Entity" />
    <Reference Include="System.Web.ApplicationServices" />
    <Reference Include="System.ComponentModel.DataAnnotations" />
    <Reference Include="System.Core" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Web" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Web.Abstractions" />
    <Reference Include="System.Web.Routing" />
    <Reference Include="System.Xml" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Web.Services" />
    <Reference Include="System.EnterpriseServices" />
    <Reference Include="System.Net.Http"/>
    <Reference Include="System.Net.Http.WebRequest"/>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Global.asax.cs">
      <DependentUpon>Global.asax</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
   <Content Include="Web.config" />
    <Content Include="Global.asax" />
  </ItemGroup>
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <Import Project="$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets" Condition="'$(VSToolsPath)' != ''" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets" Condition="false" />
  <Target Name="MvcBuildViews" AfterTargets="AfterBuild" Condition="'$(MvcBuildViews)'=='true'">
    <AspNetCompiler VirtualPath="temp" PhysicalPath="$(WebProjectOutputDir)" />
  </Target>
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
        <WebProjectProperties>
          <UseIIS>True</UseIIS>
          <AutoAssignPort>True</AutoAssignPort>
          <DevelopmentServerPort>%%><%%=VITAUIPort%%><%%-</DevelopmentServerPort>
          <DevelopmentServerVPath>/</DevelopmentServerVPath>
          <IISUrl>%%><%%=VITAUIUrl%%><%%-</IISUrl>
          <NTLMAuthentication>False</NTLMAuthentication>
          <UseCustomServer>False</UseCustomServer>
          <CustomServerUrl>
          </CustomServerUrl>
          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target> -->
</Project>%%></CONTENT><OUTPUT>
<%%=ProjectFilePath%%>
<%%:
//
// view the comments in the CREATE_VS_PROJECT_FILES template to control how your project file is created
//

// create project file if it does not exist
if (CREATE_VS_PROJECT_FILES == true && FileExists(Path) == false)
{
	update(Path)
}

<%%>AssemblyInfoFile%%>
<%%>VITAUIPackagesConfigCode%%>
<%%>VITAUIWebConfigFile%%>
<%%>VITAUIGlobalMarkupFile%%>
<%%>VITAUIGlobalClassFile%%>
log("GeneratedFile", VITAUIGlobalClassFilePath, true)
<%%>VITAUIViewWebConfigFile%%>
if (File(Path).Contains(VITAUIViewWebConfigFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIViewWebConfigFilePath))
}

// output Angular framework, css, and other project level items
<%%>VITAUISiteCssFile%%>
log("GeneratedFile", VITAUISiteCssFilePath, true)
if (File(Path).Contains(VITAUISiteCssFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUISiteCssFilePath))
}
<%%>VITAUIBundleConfigClassCode%%>
log("GeneratedFile", VITAUIBundleConfigClassFilePath, true)
if (File(Path).Contains(VITAUIBundleConfigClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.CompileInclude(filePath = VITAUIBundleConfigClassFilePath))
}
<%%>VITAUIRouteConfigClassCode%%>
log("GeneratedFile", VITAUIRouteConfigClassFilePath, true)
if (File(Path).Contains(VITAUIRouteConfigClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.CompileInclude(filePath = VITAUIRouteConfigClassFilePath))
}
// add primary domain angular application module
<%%>VITAUIDomainAppJSFile%%>
log("GeneratedFile", VITAUIDomainAppJSFilePath, true)
if (File(Path).Contains(VITAUIDomainAppJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIDomainAppJSFilePath))
}
// add web config factory
<%%>VITAUIWebConfigFactoryJSFile%%>
log("GeneratedFile", VITAUIWebConfigFactoryJSFilePath, true)
if (File(Path).Contains(VITAUIWebConfigFactoryJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIWebConfigFactoryJSFilePath))
}
// add main view and related controllers
<%%>VITAUIHomeViewFile%%>
log("GeneratedFile", VITAUIHomeViewFilePath, true)
if (File(Path).Contains(VITAUIHomeViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIHomeViewFilePath))
}
<%%>VITAUIHomeControllerClassCode%%>
log("GeneratedFile", VITAUIHomeControllerClassFilePath, true)
if (File(Path).Contains(VITAUIHomeControllerClassFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
{
	// add to project file
	insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.CompileInclude(filePath = VITAUIHomeControllerClassFilePath))
}
if (Solution.VITA_ADD_LOGIN_MODULE == true)
{
	<%%>VITAUIRegisterViewFile%%>
	log("GeneratedFile", VITAUIRegisterViewFilePath, true)
	if (File(Path).Contains(VITAUIRegisterViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIRegisterViewFilePath))
	}

	<%%>VITAUILoginViewFile%%>
	log("GeneratedFile", VITAUILoginViewFilePath, true)
	if (File(Path).Contains(VITAUILoginViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUILoginViewFilePath))
	}

	<%%>VITAUILoginControllerJSFile%%>
	log("GeneratedFile", VITAUILoginControllerJSFilePath, true)
	if (File(Path).Contains(VITAUILoginControllerJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUILoginControllerJSFilePath))
	}

	<%%>VITAUILoginServiceJSFile%%>
	log("GeneratedFile", VITAUILoginServiceJSFilePath, true)
	if (File(Path).Contains(VITAUILoginServiceJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUILoginServiceJSFilePath))
	}

	<%%>VITAUISessionServiceJSFile%%>
	log("GeneratedFile", VITAUISessionServiceJSFilePath, true)
	if (File(Path).Contains(VITAUISessionServiceJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(ProjectFilePath, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUISessionServiceJSFilePath))
	}
}

// add entity based generated files that should be part of the solution
foreach (Entity in Solution where VITAIsUIEntity == true)
{
	progress
	
	<%%>VITAUIControllerJSFile%%>
	log("GeneratedFile", VITAUIControllerJSFilePath, true)
	if (File(Path).Contains(VITAUIControllerJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIControllerJSFilePath))
	}
	
	<%%>VITAUIServiceJSFile%%>
	log("GeneratedFile", VITAUIServiceJSFilePath, true)
	if (File(Path).Contains(VITAUIServiceJSFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIServiceJSFilePath))
	}

	<%%>VITAUISearchViewFile%%>
	log("GeneratedFile", VITAUISearchViewFilePath, true)
	if (File(Path).Contains(VITAUISearchViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUISearchViewFilePath))
	}

	<%%>VITAUIResultsViewFile%%>
	log("GeneratedFile", VITAUIResultsViewFilePath, true)
	if (File(Path).Contains(VITAUIResultsViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIResultsViewFilePath))
	}
	
	<%%>VITAUIGetViewFile%%>
	log("GeneratedFile", VITAUIGetViewFilePath, true)
	if (File(Path).Contains(VITAUIGetViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIGetViewFilePath))
	}
	
	<%%>VITAUICreateViewFile%%>
	log("GeneratedFile", VITAUICreateViewFilePath, true)
	if (File(Path).Contains(VITAUICreateViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUICreateViewFilePath))
	}
	
	<%%>VITAUIUpdateViewFile%%>
	log("GeneratedFile", VITAUIUpdateViewFilePath, true)
	if (File(Path).Contains(VITAUIUpdateViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIUpdateViewFilePath))
	}
	
	<%%>VITAUIDeleteViewFile%%>
	log("GeneratedFile", VITAUIDeleteViewFilePath, true)
	if (File(Path).Contains(VITAUIDeleteViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
	{
		// add to project file
		insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUIDeleteViewFilePath))
	}
	
	foreach (Collection where IsPrimaryCollection== true)
	{
		<%%>VITAUICollectionViewFile%%>
		log("GeneratedFile", VITAUICollectionViewFilePath, true)
		if (File(Path).Contains(VITAUICollectionViewFilePath.Substring(Project.ProjectDirectory.Length + 1)) == false)
		{
			// add to project file
			insert(Path, "<Compile Include=", "/>", "AssemblyInfo.cs", Project.ContentInclude(filePath = VITAUICollectionViewFilePath))
		}
	}
	
	progress
}
foreach (Entity in Solution where VITAIsUIEntity == false)
{
	progress
	progress
}

// delete generated files that are no longer part of the solution
forfiles(ProjectDirectory, ".cs")
{
	if (LogValue("GeneratedFile", ItemPath) == null && ItemFile.Contains("<Status>Generated</Status>") == true)
	{
		// delete file
		delete(ItemPath)
		
		// remove from project file
		remove(Path, "<Compile Include=", "/>", ItemPath.Substring(ProjectDirectory.Length + 1))
	}
}
forfiles(ProjectDirectory, ".js")
{
	if (LogValue("GeneratedFile", ItemPath) == null && ItemFile.Contains("<Status>Generated</Status>") == true)
	{
		// delete file
		delete(ItemPath)
		
		// remove from project file
		remove(Path, "<Content Include=", "/>", ItemPath.Substring(ProjectDirectory.Length + 1))
	}
}
forfiles(ProjectDirectory, ".cshtml")
{
	if (LogValue("GeneratedFile", ItemPath) == null && ItemFile.Contains("<Status>Generated</Status>") == true)
	{
		// delete file
		delete(ItemPath)
		
		// remove from project file
		remove(Path, "<Content Include=", "/>", ItemPath.Substring(ProjectDirectory.Length + 1))
	}
}

// make sure project references are present
if (ProjectReferenceCount > 0)
{
	foreach (Project)
	{
		if (File(Path).Contains(ProjectFileName) == false)
		{
			if (File(Path).Contains("<ProjectReference") == true)
			{
				// add to project file
				insert(Path, "<ProjectReference", ProjectReferenceProjectItem)
			}
			else
			{
				// add to project file as new ItemGroup
				insert(Path, "<Import Project", ProjectReferenceProjectItemGroup)
			}
		}
	}
}%%></OUTPUT>